
rom.exe:	file format ELF32-pi32v2

Disassembly of section .rom_code:
_start:
  110000:    c0 ea 1a 2e       	goto 0x5c34 <usb_code_end : 115c38 >			  ## startup.S:25:0


exception_irq_handler:
  110004:    58 e9 2f 38       	[--sp] = {ssp, usp, icfg, psr, rets, retx, rete, reti}			  ## startup.S:92:0
  110008:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## startup.S:93:0
  11000c:    64 e0 00 0e       	r0 = sp			  ## startup.S:94:0
  110010:    80 ea a9 2e       	call 0x5d52 <exception_analyze : 115d66 >			  ## startup.S:95:0
  110014:    f7 9f             	goto -0x2 <exception_irq_handler+0x10 : 110014 >			  ## startup.S:97:0


the_debug_isr:
  110016:    d8 e8 01 00       	[--sp] = {r0}			  ## debug_stub.S:16:0
  11001a:    64 e0 00 0e       	r0 = sp			  ## debug_stub.S:17:0
  11001e:    ee ff 84 1c 03 00 	sp = 0x31c84			  ## debug_stub.S:18:0
  110024:    58 e9 ff 7f       	[--sp] = {sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti}			  ## debug_stub.S:20:0
  110028:    d8 e8 ff ff       	[--sp] = {r15-r0}			  ## debug_stub.S:21:0
  11002c:    01 60             	r1 = [r0+0x0] 			  ## debug_stub.S:41:0
  11002e:    81 20             	[sp] = r1			  ## debug_stub.S:42:0
  110030:    08 84             	r0 = r0 + 0x4			  ## debug_stub.S:44:0
  110032:    80 3e             	[sp+120] = r0			  ## debug_stub.S:45:0
  110034:    64 e0 00 0e       	r0 = sp			  ## debug_stub.S:46:0
  110038:    c1 ff 80 f0 10 00 	r1 = 0x10f080 <RAM_LIMIT_H+0xDD080 : 10f080 >			  ## debug_stub.S:47:0
  11003e:    90 61             	[r1+0x4] = r0			  ## debug_stub.S:48:0
  110040:    12 60             	r2 = [r1+0x0] 			  ## debug_stub.S:50:0
  110042:    ba 3f             	r2 &= 0x7fffffff			  ## debug_stub.S:51:0
  110044:    92 60             	[r1+0x0] = r2			  ## debug_stub.S:52:0
  110046:    4a 20             	r2 = 0x20			  ## debug_stub.S:55:0
  110048:    00 00             	nop			  ## debug_stub.S:57:0
  11004a:    02 ea fd ff       	if (--r2 != 0) goto -0x6 <the_debug_isr+0x32 : 110048 >			  ## debug_stub.S:58:0
  11004e:    10 60             	r0 = [r1+0x0] 			  ## debug_stub.S:59:0
  110050:    50 e8 f9 f9       	if ((r0 & 0x80000000) == 0) goto -0xe <the_debug_isr+0x30 : 110046 >			  ## debug_stub.S:61:0
  110054:    d4 e8 ff ff       	{r15-r0} = [sp++]			  ## debug_stub.S:64:0
  110058:    50 e9 ff 7f       	{sp, ssp, usp, icfg, sr10, sr9, sr8, sr7, cnum, psr, sr4, rets, retx, rete, reti} = [sp++]			  ## debug_stub.S:65:0
  11005c:    83 00             	rte			  ## debug_stub.S:67:0
  11005e:    00 00             	nop


WOLA_ANA_128:
  110060:	 00 00 00 00 53 07 00 00         ....S...
  110068:	 49 08 00 00 4f 09 00 00         I...O...
  110070:	 63 0a 00 00 86 0b 00 00         c.......
  110078:	 ba 0c 00 00 fd 0d 00 00         ........
  110080:	 51 0f 00 00 b5 10 00 00         Q.......
  110088:	 2b 12 00 00 b2 13 00 00         +.......
  110090:	 4a 15 00 00 f4 16 00 00         J.......
  110098:	 b1 18 00 00 80 1a 00 00         ........
  1100a0:	 61 1c 00 00 55 1e 00 00         a...U...
  1100a8:	 5d 20 00 00 77 22 00 00         ] ..w"..
  1100b0:	 a5 24 00 00 e6 26 00 00         .$...&..
  1100b8:	 3b 29 00 00 a4 2b 00 00         ;)...+..
  1100c0:	 21 2e 00 00 b2 30 00 00         !....0..
  1100c8:	 56 33 00 00 0f 36 00 00         V3...6..
  1100d0:	 dc 38 00 00 bd 3b 00 00         .8...;..
  1100d8:	 b2 3e 00 00 bb 41 00 00         .>...A..
  1100e0:	 d8 44 00 00 09 48 00 00         .D...H..
  1100e8:	 4e 4b 00 00 a6 4e 00 00         NK...N..
  1100f0:	 12 52 00 00 91 55 00 00         .R...U..
  1100f8:	 23 59 00 00 c9 5c 00 00         #Y...\..
  110100:	 81 60 00 00 4b 64 00 00         .`..Kd..
  110108:	 27 68 00 00 15 6c 00 00         'h...l..
  110110:	 15 70 00 00 26 74 00 00         .p..&t..
  110118:	 47 78 00 00 79 7c 00 00         Gx..y|..
  110120:	 bb 80 00 00 0c 85 00 00         ........
  110128:	 6c 89 00 00 db 8d 00 00         l.......
  110130:	 57 92 00 00 e1 96 00 00         W.......
  110138:	 78 9b 00 00 1c a0 00 00         x.......
  110140:	 cb a4 00 00 85 a9 00 00         ........
  110148:	 49 ae 00 00 17 b3 00 00         I.......
  110150:	 ef b7 00 00 ce bc 00 00         ........
  110158:	 b6 c1 00 00 a4 c6 00 00         ........
  110160:	 99 cb 00 00 93 d0 00 00         ........
  110168:	 92 d5 00 00 95 da 00 00         ........
  110170:	 9b df 00 00 a3 e4 00 00         ........
  110178:	 ad e9 00 00 b7 ee 00 00         ........
  110180:	 c1 f3 00 00 ca f8 00 00         ........
  110188:	 d1 fd 00 00 d5 02 01 00         ........
  110190:	 d5 07 01 00 d1 0c 01 00         ........
  110198:	 c8 11 01 00 b8 16 01 00         ........
  1101a0:	 a0 1b 01 00 81 20 01 00         ..... ..
  1101a8:	 58 25 01 00 26 2a 01 00         X%..&*..
  1101b0:	 e8 2e 01 00 9f 33 01 00         .....3..
  1101b8:	 49 38 01 00 e5 3c 01 00         I8...<..
  1101c0:	 73 41 01 00 f1 45 01 00         sA...E..
  1101c8:	 60 4a 01 00 bd 4e 01 00         `J...N..
  1101d0:	 08 53 01 00 40 57 01 00         .S..@W..
  1101d8:	 64 5b 01 00 74 5f 01 00         d[..t_..
  1101e0:	 6f 63 01 00 54 67 01 00         oc..Tg..
  1101e8:	 21 6b 01 00 d7 6e 01 00         !k...n..
  1101f0:	 74 72 01 00 f8 75 01 00         tr...u..
  1101f8:	 62 79 01 00 b1 7c 01 00         by...|..
  110200:	 e5 7f 01 00 fd 82 01 00         ........
  110208:	 f9 85 01 00 d7 88 01 00         ........
  110210:	 97 8b 01 00 38 8e 01 00         ....8...
  110218:	 ba 90 01 00 1d 93 01 00         ........
  110220:	 60 95 01 00 82 97 01 00         `.......
  110228:	 83 99 01 00 63 9b 01 00         ....c...
  110230:	 20 9d 01 00 bc 9e 01 00          .......
  110238:	 35 a0 01 00 8b a1 01 00         5.......
  110240:	 bd a2 01 00 cd a3 01 00         ........
  110248:	 b8 a4 01 00 80 a5 01 00         ........
  110250:	 23 a6 01 00 a3 a6 01 00         #.......
  110258:	 fe a6 01 00 34 a7 01 00         ....4...
  110260:	 47 a7 01 00 34 a7 01 00         G...4...
  110268:	 fe a6 01 00 a3 a6 01 00         ........
  110270:	 23 a6 01 00 80 a5 01 00         #.......
  110278:	 b8 a4 01 00 cd a3 01 00         ........
  110280:	 bd a2 01 00 8b a1 01 00         ........
  110288:	 35 a0 01 00 bc 9e 01 00         5.......
  110290:	 20 9d 01 00 63 9b 01 00          ...c...
  110298:	 83 99 01 00 82 97 01 00         ........
  1102a0:	 60 95 01 00 1d 93 01 00         `.......
  1102a8:	 ba 90 01 00 38 8e 01 00         ....8...
  1102b0:	 97 8b 01 00 d7 88 01 00         ........
  1102b8:	 f9 85 01 00 fd 82 01 00         ........
  1102c0:	 e5 7f 01 00 b1 7c 01 00         .....|..
  1102c8:	 62 79 01 00 f8 75 01 00         by...u..
  1102d0:	 74 72 01 00 d7 6e 01 00         tr...n..
  1102d8:	 21 6b 01 00 54 67 01 00         !k..Tg..
  1102e0:	 6f 63 01 00 74 5f 01 00         oc..t_..
  1102e8:	 64 5b 01 00 40 57 01 00         d[..@W..
  1102f0:	 08 53 01 00 bd 4e 01 00         .S...N..
  1102f8:	 60 4a 01 00 f1 45 01 00         `J...E..
  110300:	 73 41 01 00 e5 3c 01 00         sA...<..
  110308:	 49 38 01 00 9f 33 01 00         I8...3..
  110310:	 e8 2e 01 00 26 2a 01 00         ....&*..
  110318:	 58 25 01 00 81 20 01 00         X%... ..
  110320:	 a0 1b 01 00 b8 16 01 00         ........
  110328:	 c8 11 01 00 d1 0c 01 00         ........
  110330:	 d5 07 01 00 d5 02 01 00         ........
  110338:	 d1 fd 00 00 ca f8 00 00         ........
  110340:	 c1 f3 00 00 b7 ee 00 00         ........
  110348:	 ad e9 00 00 a3 e4 00 00         ........
  110350:	 9b df 00 00 95 da 00 00         ........
  110358:	 92 d5 00 00 93 d0 00 00         ........
  110360:	 99 cb 00 00 a4 c6 00 00         ........
  110368:	 b6 c1 00 00 ce bc 00 00         ........
  110370:	 ef b7 00 00 17 b3 00 00         ........
  110378:	 49 ae 00 00 85 a9 00 00         I.......
  110380:	 cb a4 00 00 1c a0 00 00         ........
  110388:	 78 9b 00 00 e1 96 00 00         x.......
  110390:	 57 92 00 00 db 8d 00 00         W.......
  110398:	 6c 89 00 00 0c 85 00 00         l.......
  1103a0:	 bb 80 00 00 79 7c 00 00         ....y|..
  1103a8:	 47 78 00 00 26 74 00 00         Gx..&t..
  1103b0:	 15 70 00 00 15 6c 00 00         .p...l..
  1103b8:	 27 68 00 00 4b 64 00 00         'h..Kd..
  1103c0:	 81 60 00 00 c9 5c 00 00         .`...\..
  1103c8:	 23 59 00 00 91 55 00 00         #Y...U..
  1103d0:	 12 52 00 00 a6 4e 00 00         .R...N..
  1103d8:	 4e 4b 00 00 09 48 00 00         NK...H..
  1103e0:	 d8 44 00 00 bb 41 00 00         .D...A..
  1103e8:	 b2 3e 00 00 bd 3b 00 00         .>...;..
  1103f0:	 dc 38 00 00 0f 36 00 00         .8...6..
  1103f8:	 56 33 00 00 b2 30 00 00         V3...0..
  110400:	 21 2e 00 00 a4 2b 00 00         !....+..
  110408:	 3b 29 00 00 e6 26 00 00         ;)...&..
  110410:	 a5 24 00 00 77 22 00 00         .$..w"..
  110418:	 5d 20 00 00 55 1e 00 00         ] ..U...
  110420:	 61 1c 00 00 80 1a 00 00         a.......
  110428:	 b1 18 00 00 f4 16 00 00         ........
  110430:	 4a 15 00 00 b2 13 00 00         J.......
  110438:	 2b 12 00 00 b5 10 00 00         +.......
  110440:	 51 0f 00 00 fd 0d 00 00         Q.......
  110448:	 ba 0c 00 00 86 0b 00 00         ........
  110450:	 63 0a 00 00 4f 09 00 00         c...O...
  110458:	 49 08 00 00 53 07 00 00         


WOLA_ANA_64:
  110460:	 00 00 00 00 b3 f4 ff ff         ........
  110468:	 c2 f1 ff ff 7b ee ff ff         ....{...
  110470:	 d8 ea ff ff d6 e6 ff ff         ........
  110478:	 72 e2 ff ff a9 dd ff ff         r.......
  110480:	 78 d8 ff ff dc d2 ff ff         x.......
  110488:	 d3 cc ff ff 5b c6 ff ff         ....[...
  110490:	 72 bf ff ff 18 b8 ff ff         r.......
  110498:	 4d b0 ff ff 0e a8 ff ff         M.......
  1104a0:	 5f 9f ff ff 3e 96 ff ff         _...>...
  1104a8:	 ad 8c ff ff ae 82 ff ff         ........
  1104b0:	 44 78 ff ff 71 6d ff ff         Dx..qm..
  1104b8:	 39 62 ff ff 9f 56 ff ff         9b...V..
  1104c0:	 a8 4a ff ff 59 3e ff ff         .J..Y>..
  1104c8:	 b8 31 ff ff c9 24 ff ff         .1...$..
  1104d0:	 95 17 ff ff 22 0a ff ff         ...."...
  1104d8:	 76 fc fe ff 9a ee fe ff         v.......
  1104e0:	 96 e0 fe ff 73 d2 fe ff         ....s...
  1104e8:	 39 c4 fe ff f2 b5 fe ff         9.......
  1104f0:	 a7 a7 fe ff 62 99 fe ff         ....b...
  1104f8:	 2d 8b fe ff 11 7d fe ff         -....}..
  110500:	 19 6f fe ff 4f 61 fe ff         .o..Oa..
  110508:	 be 53 fe ff 70 46 fe ff         .S..pF..
  110510:	 6f 39 fe ff c4 2c fe ff         o9...,..
  110518:	 7b 20 fe ff 9d 14 fe ff         { ......
  110520:	 33 09 fe ff 47 fe fd ff         3...G...
  110528:	 e1 f3 fd ff 0b ea fd ff         ........
  110530:	 cc e0 fd ff 2c d8 fd ff         ....,...
  110538:	 33 d0 fd ff e7 c8 fd ff         3.......
  110540:	 4e c2 fd ff 6e bc fd ff         N...n...
  110548:	 4c b7 fd ff ed b2 fd ff         L.......
  110550:	 54 af fd ff 84 ac fd ff         T.......
  110558:	 81 aa fd ff 4b a9 fd ff         ....K...
  110560:	 e3 a8 fd ff 4b a9 fd ff         ....K...
  110568:	 81 aa fd ff 84 ac fd ff         ........
  110570:	 54 af fd ff ed b2 fd ff         T.......
  110578:	 4c b7 fd ff 6e bc fd ff         L...n...
  110580:	 4e c2 fd ff e7 c8 fd ff         N.......
  110588:	 33 d0 fd ff 2c d8 fd ff         3...,...
  110590:	 cc e0 fd ff 0b ea fd ff         ........
  110598:	 e1 f3 fd ff 47 fe fd ff         ....G...
  1105a0:	 33 09 fe ff 9d 14 fe ff         3.......
  1105a8:	 7b 20 fe ff c4 2c fe ff         { ...,..
  1105b0:	 6f 39 fe ff 70 46 fe ff         o9..pF..
  1105b8:	 be 53 fe ff 4f 61 fe ff         .S..Oa..
  1105c0:	 19 6f fe ff 11 7d fe ff         .o...}..
  1105c8:	 2d 8b fe ff 62 99 fe ff         -...b...
  1105d0:	 a7 a7 fe ff f2 b5 fe ff         ........
  1105d8:	 39 c4 fe ff 73 d2 fe ff         9...s...
  1105e0:	 96 e0 fe ff 9a ee fe ff         ........
  1105e8:	 76 fc fe ff 22 0a ff ff         v..."...
  1105f0:	 95 17 ff ff c9 24 ff ff         .....$..
  1105f8:	 b8 31 ff ff 59 3e ff ff         .1..Y>..
  110600:	 a8 4a ff ff 9f 56 ff ff         .J...V..
  110608:	 39 62 ff ff 71 6d ff ff         9b..qm..
  110610:	 44 78 ff ff ae 82 ff ff         Dx......
  110618:	 ad 8c ff ff 3e 96 ff ff         ....>...
  110620:	 5f 9f ff ff 0e a8 ff ff         _.......
  110628:	 4d b0 ff ff 18 b8 ff ff         M.......
  110630:	 72 bf ff ff 5b c6 ff ff         r...[...
  110638:	 d3 cc ff ff dc d2 ff ff         ........
  110640:	 78 d8 ff ff a9 dd ff ff         x.......
  110648:	 72 e2 ff ff d6 e6 ff ff         r.......
  110650:	 d8 ea ff ff 7b ee ff ff         ....{...
  110658:	 c2 f1 ff ff b3 f4 ff ff         


WOLA_SYN_128:
  110660:	 c7 09 fa ff b5 6f f9 ff         .....o..
  110668:	 c0 d5 f8 ff 35 3c f8 ff         ....5<..
  110670:	 61 a3 f7 ff 90 0b f7 ff         a.......
  110678:	 12 75 f6 ff 36 e0 f5 ff         .u..6...
  110680:	 4b 4d f5 ff a2 bc f4 ff         KM......
  110688:	 8a 2e f4 ff 55 a3 f3 ff         ....U...
  110690:	 54 1b f3 ff d8 96 f2 ff         T.......
  110698:	 32 16 f2 ff b3 99 f1 ff         2.......
  1106a0:	 ad 21 f1 ff 70 ae f0 ff         .!..p...
  1106a8:	 4d 40 f0 ff 93 d7 ef ff         M@......
  1106b0:	 92 74 ef ff 99 17 ef ff         .t......
  1106b8:	 f8 c0 ee ff fa 70 ee ff         .....p..
  1106c0:	 ed 27 ee ff 1c e6 ed ff         .'......
  1106c8:	 d2 ab ed ff 59 79 ed ff         ....Yy..
  1106d0:	 f9 4e ed ff f9 2c ed ff         .N...,..
  1106d8:	 9e 13 ed ff 2d 03 ed ff         ....-...
  1106e0:	 e7 fb ec ff 0f fe ec ff         ........
  1106e8:	 e3 09 ed ff 9f 1f ed ff         ........
  1106f0:	 81 3f ed ff c2 69 ed ff         .?...i..
  1106f8:	 98 9e ed ff 3a de ed ff         ....:...
  110700:	 da 28 ee ff a9 7e ee ff         .(...~..
  110708:	 d7 df ee ff 8e 4c ef ff         .....L..
  110710:	 f9 c4 ef ff 3f 49 f0 ff         ....?I..
  110718:	 84 d9 f0 ff ec 75 f1 ff         .....u..
  110720:	 94 1e f2 ff 9a d3 f2 ff         ........
  110728:	 18 95 f3 ff 25 63 f4 ff         ....%c..
  110730:	 d4 3d f5 ff 37 25 f6 ff         .=..7%..
  110738:	 5d 19 f7 ff 51 1a f8 ff         ]...Q...
  110740:	 1b 28 f9 ff c0 42 fa ff         .(...B..
  110748:	 44 6a fb ff a5 9e fc ff         Dj......
  110750:	 df df fd ff ec 2d ff ff         .....-..
  110758:	 c2 88 00 00 9d ee 01 00         ........
  110760:	 ef 60 08 00 f3 ca 0a 00         .`......
  110768:	 08 41 0d 00 a3 c2 0f 00         .A......
  110770:	 36 4f 12 00 2f e6 14 00         6O../...
  110778:	 f9 86 17 00 fc 30 1a 00         .....0..
  110780:	 9b e3 1c 00 39 9e 1f 00         ....9...
  110788:	 33 60 22 00 e6 28 25 00         3`"..(%.
  110790:	 aa f7 27 00 d8 cb 2a 00         ..'...*.
  110798:	 c4 a4 2d 00 bf 81 30 00         ..-...0.
  1107a0:	 1c 62 33 00 2a 45 36 00         .b3.*E6.
  1107a8:	 35 2a 39 00 89 10 3c 00         5*9...<.
  1107b0:	 73 f7 3e 00 3c de 41 00         s.>.<.A.
  1107b8:	 2e c4 44 00 8f a8 47 00         ..D...G.
  1107c0:	 aa 8a 4a 00 c5 69 4d 00         ..J..iM.
  1107c8:	 29 45 50 00 1c 1c 53 00         )EP...S.
  1107d0:	 e8 ed 55 00 d4 b9 58 00         ..U...X.
  1107d8:	 28 7f 5b 00 31 3d 5e 00         (.[.1=^.
  1107e0:	 37 f3 60 00 88 a0 63 00         7.`...c.
  1107e8:	 71 44 66 00 3f de 68 00         qDf.?.h.
  1107f0:	 46 6d 6b 00 d6 f0 6d 00         Fmk...m.
  1107f8:	 45 68 70 00 ea d2 72 00         Ehp...r.
  110800:	 1d 30 75 00 3c 7f 77 00         .0u.<.w.
  110808:	 a3 bf 79 00 b6 f0 7b 00         ..y...{.
  110810:	 da 11 7e 00 75 22 80 00         ..~.u"..
  110818:	 f3 21 82 00 c5 0f 84 00         .!......
  110820:	 5e eb 85 00 2e b4 87 00         ^.......
  110828:	 b2 69 89 00 73 0b 8b 00         .i..s...
  110830:	 e6 98 8c 00 95 11 8e 00         ........
  110838:	 0f 75 8f 00 ed c2 90 00         .u......
  110840:	 b6 fa 91 00 05 1c 93 00         ........
  110848:	 82 26 94 00 c7 19 95 00         .&......
  110850:	 86 f5 95 00 6a b9 96 00         ....j...
  110858:	 26 65 97 00 a4 fb 97 00         &e......
  110860:	 64 ef 97 00 73 51 97 00         d...sQ..
  110868:	 37 9b 96 00 e4 cc 95 00         7.......
  110870:	 e0 e6 94 00 70 e9 93 00         ....p...
  110878:	 eb d4 92 00 bf a9 91 00         ........
  110880:	 3a 68 90 00 d5 10 8f 00         :h......
  110888:	 f6 a3 8d 00 0d 22 8c 00         ....."..
  110890:	 92 8b 8a 00 fe e0 88 00         ........
  110898:	 d2 22 87 00 8e 51 85 00         ."...Q..
  1108a0:	 bc 6d 83 00 e7 77 81 00         .m...w..
  1108a8:	 9d 70 7f 00 71 58 7d 00         .p..qX}.
  1108b0:	 f9 2f 7b 00 cd f7 78 00         ./{...x.
  1108b8:	 8b b0 76 00 d1 5a 74 00         ..v..Zt.
  1108c0:	 43 f7 71 00 85 86 6f 00         C.q...o.
  1108c8:	 3f 09 6d 00 1c 80 6a 00         ?.m...j.
  1108d0:	 c7 eb 67 00 ef 4c 65 00         ..g..Le.
  1108d8:	 44 a4 62 00 77 f2 5f 00         D.b.w._.
  1108e0:	 3c 38 5d 00 47 76 5a 00         <8].GvZ.
  1108e8:	 4d ad 57 00 06 de 54 00         M.W...T.
  1108f0:	 29 09 52 00 6c 2f 4f 00         ).R.l/O.
  1108f8:	 8a 51 4c 00 3a 70 49 00         .QL.:pI.
  110900:	 34 8c 46 00 31 a6 43 00         4.F.1.C.
  110908:	 e8 be 40 00 11 d7 3d 00         ..@...=.
  110910:	 64 ef 3a 00 94 08 38 00         d.:...8.
  110918:	 59 23 35 00 63 40 32 00         Y#5.c@2.
  110920:	 66 60 2f 00 11 84 2c 00         f`/...,.
  110928:	 13 ac 29 00 1b d9 26 00         ..)...&.
  110930:	 d0 0b 24 00 dc 44 21 00         ..$..D!.
  110938:	 e4 84 1e 00 8d cc 1b 00         ........
  110940:	 75 1c 19 00 3d 75 16 00         u...=u..
  110948:	 7c d7 13 00 cb 43 11 00         |....C..
  110950:	 bd ba 0e 00 e5 3c 0c 00         .....<..
  110958:	 ce ca 09 00 a6 62 07 00         .....b..
  110960:	 b5 ff 00 00 49 9d ff ff         ....I...
  110968:	 a2 47 fe ff cd fe fc ff         .G......
  110970:	 d2 c2 fb ff b7 93 fa ff         ........
  110978:	 80 71 f9 ff 2a 5c f8 ff         .q..*\..
  110980:	 b3 53 f7 ff 14 58 f6 ff         .S...X..
  110988:	 44 69 f5 ff 36 87 f4 ff         Di..6...
  110990:	 da b1 f3 ff 1e e9 f2 ff         ........
  110998:	 ed 2c f2 ff 2f 7d f1 ff         .,../}..
  1109a0:	 c7 d9 f0 ff 9a 42 f0 ff         .....B..
  1109a8:	 86 b7 ef ff 68 38 ef ff         ....h8..
  1109b0:	 1b c5 ee ff 76 5d ee ff         ....v]..
  1109b8:	 4e 01 ee ff 76 b0 ed ff         N...v...
  1109c0:	 c0 6a ed ff f8 2f ed ff         .j.../..
  1109c8:	 eb ff ec ff 64 da ec ff         ....d...
  1109d0:	 28 bf ec ff fd ad ec ff         (.......
  1109d8:	 a9 a6 ec ff ed a8 ec ff         ........
  1109e0:	 87 b4 ec ff 39 c9 ec ff         ....9...
  1109e8:	 bd e6 ec ff ce 0c ed ff         ........
  1109f0:	 27 3b ed ff 80 71 ed ff         ';...q..
  1109f8:	 91 af ed ff 0f f5 ed ff         ........
  110a00:	 af 41 ee ff 25 95 ee ff         .A..%...
  110a08:	 24 ef ee ff 5d 4f ef ff         $...]O..
  110a10:	 82 b5 ef ff 44 21 f0 ff         ....D!..
  110a18:	 53 92 f0 ff 5e 08 f1 ff         S...^...
  110a20:	 16 83 f1 ff 29 02 f2 ff         ....)...
  110a28:	 44 85 f2 ff 18 0c f3 ff         D.......
  110a30:	 53 96 f3 ff a3 23 f4 ff         S....#..
  110a38:	 b8 b3 f4 ff 41 46 f5 ff         ....AF..
  110a40:	 ed da f5 ff 6c 71 f6 ff         ....lq..
  110a48:	 6f 09 f7 ff a6 a2 f7 ff         o.......
  110a50:	 c3 3c f8 ff 7a d7 f8 ff         .<..z...
  110a58:	 7c 72 f9 ff 4d 0e fa ff         


WOLA_SYN_64:
  110a60:	 c2 6c 04 00 31 44 05 00         .l..1D..
  110a68:	 d6 19 06 00 fa eb 06 00         ........
  110a70:	 de b8 07 00 bf 7e 08 00         .....~..
  110a78:	 d4 3b 09 00 54 ee 09 00         .;..T...
  110a80:	 76 94 0a 00 72 2c 0b 00         v...r,..
  110a88:	 86 b4 0b 00 f5 2a 0c 00         .....*..
  110a90:	 0b 8e 0c 00 1f dc 0c 00         ........
  110a98:	 94 13 0d 00 dc 32 0d 00         .....2..
  110aa0:	 78 38 0d 00 fe 22 0d 00         x8..."..
  110aa8:	 14 f1 0c 00 7c a1 0c 00         ....|...
  110ab0:	 0a 33 0c 00 ae a4 0b 00         .3......
  110ab8:	 72 f5 0a 00 7d 24 0a 00         r...}$..
  110ac0:	 12 31 09 00 95 1a 08 00         .1......
  110ac8:	 87 e0 06 00 8b 82 05 00         ........
  110ad0:	 65 00 04 00 fc 59 02 00         e....Y..
  110ad8:	 59 8f 00 00 d2 a1 fe ff         Y.......
  110ae0:	 31 b8 f8 ff 5f 3d f5 ff         1..._=..
  110ae8:	 35 a3 f1 ff eb ec ed ff         5.......
  110af0:	 e2 1d ea ff 9a 39 e6 ff         .....9..
  110af8:	 b3 43 e2 ff e9 3f de ff         .C...?..
  110b00:	 10 32 da ff 0d 1e d6 ff         .2......
  110b08:	 d9 07 d2 ff 75 f3 cd ff         ....u...
  110b10:	 ec e4 c9 ff 50 e0 c5 ff         ....P...
  110b18:	 ad e9 c1 ff 0f 05 be ff         ........
  110b20:	 74 36 ba ff d6 81 b6 ff         t6......
  110b28:	 15 eb b2 ff 05 76 af ff         .....v..
  110b30:	 55 26 ac ff a6 ff a8 ff         U&......
  110b38:	 6d 05 a6 ff ff 3a a3 ff         m....:..
  110b40:	 8a a3 a0 ff 13 42 9e ff         .....B..
  110b48:	 6a 19 9c ff 33 2c 9a ff         j...3,..
  110b50:	 e0 7c 98 ff a5 0d 97 ff         .|......
  110b58:	 85 e0 95 ff 18 f5 94 ff         ........
  110b60:	 82 0b 95 ff 71 12 96 ff         ....q...
  110b68:	 97 5c 97 ff 15 e8 98 ff         .\......
  110b70:	 d4 b2 9a ff 87 ba 9c ff         ........
  110b78:	 a9 fc 9e ff 86 76 a1 ff         .....v..
  110b80:	 32 25 a4 ff 9e 05 a7 ff         2%......
  110b88:	 88 14 aa ff 91 4e ad ff         .....N..
  110b90:	 2e b0 b0 ff ba 35 b4 ff         .....5..
  110b98:	 75 db b7 ff 85 9d bb ff         u.......
  110ba0:	 ff 77 bf ff e8 66 c3 ff         .w...f..
  110ba8:	 37 66 c7 ff e1 71 cb ff         7f...q..
  110bb0:	 d6 85 cf ff 04 9e d3 ff         ........
  110bb8:	 64 b6 d7 ff f5 ca db ff         d.......
  110bc0:	 c5 d7 df ff f2 d8 e3 ff         ........
  110bc8:	 b2 ca e7 ff 50 a9 eb ff         ....P...
  110bd0:	 39 71 ef ff f5 1e f3 ff         9q......
  110bd8:	 33 af f6 ff 64 20 fa ff         3...d ..
  110be0:	 bd f0 ff ff d4 d0 01 00         ........
  110be8:	 aa 8c 03 00 24 24 05 00         ....$$..
  110bf0:	 45 97 06 00 35 e6 07 00         E...5...
  110bf8:	 3c 11 09 00 c6 18 0a 00         <.......
  110c00:	 5c fd 0a 00 a9 bf 0b 00         \.......
  110c08:	 75 60 0c 00 a5 e0 0c 00         u`......
  110c10:	 3a 41 0d 00 4e 83 0d 00         :A..N...
  110c18:	 17 a8 0d 00 de b0 0d 00         ........
  110c20:	 05 9f 0d 00 ff 73 0d 00         .....s..
  110c28:	 51 31 0d 00 92 d8 0c 00         Q1......
  110c30:	 63 6b 0c 00 75 eb 0b 00         ck..u...
  110c38:	 80 5a 0b 00 43 ba 0a 00         .Z..C...
  110c40:	 86 0c 0a 00 12 53 09 00         .....S..
  110c48:	 b2 8f 08 00 31 c4 07 00         ....1...
  110c50:	 56 f2 06 00 e6 1b 06 00         V.......
  110c58:	 9e 42 05 00 a4 67 04 00         


ans_win:
  110c60:	 00 00 30 04 5f 08 8c 0c         ..0._...
  110c68:	 b5 10 da 14 f9 18 11 1d         ........
  110c70:	 21 21 28 25 25 29 17 2d         !!(%%).-
  110c78:	 fc 30 d4 34 9d 38 57 3c         .0.4.8W<
  110c80:	 00 40 98 43 1d 47 8f 4a         .@.C.G.J
  110c88:	 ec 4d 34 51 65 54 80 57         .M4QeT.W
  110c90:	 82 5a 6c 5d 3c 60 f2 62         .Zl]<`.b
  110c98:	 8d 65 0b 68 6e 6a b3 6c         .e.hnj.l
  110ca0:	 da 6e e3 70 cd 72 97 74         .n.p.r.t
  110ca8:	 42 76 cc 77 35 79 7d 7a         Bv.w5y}z
  110cb0:	 a3 7b a8 7c 8a 7d 4a 7e         .{.|.}J~
  110cb8:	 e8 7e 62 7f ba 7f ee 7f         .~b.....
  110cc0:	 ff 7f ff 7f ff 7f ff 7f         ........
  110cc8:	 ff 7f ff 7f ff 7f ff 7f         ........
  110cd0:	 ff 7f ff 7f ff 7f ff 7f         ........
  110cd8:	 ff 7f ff 7f ff 7f ff 7f         ........
  110ce0:	 ff 7f ff 7f ff 7f ff 7f         ........
  110ce8:	 ff 7f ff 7f ff 7f ff 7f         ........
  110cf0:	 ff 7f ff 7f ff 7f ff 7f         ........
  110cf8:	 ff 7f ff 7f ff 7f ff 7f         ........
  110d00:	 ff 7f ee 7f ba 7f 62 7f         ......b.
  110d08:	 e8 7e 4a 7e 8a 7d a8 7c         .~J~.}.|
  110d10:	 a3 7b 7d 7a 35 79 cc 77         .{}z5y.w
  110d18:	 42 76 97 74 cd 72 e3 70         Bv.t.r.p
  110d20:	 da 6e b3 6c 6e 6a 0b 68         .n.lnj.h
  110d28:	 8d 65 f2 62 3c 60 6c 5d         .e.b<`l]
  110d30:	 82 5a 80 57 65 54 34 51         .Z.WeT4Q
  110d38:	 ec 4d 8f 4a 1d 47 98 43         .M.J.G.C
  110d40:	 00 40 57 3c 9d 38 d4 34         .@W<.8.4
  110d48:	 fc 30 17 2d 25 29 28 25         .0.-%)(%
  110d50:	 21 21 11 1d f9 18 da 14         !!......
  110d58:	 b5 10 8c 0c 5f 08 30 04         


nlp_win:
  110d60:	 00 00 92 01 24 03 b6 04         ....$...
  110d68:	 48 06 d9 07 6b 09 fb 0a         H...k...
  110d70:	 8c 0c 1c 0e ab 0f 3a 11         ......:.
  110d78:	 c8 12 55 14 e2 15 6e 17         ..U...n.
  110d80:	 f9 18 83 1a 0c 1c 93 1d         ........
  110d88:	 1a 1f 9f 20 24 22 a7 23         ... $".#
  110d90:	 28 25 a8 26 27 28 a4 29         (%.&'(.)
  110d98:	 1f 2b 99 2c 11 2e 87 2f         .+.,.../
  110da0:	 fc 30 6e 32 df 33 4e 35         .0n2.3N5
  110da8:	 ba 36 25 38 8d 39 f3 3a         .6%8.9.:
  110db0:	 57 3c b8 3d 17 3f 74 40         W<.=.?t@
  110db8:	 ce 41 26 43 7b 44 cd 45         .A&C{D.E
  110dc0:	 1d 47 6a 48 b4 49 fb 4a         .GjH.I.J
  110dc8:	 40 4c 81 4d c0 4e fb 4f         @L.M.N.O
  110dd0:	 34 51 69 52 9b 53 ca 54         4QiR.S.T
  110dd8:	 f6 55 1e 57 43 58 64 59         .U.WCXdY
  110de0:	 82 5a 9d 5b b4 5c c8 5d         .Z.[.\.]
  110de8:	 d7 5e e4 5f ec 60 f1 61         .^._.`.a
  110df0:	 f2 62 ef 63 e9 64 de 65         .b.c.d.e
  110df8:	 d0 66 bd 67 a7 68 8c 69         .f.g.h.i
  110e00:	 6e 6a 4b 6b 24 6c f9 6c         njKk$l.l
  110e08:	 ca 6d 97 6e 5f 6f 23 70         .m.n_o#p
  110e10:	 e3 70 9e 71 55 72 08 73         .p.qUr.s
  110e18:	 b6 73 60 74 05 75 a6 75         .s`t.u.u
  110e20:	 42 76 d9 76 6c 77 fb 77         Bv.vlw.w
  110e28:	 85 78 0a 79 8a 79 06 7a         .x.y.y.z
  110e30:	 7d 7a ef 7a 5d 7b c6 7b         }z.z]{.{
  110e38:	 2a 7c 89 7c e4 7c 3a 7d         *|.|.|:}
  110e40:	 8a 7d d6 7d 1e 7e 60 7e         .}.}.~`~
  110e48:	 9d 7e d6 7e 0a 7f 38 7f         .~.~..8.
  110e50:	 62 7f 87 7f a7 7f c2 7f         b.......
  110e58:	 d9 7f ea 7f f6 7f fe 7f         ........
  110e60:	 ff 7f fe 7f f6 7f ea 7f         ........
  110e68:	 d9 7f c2 7f a7 7f 87 7f         ........
  110e70:	 62 7f 38 7f 0a 7f d6 7e         b.8....~
  110e78:	 9d 7e 60 7e 1e 7e d6 7d         .~`~.~.}
  110e80:	 8a 7d 3a 7d e4 7c 89 7c         .}:}.|.|
  110e88:	 2a 7c c6 7b 5d 7b ef 7a         *|.{]{.z
  110e90:	 7d 7a 06 7a 8a 79 0a 79         }z.z.y.y
  110e98:	 85 78 fb 77 6c 77 d9 76         .x.wlw.v
  110ea0:	 42 76 a6 75 05 75 60 74         Bv.u.u`t
  110ea8:	 b6 73 08 73 55 72 9e 71         .s.sUr.q
  110eb0:	 e3 70 23 70 5f 6f 97 6e         .p#p_o.n
  110eb8:	 ca 6d f9 6c 24 6c 4b 6b         .m.l$lKk
  110ec0:	 6e 6a 8c 69 a7 68 bd 67         nj.i.h.g
  110ec8:	 d0 66 de 65 e9 64 ef 63         .f.e.d.c
  110ed0:	 f2 62 f1 61 ec 60 e4 5f         .b.a.`._
  110ed8:	 d7 5e c8 5d b4 5c 9d 5b         .^.].\.[
  110ee0:	 82 5a 64 59 43 58 1e 57         .ZdYCX.W
  110ee8:	 f6 55 ca 54 9b 53 69 52         .U.T.SiR
  110ef0:	 34 51 fb 4f c0 4e 81 4d         4Q.O.N.M
  110ef8:	 40 4c fb 4a b4 49 6a 48         @L.J.IjH
  110f00:	 1d 47 cd 45 7b 44 26 43         .G.E{D&C
  110f08:	 ce 41 74 40 17 3f b8 3d         .At@.?.=
  110f10:	 57 3c f3 3a 8d 39 25 38         W<.:.9%8
  110f18:	 ba 36 4e 35 df 33 6e 32         .6N5.3n2
  110f20:	 fc 30 87 2f 11 2e 99 2c         .0./...,
  110f28:	 1f 2b a4 29 27 28 a8 26         .+.)'(.&
  110f30:	 28 25 a7 23 24 22 9f 20         (%.#$". 
  110f38:	 1a 1f 93 1d 0c 1c 83 1a         ........
  110f40:	 f9 18 6e 17 e2 15 55 14         ..n...U.
  110f48:	 c8 12 3a 11 ab 0f 1c 0e         ..:.....
  110f50:	 8c 0c fb 0a 6b 09 d9 07         ....k...
  110f58:	 48 06 b6 04 24 03 92 01         


bsinc_tab_6:
  110f60:	 00 00 00 00 fa ff ff ff         ........
  110f68:	 d3 ff ff ff 89 ff ff ff         ........
  110f70:	 45 ff ff ff 54 ff ff ff         E...T...
  110f78:	 00 00 00 00 61 01 00 00         ....a...
  110f80:	 32 03 00 00 cc 04 00 00         2.......
  110f88:	 45 05 00 00 ca 03 00 00         E.......
  110f90:	 00 00 00 00 61 fa ff ff         ....a...
  110f98:	 59 f4 ff ff 0c f0 ff ff         Y.......
  110fa0:	 c1 ef ff ff 0c f5 ff ff         ........
  110fa8:	 00 00 00 00 a8 0e 00 00         ........
  110fb0:	 23 1d 00 00 6f 26 00 00         #...o&..
  110fb8:	 dd 25 00 00 c5 18 00 00         .%......
  110fc0:	 00 00 00 00 88 e0 ff ff         ........
  110fc8:	 da c2 ff ff 06 b1 ff ff         ........
  110fd0:	 b3 b3 ff ff fc ce ff ff         ........
  110fd8:	 00 00 00 00 43 3c 00 00         ....C<..
  110fe0:	 5c 73 00 00 ee 92 00 00         \s......
  110fe8:	 16 8c 00 00 e3 58 00 00         .....X..
  110ff0:	 00 00 00 00 2a 95 ff ff         ....*...
  110ff8:	 96 35 ff ff ac 00 ff ff         .5......
  111000:	 bf 0e ff ff 34 68 ff ff         ....4h..
  111008:	 00 00 00 00 c1 b3 00 00         ........
  111010:	 5e 52 01 00 58 a8 01 00         ^R..X...
  111018:	 e7 8e 01 00 e3 f9 00 00         ........
  111020:	 00 00 00 00 01 da fe ff         ........
  111028:	 a6 d7 fd ff fb 4b fd ff         .....K..
  111030:	 6c 75 fd ff f2 67 fe ff         lu...g..
  111038:	 00 00 00 00 44 e3 01 00         ....D...
  111040:	 2c 91 03 00 eb 80 04 00         ,.......
  111048:	 c1 46 04 00 6d b7 02 00         .F..m...
  111050:	 00 00 00 00 53 aa fc ff         ....S...
  111058:	 5e 8a f9 ff 6c 96 f7 ff         ^...l...
  111060:	 99 b1 f7 ff 53 74 fa ff         ....St..
  111068:	 00 00 00 00 42 e9 07 00         ....B...
  111070:	 c9 3f 11 00 d6 b3 1a 00         .?......
  111078:	 c2 d2 22 00 04 4e 28 00         .."..N(.
  111080:	 71 3d 2a 00 04 4e 28 00         q=*..N(.
  111088:	 c2 d2 22 00 d6 b3 1a 00         ..".....
  111090:	 c9 3f 11 00 42 e9 07 00         .?..B...
  111098:	 00 00 00 00 53 74 fa ff         ....St..
  1110a0:	 99 b1 f7 ff 6c 96 f7 ff         ....l...
  1110a8:	 5e 8a f9 ff 53 aa fc ff         ^...S...
  1110b0:	 00 00 00 00 6d b7 02 00         ....m...
  1110b8:	 c1 46 04 00 eb 80 04 00         .F......
  1110c0:	 2c 91 03 00 44 e3 01 00         ,...D...
  1110c8:	 00 00 00 00 f2 67 fe ff         .....g..
  1110d0:	 6c 75 fd ff fb 4b fd ff         lu...K..
  1110d8:	 a6 d7 fd ff 01 da fe ff         ........
  1110e0:	 00 00 00 00 e3 f9 00 00         ........
  1110e8:	 e7 8e 01 00 58 a8 01 00         ....X...
  1110f0:	 5e 52 01 00 c1 b3 00 00         ^R......
  1110f8:	 00 00 00 00 34 68 ff ff         ....4h..
  111100:	 bf 0e ff ff ac 00 ff ff         ........
  111108:	 96 35 ff ff 2a 95 ff ff         .5..*...
  111110:	 00 00 00 00 e3 58 00 00         .....X..
  111118:	 16 8c 00 00 ee 92 00 00         ........
  111120:	 5c 73 00 00 43 3c 00 00         \s..C<..
  111128:	 00 00 00 00 fc ce ff ff         ........
  111130:	 b3 b3 ff ff 06 b1 ff ff         ........
  111138:	 da c2 ff ff 88 e0 ff ff         ........
  111140:	 00 00 00 00 c5 18 00 00         ........
  111148:	 dd 25 00 00 6f 26 00 00         .%..o&..
  111150:	 23 1d 00 00 a8 0e 00 00         #.......
  111158:	 00 00 00 00 0c f5 ff ff         ........
  111160:	 c1 ef ff ff 0c f0 ff ff         ........
  111168:	 59 f4 ff ff 61 fa ff ff         Y...a...
  111170:	 00 00 00 00 ca 03 00 00         ........
  111178:	 45 05 00 00 cc 04 00 00         E.......
  111180:	 32 03 00 00 61 01 00 00         2...a...
  111188:	 00 00 00 00 54 ff ff ff         ....T...
  111190:	 45 ff ff ff 89 ff ff ff         E.......
  111198:	 d3 ff ff ff fa ff ff ff         ........
  1111a0:	 00 00 00 00                     ....


bsinc_tab_6_l:
  1111a4:	 00 00 00 00 5a 00 00 00         ....Z...
  1111ac:	 90 02 00 00 08 07 00 00         ........
  1111b4:	 87 0b 00 00 26 0b 00 00         ....&...
  1111bc:	 00 00 00 00 81 e6 ff ff         ........
  1111c4:	 58 c1 ff ff 4b 9c ff ff         X...K...
  1111cc:	 bf 8b ff ff 5c a7 ff ff         ....\...
  1111d4:	 00 00 00 00 94 93 00 00         ........
  1111dc:	 98 43 01 00 1e d4 01 00         .C......
  1111e4:	 5c f7 01 00 22 66 01 00         \..."f..
  1111ec:	 00 00 00 00 13 e9 fd ff         ........
  1111f4:	 3a 99 fb ff 92 d2 f9 ff         :.......
  1111fc:	 be 7b f9 ff f9 63 fb ff         .{...c..
  111204:	 00 00 00 00 43 34 07 00         ....C4..
  11120c:	 af 3f 10 00 68 d2 19 00         .?..h...
  111214:	 15 4f 22 00 bd 27 28 00         .O"..'(.
  11121c:	 71 3d 2a 00 bd 27 28 00         q=*..'(.
  111224:	 15 4f 22 00 68 d2 19 00         .O".h...
  11122c:	 af 3f 10 00 43 34 07 00         .?..C4..
  111234:	 00 00 00 00 f9 63 fb ff         .....c..
  11123c:	 be 7b f9 ff 92 d2 f9 ff         .{......
  111244:	 3a 99 fb ff 13 e9 fd ff         :.......
  11124c:	 00 00 00 00 22 66 01 00         ...."f..
  111254:	 5c f7 01 00 1e d4 01 00         \.......
  11125c:	 98 43 01 00 94 93 00 00         .C......
  111264:	 00 00 00 00 5c a7 ff ff         ....\...
  11126c:	 bf 8b ff ff 4b 9c ff ff         ....K...
  111274:	 58 c1 ff ff 81 e6 ff ff         X.......
  11127c:	 00 00 00 00 26 0b 00 00         ....&...
  111284:	 87 0b 00 00 08 07 00 00         ........
  11128c:	 90 02 00 00 5a 00 00 00         ....Z...
  111294:	 00 00 00 00                     ....


memmove:
  111298:    76 04             	[--sp] = {rets, r6-r4}
  11129a:    00 ec 03 10       	if (r1 > r0) goto 0x6 <memmove+0xC : 1112a4 >
  11129e:    93 1c             	r3 = r1 + r2
  1112a0:    00 ec 29 30       	if (r3 > r0) goto 0x52 <memmove+0x5E : 1112f6 >
  1112a4:    03 16             	r3 = r0
  1112a6:    82 f9 14 10       	if (r2 < 0x8) goto 0x28 <memmove+0x3A : 1112d2 >
  1112aa:    65 e1 03 10       	r5 = r1 & 0x3
  1112ae:    64 e1 03 30       	r4 = r3 & 0x3
  1112b2:    04 46             	if (r4 == 0) goto 0xc <memmove+0x28 : 1112c0 >
  1112b4:    a6 e0 04 40       	r6 = 0x4 - r4
  1112b8:    a2 1f             	r2 = r2 - r6
  1112ba:    16 03             	rep 0x4 r6 {
  1112bc:    16 07             		r6 = b[r1++=0x1] (u)
  1112be:    b6 07             		b[r3++=0x1] = r6
                               	}
  1112c0:    5c 19             	r4 ^= r5
  1112c2:    a5 a2             	r5 = r2 >> 0x2
  1112c4:    84 4a             	if (r4 != 0) goto 0x14 <memmove+0x42 : 1112da >
  1112c6:    15 03             	rep 0x4 r5 {
  1112c8:    16 05             		r6 = [r1++=0x4] 
  1112ca:    b6 05             		[r3++=0x4] = r6
                               	}
  1112cc:    f5 5c             	if (r5 != 0) goto -0x8 <memmove+0x2E : 1112c6 >
  1112ce:    62 e1 03 20       	r2 = r2 & 0x3
  1112d2:    12 03             	rep 0x4 r2 {
  1112d4:    12 07             		r2 = b[r1++=0x1] (u)
  1112d6:    b2 07             		b[r3++=0x1] = r2
                               	}
  1112d8:    56 04             	{pc, r6-r4} = [sp++]
  1112da:    a5 03             	rep 0x16 r5 {
  1112dc:    16 07             		r6 = b[r1++=0x1] (u)
  1112de:    14 07             		r4 = b[r1++=0x1] (u)
  1112e0:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
  1112e4:    14 07             			 r4 = b[r1++=0x1] (u)
  1112e6:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
  1112ea:    14 07             			 r4 = b[r1++=0x1] (u)
  1112ec:    a6 e1 20 4c       		r6 <= insert(r4, p:0x18, l:0x8)
  1112f0:    b6 05             		[r3++=0x4] = r6
                               	}
  1112f2:    f5 53             	if (r5 != 0) goto -0x1a <memmove+0x42 : 1112da >
  1112f4:    f7 8c             	goto -0x28 <memmove+0x36 : 1112ce >
  1112f6:    83 1c             	r3 = r0 + r2
  1112f8:    91 1c             	r1 = r1 + r2
  1112fa:    82 f9 17 10       	if (r2 < 0x8) goto 0x2e <memmove+0x94 : 11132c >
  1112fe:    65 e1 03 10       	r5 = r1 & 0x3
  111302:    64 e1 03 30       	r4 = r3 & 0x3
  111306:    04 47             	if (r4 == 0) goto 0xe <memmove+0x7E : 111316 >
  111308:    22 1f             	r2 = r2 - r4
  11130a:    46 16             	r6 = r4
  11130c:    36 03             	rep 0x8 r6 {
  11130e:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
  111312:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
  111316:    5c 19             	r4 ^= r5
  111318:    a5 a2             	r5 = r2 >> 0x2
  11131a:    84 4e             	if (r4 != 0) goto 0x1c <memmove+0xA0 : 111338 >
  11131c:    35 03             	rep 0x8 r5 {
  11131e:    d7 ec 1e 6f       		r6 = [++r1=-0x4]
  111322:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
  111326:    f5 5a             	if (r5 != 0) goto -0xc <memmove+0x84 : 11131c >
  111328:    62 e1 03 20       	r2 = r2 & 0x3
  11132c:    32 03             	rep 0x8 r2 {
  11132e:    59 ee 1f 6f       		r6 = b[++r1=-0x1] (u)
  111332:    5b ee 3f 6f       		b[++r3=-0x1] = r6
                               	}
  111336:    56 04             	{pc, r6-r4} = [sp++]
  111338:    f9 3f             	r1 += -0x1
  11133a:    b5 03             	rep 0x18 r5 {
  11133c:    1e 07             		r6 = b[r1++=-0x1] (u)
  11133e:    66 b8             		r6 = r6 << 0x18
  111340:    1c 07             		r4 = b[r1++=-0x1] (u)
  111342:    a6 f1 20 48       		r6 <= insert(r4, p:0x10, l:0x8)  #
  111346:    1c 07             			 r4 = b[r1++=-0x1] (u)
  111348:    a6 f1 20 44       		r6 <= insert(r4, p:0x8, l:0x8)  #
  11134c:    1c 07             			 r4 = b[r1++=-0x1] (u)
  11134e:    46 19             		r6 |= r4
  111350:    d7 ec 3f 6f       		[++r3=-0x4] = r6
                               	}
  111354:    f5 52             	if (r5 != 0) goto -0x1c <memmove+0xA2 : 11133a >
  111356:    19 81             	r1 = r1 + 0x1
  111358:    f7 87             	goto -0x32 <memmove+0x90 : 111328 >


memset:
  11135a:    74 04             	[--sp] = {rets, r4}
  11135c:    03 16             	r3 = r0
  11135e:    02 52             	if (r2 == 0) goto 0x24 <memset+0x2A : 111384 >
  111360:    33 ea 03 40       	if ((r3 & 0x3) != 0) {
  111364:    f2 f0 01 20       		r2 = r2 - 0x1  #
  111368:    b1 07             		  b[r3++=0x1] = r1
  11136a:    f7 99             		goto -0xe
                               	} <memset+0x4 : 11135e >
  11136c:    a4 a2             	r4 = r2 >> 0x2
  11136e:    a1 e1 20 14       	r1 <= insert(r1, p:0x8, l:0x8)
  111372:    a1 e1 40 18       	r1 <= insert(r1, p:0x10, l:0x10)
  111376:    04 03             	rep 0x2 r4 {
  111378:    b1 05             		[r3++=0x4] = r1
                               	}
  11137a:    f4 5d             	if (r4 != 0) goto -0x6 <memset+0x1C : 111376 >
  11137c:    62 e1 03 20       	r2 = r2 & 0x3
  111380:    02 03             	rep 0x2 r2 {
  111382:    b1 07             		b[r3++=0x1] = r1
                               	}
  111384:    54 04             	{pc, r4} = [sp++]


memcmp:
  111386:    74 04             	[--sp] = {rets, r4}
  111388:    82 f9 05 08       	if (r2 < 0x4) goto 0xa <memcmp+0x10 : 111396 >
  11138c:    90 e1 10 30       	r3 = r1 | r0
  111390:    60 ff 03 30 0b 00 	if ((r3 & 0x3) == 0) goto 0x16 <memcmp+0x26 : 1113ac >
  111396:    02 51             	if (r2 == 0) goto 0x22 <memcmp+0x34 : 1113ba >
  111398:    13 07             	r3 = b[r1++=0x1] (u)
  11139a:    04 07             	r4 = b[r0++=0x1] (u)
  11139c:    fa 3f             	r2 += -0x1
  11139e:    03 e8 fa 41       	if (r4 == r3) goto -0xc <memcmp+0x10 : 111396 >
  1113a2:    c8 1e             	r0 = r4 - r3
  1113a4:    54 04             	{pc, r4} = [sp++]
  1113a6:    fa 3c             	r2 += -0x4
  1113a8:    c1 24             	r1 += 0x4
  1113aa:    c0 24             	r0 += 0x4
  1113ac:    82 f9 f3 09       	if (r2 < 0x4) goto -0x1a <memcmp+0x10 : 111396 >
  1113b0:    13 60             	r3 = [r1+0x0] 
  1113b2:    04 60             	r4 = [r0+0x0] 
  1113b4:    03 e8 f7 41       	if (r4 == r3) goto -0x12 <memcmp+0x20 : 1113a6 >
  1113b8:    f7 8e             	goto -0x24 <memcmp+0x10 : 111396 >
  1113ba:    40 20             	r0 = 0x0
  1113bc:    54 04             	{pc, r4} = [sp++]


memmem:
  1113be:    77 04             	[--sp] = {rets, r7-r4}
  1113c0:    35 16             	r5 = r3
  1113c2:    26 16             	r6 = r2
  1113c4:    17 16             	r7 = r1
  1113c6:    04 16             	r4 = r0
  1113c8:    85 49             	if (r5 != 0) goto 0x12 <memmem+0x1E : 1113dc >
  1113ca:    04 8b             	goto 0x16 <memmem+0x24 : 1113e2 >
  1113cc:    40 16             	r0 = r4
  1113ce:    61 16             	r1 = r6
  1113d0:    52 16             	r2 = r5
  1113d2:    bf ea d8 ff       	call -0x50 <memcmp : 111386 >
  1113d6:    00 45             	if (r0 == 0) goto 0xa <memmem+0x24 : 1113e2 >
  1113d8:    ff 3f             	r7 += -0x1
  1113da:    c4 21             	r4 += 0x1
  1113dc:    05 e9 f6 71       	if (r7 >= r5) goto -0x14 <memmem+0xE : 1113cc >
  1113e0:    44 20             	r4 = 0x0
  1113e2:    40 16             	r0 = r4
  1113e4:    57 04             	{pc, r7-r4} = [sp++]


strcmp:
  1113e6:    77 04             	[--sp] = {rets, r7-r4}
  1113e8:    64 e1 03 00       	r4 = r0 & 0x3
  1113ec:    04 4b             	if (r4 == 0) goto 0x16 <strcmp+0x1E : 111404 >
  1113ee:    a4 e0 04 40       	r4 = 0x4 - r4
  1113f2:    0a 40             	r2 = b[r0+0x0] (u)
  1113f4:    22 41             	if (r2 == 0) goto 0x82 <strcmp+0x92 : 111478 >
  1113f6:    1b 40             	r3 = b[r1+0x0] (u)
  1113f8:    83 e8 3f 20       	if (r2 != r3) goto 0x7e <strcmp+0x94 : 11147a >
  1113fc:    08 81             	r0 = r0 + 0x1
  1113fe:    19 81             	r1 = r1 + 0x1
  111400:    04 ea f7 ff       	if (--r4 != 0) goto -0x12 <strcmp+0xC : 1113f2 >
  111404:    90 e1 10 20       	r2 = r1 | r0
  111408:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_LZ4_decompress_safe_continue+0xFEED7F02 : fefefefe >
  11140e:    61 ff 03 20 13 00 	if ((r2 & 0x3) != 0) goto 0x26 <strcmp+0x54 : 11143a >
  111414:    02 60             	r2 = [r0+0x0] 
  111416:    13 60             	r3 = [r1+0x0] 
  111418:    83 e8 26 20       	if (r2 != r3) goto 0x4c <strcmp+0x82 : 111468 >
  11141c:    14 16             	r4 = r1
  11141e:    a1 1d             	r1 = r2 + r6
  111420:    90 e1 13 12       	r1 = r1 & ~r2
  111424:    61 ff 80 13 2c 00 	if ((r1 & 0x80808080) != 0) goto 0x58 <strcmp+0x9C : 111482 >
  11142a:    02 61             	r2 = [r0+0x4] 
  11142c:    45 61             	r5 = [r4+0x4] 
  11142e:    49 84             	r1 = r4 + 0x4
  111430:    08 84             	r0 = r0 + 0x4
  111432:    14 16             	r4 = r1
  111434:    05 e8 f3 21       	if (r2 == r5) goto -0x1a <strcmp+0x38 : 11141e >
  111438:    04 97             	goto 0x2e <strcmp+0x82 : 111468 >
  11143a:    14 16             	r4 = r1
  11143c:    02 60             	r2 = [r0+0x0] 
  11143e:    43 07             	r3 = b[r4++=0x1] (u)
  111440:    45 07             	r5 = b[r4++=0x1] (u)
  111442:    a3 e1 20 54       	r3 <= insert(r5, p:0x8, l:0x8)
  111446:    45 07             	r5 = b[r4++=0x1] (u)
  111448:    a3 e1 20 58       	r3 <= insert(r5, p:0x10, l:0x8)
  11144c:    45 07             	r5 = b[r4++=0x1] (u)
  11144e:    a3 e1 20 5c       	r3 <= insert(r5, p:0x18, l:0x8)
  111452:    83 e8 09 20       	if (r2 != r3) goto 0x12 <strcmp+0x82 : 111468 >
  111456:    a5 1d             	r5 = r2 + r6
  111458:    90 e1 53 52       	r5 = r5 & ~r2
  11145c:    61 ff 80 53 10 00 	if ((r5 & 0x80808080) != 0) goto 0x20 <strcmp+0x9C : 111482 >
  111462:    08 84             	r0 = r0 + 0x4
  111464:    19 84             	r1 = r1 + 0x4
  111466:    f7 89             	goto -0x2e <strcmp+0x54 : 11143a >
  111468:    0a 40             	r2 = b[r0+0x0] (u)
  11146a:    02 46             	if (r2 == 0) goto 0xc <strcmp+0x92 : 111478 >
  11146c:    1c 40             	r4 = b[r1+0x0] (u)
  11146e:    84 e8 04 20       	if (r2 != r4) goto 0x8 <strcmp+0x94 : 11147a >
  111472:    08 81             	r0 = r0 + 0x1
  111474:    19 81             	r1 = r1 + 0x1
  111476:    f7 98             	goto -0x10 <strcmp+0x82 : 111468 >
  111478:    42 20             	r2 = 0x0
  11147a:    13 16             	r3 = r1
  11147c:    38 40             	r0 = b[r3+0x0] (u)
  11147e:    20 1e             	r0 = r2 - r0
  111480:    57 04             	{pc, r7-r4} = [sp++]
  111482:    40 20             	r0 = 0x0
  111484:    57 04             	{pc, r7-r4} = [sp++]


strcpy:
  111486:    77 04             	[--sp] = {rets, r7-r4}
  111488:    07 16             	r7 = r0
  11148a:    64 e1 03 00       	r4 = r0 & 0x3
  11148e:    04 47             	if (r4 == 0) goto 0xe <strcpy+0x18 : 11149e >
  111490:    a4 e0 04 40       	r4 = 0x4 - r4
  111494:    12 07             	r2 = b[r1++=0x1] (u)
  111496:    82 07             	b[r0++=0x1] = r2
  111498:    12 4b             	if (r2 == 0) goto 0x56 <strcpy+0x6A : 1114f0 >
  11149a:    04 ea fb ff       	if (--r4 != 0) goto -0xa <strcpy+0xE : 111494 >
  11149e:    90 e1 10 20       	r2 = r1 | r0
  1114a2:    c6 ff ff fe fe fe 	r6 = 0xfefefeff <__stub_LZ4_decompress_safe_continue+0xFEED7F02 : fefefefe >
  1114a8:    61 ff 03 20 0a 00 	if ((r2 & 0x3) != 0) goto 0x14 <strcpy+0x3C : 1114c2 >
  1114ae:    12 60             	r2 = [r1+0x0] 
  1114b0:    a3 1d             	r3 = r2 + r6
  1114b2:    90 e1 33 32       	r3 = r3 & ~r2
  1114b6:    61 ff 80 33 17 00 	if ((r3 & 0x80808080) != 0) goto 0x2e <strcpy+0x64 : 1114ea >
  1114bc:    19 84             	r1 = r1 + 0x4
  1114be:    82 05             	[r0++=0x4] = r2
  1114c0:    f7 96             	goto -0x14 <strcpy+0x28 : 1114ae >
  1114c2:    14 16             	r4 = r1
  1114c4:    42 07             	r2 = b[r4++=0x1] (u)
  1114c6:    45 07             	r5 = b[r4++=0x1] (u)
  1114c8:    a2 e1 20 54       	r2 <= insert(r5, p:0x8, l:0x8)
  1114cc:    45 07             	r5 = b[r4++=0x1] (u)
  1114ce:    a2 e1 20 58       	r2 <= insert(r5, p:0x10, l:0x8)
  1114d2:    45 07             	r5 = b[r4++=0x1] (u)
  1114d4:    a2 e1 20 5c       	r2 <= insert(r5, p:0x18, l:0x8)
  1114d8:    a5 1d             	r5 = r2 + r6
  1114da:    90 e1 53 52       	r5 = r5 & ~r2
  1114de:    61 ff 80 53 03 00 	if ((r5 & 0x80808080) != 0) goto 0x6 <strcpy+0x64 : 1114ea >
  1114e4:    82 05             	[r0++=0x4] = r2
  1114e6:    41 16             	r1 = r4
  1114e8:    f7 8c             	goto -0x28 <strcpy+0x3C : 1114c2 >
  1114ea:    12 07             	r2 = b[r1++=0x1] (u)
  1114ec:    82 07             	b[r0++=0x1] = r2
  1114ee:    f2 5d             	if (r2 != 0) goto -0x6 <strcpy+0x64 : 1114ea >
  1114f0:    70 16             	r0 = r7
  1114f2:    57 04             	{pc, r7-r4} = [sp++]


strlen:
  1114f4:    01 16             	r1 = r0
  1114f6:    12 07             	r2 = b[r1++=0x1] (u)
  1114f8:    f2 5e             	if (r2 != 0) goto -0x4 <strlen+0x2 : 1114f6 >
  1114fa:    f9 3f             	r1 += -0x1
  1114fc:    10 1e             	r0 = r1 - r0
  1114fe:    80 00             	rts


nvram_boot_tag:
  111500:	 bf ec cb d9 c6 f4 b6 af         


nvram_uart_tag:
  111508:	 75 61 72 74 d9 c4 05 a8         


nvram_usb_tag:
  111510:	 75 73 62 ed 63 81 67 ef         


chip_reset:
  111518:    68 20             	r0 = 0xa0			  ## main.c:73:0
  11151a:    41 30             	r1 = 0x10			  ## main.c:74:5
  11151c:    80 ea 02 24       	call 0x4804 <p33_tx_1byte : 115d24 >			  ## main.c:74:5
  111520:    f7 9f             	goto -0x2 <chip_reset+0x8 : 111520 >			  ## main.c:77:5


nvram_boot_state:
  111522:    75 04             	[--sp] = {rets, r5, r4}			  ## boot_nvram.c:121:0
  111524:    c5 ff 80 08 01 00 	r5 = 0x10880 <nvram_list : 10880 >			  ## boot_nvram.c:121:0
  11152a:    5c 84             	r4 = r5 + 0x4			  ## boot_nvram.c:122:9
  11152c:    c1 ff 10 15 11 00 	r1 = 0x111510 <nvram_usb_tag : 111510 >			  ## boot_nvram.c:122:9
  111532:    42 28             	r2 = 0x8			  ## boot_nvram.c:122:9
  111534:    40 16             	r0 = r4			  ## boot_nvram.c:122:9
  111536:    bf ea 26 ff       	call -0x1b4 <memcmp : 111386 >			  ## boot_nvram.c:122:9
  11153a:    00 4c             	if (r0 == 0) goto 0x18 <nvram_boot_state+0x32 : 111554 >			  ## boot_nvram.c:122:9
  11153c:    c1 ff 08 15 11 00 	r1 = 0x111508 <nvram_uart_tag : 111508 >			  ## boot_nvram.c:125:16
  111542:    42 28             	r2 = 0x8			  ## boot_nvram.c:125:16
  111544:    40 16             	r0 = r4			  ## boot_nvram.c:125:16
  111546:    bf ea 1e ff       	call -0x1c4 <memcmp : 111386 >			  ## boot_nvram.c:125:16
  11154a:    01 16             	r1 = r0			  ## boot_nvram.c:125:16
  11154c:    40 20             	r0 = 0x0			  ## boot_nvram.c:125:16
  11154e:    81 47             	if (r1 != 0) goto 0xe <nvram_boot_state+0x3C : 11155e >			  ## boot_nvram.c:125:16
  111550:    40 23             	r0 = 0x3
  111552:    04 81             	goto 0x2 <nvram_boot_state+0x34 : 111556 >
  111554:    40 22             	r0 = 0x2
  111556:    42 20             	r2 = 0x0			  ## boot_nvram.c:118:5
  111558:    43 20             	r3 = 0x0			  ## boot_nvram.c:118:5
  11155a:    50 ec 55 20       	d[r5+0x4] = r3_r2			  ## boot_nvram.c:118:5
  11155e:    55 04             	{pc, r5, r4} = [sp++]			  ## boot_nvram.c:130:1


nvram_get_addr:
  111560:    c0 ff 80 08 01 00 	r0 = 0x10880 <nvram_list : 10880 >			  ## boot_nvram.c:146:0
  111566:    80 00             	rts			  ## boot_nvram.c:147:5


nvram_jumpaddr_set:
  111568:    c1 ff 80 08 01 00 	r1 = 0x10880 <nvram_list : 10880 >			  ## boot_nvram.c:80:0
  11156e:    90 60             	[r1+0x0] = r0			  ## boot_nvram.c:81:26
  111570:    80 00             	rts			  ## boot_nvram.c:84:1


nvram_set_boot_state:
  111572:    00 f8 09 04       	if (r0 == 0x2) goto 0x12 <nvram_set_boot_state+0x16 : 111588 >			  ## boot_nvram.c:132:0
  111576:    80 f8 12 06       	if (r0 != 0x3) goto 0x24 <nvram_set_boot_state+0x2C : 11159e >			  ## boot_nvram.c:132:0
  11157a:    c0 ff 75 61 72 74 	r0 = 0x74726175 <__stub_LZ4_decompress_safe_continue+0x7460E178 : 74726174 >			  ## boot_nvram.c:132:0
  111580:    c1 ff d9 c4 05 a8 	r1 = 0xa805c4d9 <__stub_LZ4_decompress_safe_continue+0xA7F444DC : a805c4d8 >			  ## boot_nvram.c:132:0
  111586:    04 86             	goto 0xc <nvram_set_boot_state+0x22 : 111594 >			  ## boot_nvram.c:132:0
  111588:    c0 ff 75 73 62 ed 	r0 = 0xed627375 <__stub_LZ4_decompress_safe_continue+0xED50F378 : ed627374 >			  ## boot_nvram.c:132:0
  11158e:    c1 ff 63 81 67 ef 	r1 = 0xef678163 <__stub_LZ4_decompress_safe_continue+0xEF560166 : ef678162 >			  ## boot_nvram.c:132:0
  111594:    c2 ff 80 08 01 00 	r2 = 0x10880 <nvram_list : 10880 >			  ## boot_nvram.c:132:0
  11159a:    50 ec 25 00       	d[r2+0x4] = r1_r0			  ## boot_nvram.c:132:0
  11159e:    80 00             	rts			  ## boot_nvram.c:144:1


nvram_signature_set:
  1115a0:    c0 ff 80 08 01 00 	r0 = 0x10880 <nvram_list : 10880 >			  ## boot_nvram.c:97:0
  1115a6:    c2 ff bf ec cb d9 	r2 = 0xd9cbecbf <__stub_LZ4_decompress_safe_continue+0xD9BA6CC2 : d9cbecbe >			  ## boot_nvram.c:98:5
  1115ac:    c3 ff c6 f4 b6 af 	r3 = 0xafb6f4c6 <__stub_LZ4_decompress_safe_continue+0xAFA574CA : afb6f4c6 >			  ## boot_nvram.c:98:5
  1115b2:    50 ec 05 20       	d[r0+0x4] = r3_r2			  ## boot_nvram.c:98:5
  1115b6:    80 00             	rts			  ## boot_nvram.c:99:1


btcvsd_need_buf:
  1115b8:    68 24             	r0 = 0xa4			  ## cvsd_codec.c:29:0
  1115ba:    80 00             	rts			  ## cvsd_codec.c:30:5


btcvsd_init:
  1115bc:    75 04             	[--sp] = {rets, r5, r4}			  ## cvsd_codec.c:34:0
  1115be:    04 16             	r4 = r0			  ## cvsd_codec.c:34:0
  1115c0:    41 20             	r1 = 0x0			  ## cvsd_codec.c:36:5
  1115c2:    6a 24             	r2 = 0xa4			  ## cvsd_codec.c:36:5
  1115c4:    45 20             	r5 = 0x0			  ## cvsd_codec.c:36:5
  1115c6:    bf ea c8 fe       	call -0x270 <memset : 11135a >			  ## cvsd_codec.c:36:5
  1115ca:    40 e0 00 28       	r0 = 0x2800			  ## cvsd_codec.c:38:35
  1115ce:    01 e1 40 40       	r1 = r4 + 0x40			  ## cvsd_codec.c:38:35
  1115d2:    90 62             	[r1+0x8] = r0			  ## cvsd_codec.c:38:35
  1115d4:    42 21             	r2 = 0x1			  ## cvsd_codec.c:39:33
  1115d6:    9a 41             	b[r1+0x1] = r2			  ## cvsd_codec.c:39:33
  1115d8:    95 61             	[r1+0x4] = r5			  ## cvsd_codec.c:40:34
  1115da:    90 65             	[r1+0x14] = r0			  ## cvsd_codec.c:42:35
  1115dc:    9a 4d             	b[r1+0xd] = r2			  ## cvsd_codec.c:43:33
  1115de:    40 20             	r0 = 0x0			  ## cvsd_codec.c:46:5
  1115e0:    95 64             	[r1+0x10] = r5			  ## cvsd_codec.c:44:34
  1115e2:    55 04             	{pc, r5, r4} = [sp++]			  ## cvsd_codec.c:46:5


CVSD_StudentEncode:
  1115e4:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:235:0
  1115e6:    42 20             	r2 = 0x0			  ## cvsd_codec.c:235:0
  1115e8:    48 f0 ff 03       	r8 = 0x3ff  #			  ## cvsd_codec.c:235:0
  1115ec:    9a 40             		 b[r1+0x0] = r2			  ## cvsd_codec.c:240:26
  1115ee:    43 21             	r3 = 0x1
  1115f0:    24 8a             	goto 0x94 <CVSD_StudentEncode+0xA2 : 111686 >
  1115f2:    1c 41             	r4 = b[r1+0x1] (u)			  ## cvsd_codec.c:242:43
  1115f4:    44 a1             	r4 = r4 << 0x1			  ## cvsd_codec.c:242:50
  1115f6:    66 e1 0e 40       	r6 = r4 & 0xE			  ## cvsd_codec.c:242:56
  1115fa:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:242:28
  1115fc:    d8 ec 0a 42       	r4 = [r0+r2<<2]			  ## cvsd_codec.c:243:14
  111600:    15 61             	r5 = [r1+0x4] 			  ## cvsd_codec.c:243:53
  111602:    44 aa             	r4 = r4 << 0xa			  ## cvsd_codec.c:243:24
  111604:    05 ed 10 40       	ifs (r4 >= r5) goto 0x20 <CVSD_StudentEncode+0x44 : 111628 >			  ## cvsd_codec.c:243:24
  111608:    36 20             	r6 |= 0x1			  ## cvsd_codec.c:259:53
  11160a:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:259:32
  11160c:    1c 40             	r4 = b[r1+0x0] (u)			  ## cvsd_codec.c:260:36
  11160e:    34 19             	r4 |= r3			  ## cvsd_codec.c:260:57
  111610:    9c 40             	b[r1+0x0] = r4			  ## cvsd_codec.c:260:34
  111612:    14 62             	r4 = [r1+0x8] 			  ## cvsd_codec.c:260:34
  111614:    86 f8 16 1e       	if (r6 != 0xf) goto 0x2c <CVSD_StudentEncode+0x60 : 111644 >			  ## cvsd_codec.c:261:17
  111618:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:262:61
  11161c:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:262:38
  11161e:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:262:38
  111622:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:263:21
  111626:    04 99             	goto 0x32 <CVSD_StudentEncode+0x76 : 11165a >			  ## cvsd_codec.c:263:21
  111628:    14 62             	r4 = [r1+0x8] 
  11162a:    06 5a             	if (r6 == 0) goto 0x34 <CVSD_StudentEncode+0x7C : 111660 >
  11162c:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:251:23
  111630:    47 20             	r7 = 0x0			  ## cvsd_codec.c:251:23
  111632:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:251:23
  111636:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:252:46
  11163a:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  11163e:    46 e0 00 28       		r6 = 0x2800
                               	}			  ## cvsd_codec.c:253:21
  111642:    04 95             	goto 0x2a <CVSD_StudentEncode+0x8A : 11166e >			  ## cvsd_codec.c:253:21
  111644:    36 e1 01 8e       	r6 = r8 + -0x1ff			  ## cvsd_codec.c:268:23
  111648:    47 20             	r7 = 0x0			  ## cvsd_codec.c:268:23
  11164a:    fc e1 40 68       	r7_r6 += r4 * r8 (u)			  ## cvsd_codec.c:268:23
  11164e:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:269:46
  111652:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  111656:    46 e0 00 28       		r6 = 0x2800
                               	}			  ## cvsd_codec.c:270:21
  11165a:    d5 df             	r5 = r5 - r6  #			  ## cvsd_codec.c:274:55
  11165c:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:274:55
  11165e:    04 89             	goto 0x12 <CVSD_StudentEncode+0x8E : 111672 >			  ## cvsd_codec.c:274:55
  111660:    e6 e0 20 4d       	r6 = r4 + 0x2800			  ## cvsd_codec.c:245:61
  111664:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:245:38
  111666:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:245:38
  11166a:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:246:21
  11166e:    65 d8             	r5 += r6  #			  ## cvsd_codec.c:257:55
  111670:    96 62             		 [r1+0x8] = r6			  ## cvsd_codec.c:257:55
  111672:    95 61             	[r1+0x4] = r5
  111674:    5d a6             	r5 = r5 <<< 0x6			  ## cvsd_codec.c:285:13
  111676:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:285:13
  111678:    e4 e1 1f 50       	r4 = r5 * 0x1F			  ## cvsd_codec.c:297:52
  11167c:    c4 30             	r4 += 0x10			  ## cvsd_codec.c:297:57
  11167e:    cc a5             	r4 = r4 >>> 0x5			  ## cvsd_codec.c:297:63
  111680:    94 61             	[r1+0x4] = r4			  ## cvsd_codec.c:297:29
  111682:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:241:35
  111684:    33 a1             	r3 = r3 << 0x1			  ## cvsd_codec.c:298:19
  111686:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentEncode+0xE : 1115f2 >
  11168a:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:302:1


cvsd_encode:
  11168c:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:373:0
  11168e:    04 e1 40 00       	r4 = r0 + 0x40			  ## cvsd_codec.c:377:23
  111692:    3c d6             	r12 = r3  #			  ## cvsd_codec.c:377:23
  111694:    4e 61             		 r6 = h[r4+0x2] (u)			  ## cvsd_codec.c:377:30
  111696:    2a 16             	r10 = r2
  111698:    1b 16             	r11 = r1
  11169a:    86 f8 9c 02       	if (r6 != 0x1) goto 0x138 <cvsd_encode+0x14A : 1117d6 >
  11169e:    08 e1 18 00       	r8 = r0 + 0x18			  ## cvsd_codec.c:374:9
  1116a2:    09 e1 08 00       	r9 = r0 + 0x8			  ## cvsd_codec.c:374:9
  1116a6:    c6 14             	r14 = 0			  ## cvsd_codec.c:374:9
  1116a8:    c5 14             	r13 = 0			  ## cvsd_codec.c:374:9
  1116aa:    44 92             	goto 0x124 <cvsd_encode+0x144 : 1117d0 >			  ## cvsd_codec.c:374:9
  1116ac:    d8 ed ba 2d       	r2 = h[r11+r13<<1] (s)			  ## cvsd_codec.c:118:30
  1116b0:    41 20             	r1 = 0x0			  ## cvsd_codec.c:118:30
  1116b2:    20 eb 06 00       	[r0+] = {r2, r1}			  ## cvsd_codec.c:117:28
  1116b6:    14 83             	goto 0x46 <cvsd_encode+0x72 : 1116fe >
  1116b8:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  1116bc:    43 67             	r3 = [r4+0x1c] 			  ## cvsd_codec.c:55:15
  1116be:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  1116c0:    e5 e1 54 20       	r5 = r2 * 0x54			  ## cvsd_codec.c:56:27
  1116c4:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
  1116c6:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
  1116c8:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
  1116ca:    c3 67             	[r4+0x1c] = r3			  ## cvsd_codec.c:56:19
  1116cc:    45 69             	r5 = [r4+0x24] 			  ## cvsd_codec.c:59:27
  1116ce:    47 68             	r7 = [r4+0x20] 			  ## cvsd_codec.c:59:15
  1116d0:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:59:25
  1116d2:    e6 e1 4d 50       	r6 = r5 * 0x4D			  ## cvsd_codec.c:60:27
  1116d6:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
  1116d8:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
  1116da:    ee 1f             	r6 = r6 - r7			  ## cvsd_codec.c:60:49
  1116dc:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
  1116de:    c6 68             		 [r4+0x20] = r6			  ## cvsd_codec.c:60:19
  1116e0:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  1116e4:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
  1116e6:    e7 e1 18 60       	r7 = r6 * 0x18			  ## cvsd_codec.c:64:27
  1116ea:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  1116ec:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  1116ee:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
  1116f0:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
  1116f2:    c5 69             		 [r4+0x24] = r5			  ## cvsd_codec.c:64:19
  1116f4:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
  1116f6:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  1116f8:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  1116fc:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  1116fe:    81 f8 db 05       	if (r1 != 0x2) goto -0x4a <cvsd_encode+0x2C : 1116b8 >			  ## cvsd_codec.c:54:5
  111702:    41 21             	r1 = 0x1
  111704:    92 16             	r2 = r9
  111706:    04 86             	goto 0xc <cvsd_encode+0x88 : 111714 >
  111708:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:121:42
  11170c:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:121:40
  11170e:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:122:36
  111712:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:120:26
  111714:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0x7C : 111708 >			  ## cvsd_codec.c:120:5
  111718:    41 20             	r1 = 0x0
  11171a:    14 82             	goto 0x44 <cvsd_encode+0xD4 : 111760 >
  11171c:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  111720:    43 6a             	r3 = [r4+0x28] 			  ## cvsd_codec.c:55:15
  111722:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  111724:    e5 e1 60 20       	r5 = r2 * 0x60			  ## cvsd_codec.c:56:27
  111728:    cd 20             	r5 += 0x20			  ## cvsd_codec.c:56:37
  11172a:    dd a6             	r5 = r5 >>> 0x6			  ## cvsd_codec.c:56:43
  11172c:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:56:49
  11172e:    c3 6a             	[r4+0x28] = r3			  ## cvsd_codec.c:56:19
  111730:    45 6c             	r5 = [r4+0x30] 			  ## cvsd_codec.c:59:27
  111732:    46 6b             	r6 = [r4+0x2c] 			  ## cvsd_codec.c:59:15
  111734:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:59:25
  111736:    e7 e1 60 50       	r7 = r5 * 0x60			  ## cvsd_codec.c:60:27
  11173a:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:60:37
  11173c:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:60:43
  11173e:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:60:49
  111740:    6d df             	r5 = r6 - r5  #			  ## cvsd_codec.c:61:26
  111742:    c6 6b             		 [r4+0x2c] = r6			  ## cvsd_codec.c:60:19
  111744:    d8 ec 0a 71       	r7 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  111748:    de 1f             	r6 = r5 - r7			  ## cvsd_codec.c:63:20
  11174a:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
  11174c:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  11174e:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  111750:    7d 1f             	r5 = r7 - r5			  ## cvsd_codec.c:64:49
  111752:    b2 de             	r2 = r3 - r2  #			  ## cvsd_codec.c:65:26
  111754:    c5 6c             		 [r4+0x30] = r5			  ## cvsd_codec.c:64:19
  111756:    a2 1f             	r2 = r2 - r6			  ## cvsd_codec.c:57:26
  111758:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  11175a:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  11175e:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  111760:    81 f8 dc 09       	if (r1 != 0x4) goto -0x48 <cvsd_encode+0x90 : 11171c >			  ## cvsd_codec.c:54:5
  111764:    41 23             	r1 = 0x3
  111766:    82 16             	r2 = r8
  111768:    04 86             	goto 0xc <cvsd_encode+0xEA : 111776 >
  11176a:    d8 ec 0a 31       	r3 = [r0+r1<<2]			  ## cvsd_codec.c:126:42
  11176e:    a3 61             	[r2+0x4] = r3			  ## cvsd_codec.c:126:40
  111770:    df ec 29 ef       	[r2++=-0x8] = r14			  ## cvsd_codec.c:127:36
  111774:    f9 3f             	r1 += -0x1			  ## cvsd_codec.c:125:26
  111776:    71 fe f8 ff       	ifs (r1 > -0x1) goto -0x10 <cvsd_encode+0xDE : 11176a >			  ## cvsd_codec.c:125:5
  11177a:    41 20             	r1 = 0x0
  11177c:    04 99             	goto 0x32 <cvsd_encode+0x124 : 1117b0 >
  11177e:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  111782:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:56:49
  111786:    43 6d             		 r3 = [r4+0x34] 			  ## cvsd_codec.c:55:15
  111788:    c2 6d             	[r4+0x34] = r2			  ## cvsd_codec.c:56:19
  11178a:    42 6f             	r2 = [r4+0x3c] 			  ## cvsd_codec.c:59:27
  11178c:    a2 f0 00 20       	r2 = 0x0 - r2  #			  ## cvsd_codec.c:60:49
  111790:    45 6e             		 r5 = [r4+0x38] 			  ## cvsd_codec.c:59:15
  111792:    c2 6e             	[r4+0x38] = r2			  ## cvsd_codec.c:60:19
  111794:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  111798:    52 18             	r2 += r5			  ## cvsd_codec.c:63:20
  11179a:    26 a5             	r6 = r2 << 0x5			  ## cvsd_codec.c:64:37
  11179c:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
  1117a0:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  1117a2:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
  1117a4:    aa de             	r2 = r2 - r3  #			  ## cvsd_codec.c:57:26
  1117a6:    c5 6f             		 [r4+0x3c] = r5			  ## cvsd_codec.c:64:19
  1117a8:    52 18             	r2 += r5			  ## cvsd_codec.c:67:27
  1117aa:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  1117ae:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  1117b0:    81 f8 e5 11       	if (r1 != 0x8) goto -0x36 <cvsd_encode+0xF2 : 11177e >
  1117b4:    01 16             	r1 = r0			  ## cvsd_codec.c:142:9
  1117b6:    30 87             	rep 0x8 0x8 {			  ## cvsd_codec.c:142:9
  1117b8:    12 60             		r2 = [r1+0x0] 			  ## cvsd_codec.c:142:9
  1117ba:    78 e0 01 22       		r2 = sat16(r2) (s)			  ## cvsd_codec.c:142:9
  1117be:    92 05             		[r1++=0x4] = r2
                               	}			  ## cvsd_codec.c:142:9
  1117c0:    41 16             	r1 = r4			  ## cvsd_codec.c:380:13
  1117c2:    bf ea 0f ff       	call -0x1e2 <CVSD_StudentEncode : 1115e4 >			  ## cvsd_codec.c:380:13
  1117c6:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:381:47
  1117c8:    d8 ee a1 1d       	b[r10+r13] = r1			  ## cvsd_codec.c:381:24
  1117cc:    0d e1 01 d0       	r13 = r13 + 0x1			  ## cvsd_codec.c:378:31
  1117d0:    8c ed 6c d1       	ifs (r13 < r12) goto -0x128 <cvsd_encode+0x20 : 1116ac >
  1117d4:    04 9c             	goto 0x38 <cvsd_encode+0x182 : 11180e >
  1117d6:    46 20             	r6 = 0x0
  1117d8:    04 98             	goto 0x30 <cvsd_encode+0x17E : 11180a >
  1117da:    d8 ed ba 16       	r1 = h[r11+r6<<1] (s)			  ## cvsd_codec.c:89:14
  1117de:    54 ed 08 25       	r2 = h[r0+0x58] (s)			  ## cvsd_codec.c:89:23
  1117e2:    97 1e             	r7 = r1 - r2			  ## cvsd_codec.c:89:21
  1117e4:    7b 87             	r3 = r7 + 0x7			  ## cvsd_codec.c:91:15
  1117e6:    37 ed 00 00       	ifs (r7 >= 0x0) {
  1117ea:    73 16             		r3 = r7
                               	}			  ## cvsd_codec.c:90:9
  1117ec:    bb a3             	r3 = r3 >>> 0x3			  ## cvsd_codec.c:93:11
  1117ee:    05 16             	r5 = r0			  ## cvsd_codec.c:94:5
  1117f0:    af 1c             	r7 = r2 + r3			  ## cvsd_codec.c:94:5
  1117f2:    10 86             	rep 0x4 0x7 {			  ## cvsd_codec.c:94:5
  1117f4:    ff dc             		r7 = r7 + r3  #			  ## cvsd_codec.c:94:5
  1117f6:    d7 05             			 [r5++=0x4] = r7
                               	}			  ## cvsd_codec.c:94:5
  1117f8:    d7 05             	[r5++=0x4] = r7			  ## cvsd_codec.c:94:5
  1117fa:    41 d6             	r1 = r4  #			  ## cvsd_codec.c:386:13
  1117fc:    c9 6c             		 h[r4+0x18] = r1			  ## cvsd_codec.c:107:28
  1117fe:    bf ea f1 fe       	call -0x21e <CVSD_StudentEncode : 1115e4 >			  ## cvsd_codec.c:386:13
  111802:    49 40             	r1 = b[r4+0x0] (u)			  ## cvsd_codec.c:387:47
  111804:    d8 ee a1 16       	b[r10+r6] = r1			  ## cvsd_codec.c:387:24
  111808:    c6 21             	r6 += 0x1			  ## cvsd_codec.c:384:31
  11180a:    8c ed e6 61       	ifs (r6 < r12) goto -0x34 <cvsd_encode+0x14E : 1117da >
  11180e:    40 20             	r0 = 0x0			  ## cvsd_codec.c:391:5
  111810:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:391:5


CVSD_StudentDecode:
  111812:    78 04             	[--sp] = {rets, r8-r4}			  ## cvsd_codec.c:305:0
  111814:    42 20             	r2 = 0x0			  ## cvsd_codec.c:305:0
  111816:    48 e0 ff 03       	r8 = 0x3ff			  ## cvsd_codec.c:305:0
  11181a:    04 e1 00 22       	r4 = r2 + 0x200			  ## cvsd_codec.c:305:0
  11181e:    45 20             	r5 = 0x0			  ## cvsd_codec.c:305:0
  111820:    24 8a             	goto 0x94 <CVSD_StudentDecode+0xA4 : 1118b6 >			  ## cvsd_codec.c:305:0
  111822:    1b 40             	r3 = b[r1+0x0] (u)			  ## cvsd_codec.c:312:16
  111824:    a3 da             	r3 >>= r2  #			  ## cvsd_codec.c:312:37
  111826:    1e 41             		 r6 = b[r1+0x1] (u)			  ## cvsd_codec.c:313:32
  111828:    67 e1 01 30       	r7 = r3 & 0x1			  ## cvsd_codec.c:312:15
  11182c:    66 a1             	r6 = r6 << 0x1			  ## cvsd_codec.c:313:51
  11182e:    66 e1 0e 60       	r6 = r6 & 0xE			  ## cvsd_codec.c:313:57
  111832:    76 19             	r6 |= r7			  ## cvsd_codec.c:313:65
  111834:    9e 41             	b[r1+0x1] = r6			  ## cvsd_codec.c:313:28
  111836:    53 e8 0d 02       	if ((r3 & 0x1) != 0) goto 0x1a <CVSD_StudentDecode+0x42 : 111854 >			  ## cvsd_codec.c:314:13
  11183a:    13 62             	r3 = [r1+0x8] 
  11183c:    16 44             	if (r6 == 0) goto 0x48 <CVSD_StudentDecode+0x74 : 111886 >
  11183e:    46 16             	r6 = r4			  ## cvsd_codec.c:322:23
  111840:    47 20             	r7 = 0x0			  ## cvsd_codec.c:322:23
  111842:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:322:23
  111846:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:323:46
  11184a:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  11184e:    46 e0 00 28       		r6 = 0x2800
                               	}			  ## cvsd_codec.c:324:21
  111852:    14 80             	goto 0x40 <CVSD_StudentDecode+0x82 : 111894 >			  ## cvsd_codec.c:324:21
  111854:    13 62             	r3 = [r1+0x8] 
  111856:    86 f8 08 1e       	if (r6 != 0xf) goto 0x10 <CVSD_StudentDecode+0x58 : 11186a >			  ## cvsd_codec.c:331:17
  11185a:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:332:61
  11185e:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:332:38
  111860:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:332:38
  111864:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:333:21
  111868:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x6C : 11187e >			  ## cvsd_codec.c:333:21
  11186a:    46 16             	r6 = r4			  ## cvsd_codec.c:338:23
  11186c:    47 20             	r7 = 0x0			  ## cvsd_codec.c:338:23
  11186e:    fc e1 30 68       	r7_r6 += r3 * r8 (u)			  ## cvsd_codec.c:338:23
  111872:    d0 e1 0a 68       	r7_r6 >>= 0xa			  ## cvsd_codec.c:339:46
  111876:    a6 ec 20 0d       	if (r6 <= 0x2800) {
  11187a:    46 e0 00 28       		r6 = 0x2800
                               	}			  ## cvsd_codec.c:340:21
  11187e:    96 62             	[r1+0x8] = r6
  111880:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:344:48
  111882:    b6 1f             	r6 = r3 - r6			  ## cvsd_codec.c:344:56
  111884:    04 8a             	goto 0x14 <CVSD_StudentDecode+0x88 : 11189a >			  ## cvsd_codec.c:344:56
  111886:    e6 e0 20 3d       	r6 = r3 + 0x2800			  ## cvsd_codec.c:316:61
  11188a:    96 62             	[r1+0x8] = r6			  ## cvsd_codec.c:316:38
  11188c:    26 e9 a0 09       	if (r6 >= 0x140000) {			  ## cvsd_codec.c:316:38
  111890:    60 e0 a0 69       		r6 = 0x140000
                               	}			  ## cvsd_codec.c:317:21
  111894:    96 62             	[r1+0x8] = r6
  111896:    13 61             	r3 = [r1+0x4] 			  ## cvsd_codec.c:329:47
  111898:    36 18             	r6 += r3			  ## cvsd_codec.c:329:55
  11189a:    96 61             	[r1+0x4] = r6
  11189c:    6e a6             	r6 = r6 <<< 0x6			  ## cvsd_codec.c:354:13
  11189e:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:354:13
  1118a0:    e3 e1 1f 60       	r3 = r6 * 0x1F			  ## cvsd_codec.c:366:52
  1118a4:    c3 30             	r3 += 0x10			  ## cvsd_codec.c:366:57
  1118a6:    bb a5             	r3 = r3 >>> 0x5			  ## cvsd_codec.c:366:63
  1118a8:    03 f1 00 32       	r3 = r3 + 0x200  #			  ## cvsd_codec.c:367:42
  1118ac:    93 61             		 [r1+0x4] = r3			  ## cvsd_codec.c:366:29
  1118ae:    bb aa             	r3 = r3 >>> 0xa			  ## cvsd_codec.c:367:68
  1118b0:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:367:19
  1118b4:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:311:35
  1118b6:    82 f8 b4 11       	if (r2 != 0x8) goto -0x98 <CVSD_StudentDecode+0x10 : 111822 >
  1118ba:    58 04             	{pc, r8-r4} = [sp++]			  ## cvsd_codec.c:370:1


cvsd_decode:
  1118bc:    7e 04             	[--sp] = {rets, r14-r4}			  ## cvsd_codec.c:395:0
  1118be:    0d 16             	r13 = r0			  ## cvsd_codec.c:395:0
  1118c0:    0e e1 4c 00       	r14 = r0 + 0x4c			  ## cvsd_codec.c:399:23
  1118c4:    50 ed e2 50       	r5 = h[r14+0x2] (u)			  ## cvsd_codec.c:399:30
  1118c8:    3a 16             	r10 = r3
  1118ca:    28 16             	r8 = r2
  1118cc:    19 16             	r9 = r1
  1118ce:    c8 20             	r0 += 0x20
  1118d0:    85 f8 a8 02       	if (r5 != 0x1) goto 0x150 <cvsd_decode+0x168 : 111a24 >
  1118d4:    c3 14             	r11 = 0
  1118d6:    4c e0 02 00       	r12 = 0x2
  1118da:    54 81             	goto 0x142 <cvsd_decode+0x162 : 111a1e >
  1118dc:    d8 ee 90 1b       	r1 = b[r9+r11] (u)			  ## cvsd_codec.c:401:45
  1118e0:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:401:43
  1118e4:    e1 16             	r1 = r14			  ## cvsd_codec.c:402:13
  1118e6:    41 95             	call -0xd6 <CVSD_StudentDecode : 111812 >			  ## cvsd_codec.c:402:13
  1118e8:    42 20             	r2 = 0x0
  1118ea:    04 99             	goto 0x32 <cvsd_decode+0x62 : 11191e >
  1118ec:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
  1118f0:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:56:49
  1118f4:    17 63             		 r7 = [r1+0xc] 			  ## cvsd_codec.c:55:15
  1118f6:    93 63             	[r1+0xc] = r3			  ## cvsd_codec.c:56:19
  1118f8:    13 65             	r3 = [r1+0x14] 			  ## cvsd_codec.c:59:27
  1118fa:    a3 f0 00 30       	r3 = 0x0 - r3  #			  ## cvsd_codec.c:60:49
  1118fe:    15 64             		 r5 = [r1+0x10] 			  ## cvsd_codec.c:59:15
  111900:    93 64             	[r1+0x10] = r3			  ## cvsd_codec.c:60:19
  111902:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
  111906:    53 18             	r3 += r5			  ## cvsd_codec.c:63:20
  111908:    36 a5             	r6 = r3 << 0x5			  ## cvsd_codec.c:64:37
  11190a:    a6 e0 20 60       	r6 = 0x20 - r6			  ## cvsd_codec.c:64:37
  11190e:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  111910:    65 18             	r5 += r6			  ## cvsd_codec.c:64:49
  111912:    b9 df             	r1 = r3 - r7  #			  ## cvsd_codec.c:57:26
  111914:    95 65             		 [r1+0x14] = r5			  ## cvsd_codec.c:64:19
  111916:    51 18             	r1 += r5			  ## cvsd_codec.c:67:27
  111918:    d8 ec 0b 12       	[r0+r2<<2] = r1			  ## cvsd_codec.c:67:20
  11191c:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
  11191e:    01 e1 8c d0       	r1 = r13 + 0x8c
  111922:    82 f8 e3 11       	if (r2 != 0x8) goto -0x3a <cvsd_decode+0x30 : 1118ec >			  ## cvsd_codec.c:54:5
  111926:    82 14             	r3_r2 = 0
  111928:    04 88             	goto 0x10 <cvsd_decode+0x7E : 11193a >
  11192a:    d8 ec 02 52       	r5 = [r0+r2]			  ## cvsd_codec.c:196:35
  11192e:    f4 e1 51 5c       	r5 = r5 / r12 (s)			  ## cvsd_codec.c:196:63
  111932:    d8 ec 0b 53       	[r0+r3<<2] = r5			  ## cvsd_codec.c:196:33
  111936:    c2 28             	r2 += 0x8			  ## cvsd_codec.c:195:5
  111938:    c3 21             	r3 += 0x1			  ## cvsd_codec.c:195:25
  11193a:    83 f8 f6 09       	if (r3 != 0x4) goto -0x14 <cvsd_decode+0x6E : 11192a >			  ## cvsd_codec.c:195:5
  11193e:    42 20             	r2 = 0x0
  111940:    14 82             	goto 0x44 <cvsd_decode+0xCA : 111986 >
  111942:    d8 ec 0a 32       	r3 = [r0+r2<<2]			  ## cvsd_codec.c:55:27
  111946:    15 60             	r5 = [r1+0x0] 			  ## cvsd_codec.c:55:15
  111948:    db 1e             	r3 = r5 - r3			  ## cvsd_codec.c:55:25
  11194a:    e6 e1 60 30       	r6 = r3 * 0x60			  ## cvsd_codec.c:56:27
  11194e:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:56:37
  111950:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:56:43
  111952:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:56:49
  111954:    95 60             	[r1+0x0] = r5			  ## cvsd_codec.c:56:19
  111956:    16 62             	r6 = [r1+0x8] 			  ## cvsd_codec.c:59:27
  111958:    17 61             	r7 = [r1+0x4] 			  ## cvsd_codec.c:59:15
  11195a:    f6 1f             	r6 = r7 - r6			  ## cvsd_codec.c:59:25
  11195c:    e4 e1 60 60       	r4 = r6 * 0x60			  ## cvsd_codec.c:60:27
  111960:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:60:37
  111962:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:60:43
  111964:    cc 1f             	r4 = r4 - r7			  ## cvsd_codec.c:60:49
  111966:    c4 df             	r4 = r4 - r6  #			  ## cvsd_codec.c:61:26
  111968:    94 61             		 [r1+0x4] = r4			  ## cvsd_codec.c:60:19
  11196a:    d8 ec 0a 72       	r7 = [r0+r2<<2]			  ## cvsd_codec.c:63:22
  11196e:    ce 1f             	r6 = r4 - r7			  ## cvsd_codec.c:63:20
  111970:    67 a5             	r7 = r6 << 0x5			  ## cvsd_codec.c:64:27
  111972:    cf 20             	r7 += 0x20			  ## cvsd_codec.c:64:37
  111974:    ff a6             	r7 = r7 >>> 0x6			  ## cvsd_codec.c:64:43
  111976:    74 1f             	r4 = r7 - r4			  ## cvsd_codec.c:64:49
  111978:    db de             	r3 = r5 - r3  #			  ## cvsd_codec.c:65:26
  11197a:    94 62             		 [r1+0x8] = r4			  ## cvsd_codec.c:64:19
  11197c:    b3 1f             	r3 = r3 - r6			  ## cvsd_codec.c:57:26
  11197e:    43 18             	r3 += r4			  ## cvsd_codec.c:67:27
  111980:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:67:20
  111984:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:54:27
  111986:    82 f8 dc 09       	if (r2 != 0x4) goto -0x48 <cvsd_decode+0x86 : 111942 >			  ## cvsd_codec.c:54:5
  11198a:    41 20             	r1 = 0x0
  11198c:    42 20             	r2 = 0x0
  11198e:    04 88             	goto 0x10 <cvsd_decode+0xE4 : 1119a0 >
  111990:    d8 ec 02 31       	r3 = [r0+r1]			  ## cvsd_codec.c:200:35
  111994:    f4 e1 31 3c       	r3 = r3 / r12 (s)			  ## cvsd_codec.c:200:63
  111998:    d8 ec 0b 32       	[r0+r2<<2] = r3			  ## cvsd_codec.c:200:33
  11199c:    c1 28             	r1 += 0x8			  ## cvsd_codec.c:199:5
  11199e:    c2 21             	r2 += 0x1			  ## cvsd_codec.c:199:25
  1119a0:    82 f8 f6 05       	if (r2 != 0x2) goto -0x14 <cvsd_decode+0xD4 : 111990 >			  ## cvsd_codec.c:199:5
  1119a4:    41 20             	r1 = 0x0
  1119a6:    14 89             	goto 0x52 <cvsd_decode+0x13E : 1119fa >
  1119a8:    d8 ec 0a 21       	r2 = [r0+r1<<2]			  ## cvsd_codec.c:55:27
  1119ac:    d0 ec e4 33       	r3 = [r14+0x34]			  ## cvsd_codec.c:55:15
  1119b0:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:55:25
  1119b2:    e4 e1 54 20       	r4 = r2 * 0x54			  ## cvsd_codec.c:56:27
  1119b6:    cc 20             	r4 += 0x20			  ## cvsd_codec.c:56:37
  1119b8:    cc a6             	r4 = r4 >>> 0x6			  ## cvsd_codec.c:56:43
  1119ba:    cb 1e             	r3 = r4 - r3			  ## cvsd_codec.c:56:49
  1119bc:    d0 ec e5 33       	[r14+0x34] = r3			  ## cvsd_codec.c:56:19
  1119c0:    d0 ec ec 43       	r4 = [r14+0x3c]			  ## cvsd_codec.c:59:27
  1119c4:    d0 ec e8 53       	r5 = [r14+0x38]			  ## cvsd_codec.c:59:15
  1119c8:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:59:25
  1119ca:    e6 e1 4d 40       	r6 = r4 * 0x4D			  ## cvsd_codec.c:60:27
  1119ce:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:60:37
  1119d0:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:60:43
  1119d2:    6d 1f             	r5 = r6 - r5			  ## cvsd_codec.c:60:49
  1119d4:    d0 ec e9 53       	[r14+0x38] = r5			  ## cvsd_codec.c:60:19
  1119d8:    d8 ec 0a 61       	r6 = [r0+r1<<2]			  ## cvsd_codec.c:63:22
  1119dc:    54 1f             	r4 = r5 - r4			  ## cvsd_codec.c:61:26
  1119de:    c5 1f             	r5 = r4 - r6			  ## cvsd_codec.c:63:20
  1119e0:    e6 e1 18 50       	r6 = r5 * 0x18			  ## cvsd_codec.c:64:27
  1119e4:    ce 20             	r6 += 0x20			  ## cvsd_codec.c:64:37
  1119e6:    ee a6             	r6 = r6 >>> 0x6			  ## cvsd_codec.c:64:43
  1119e8:    64 1f             	r4 = r6 - r4			  ## cvsd_codec.c:64:49
  1119ea:    d0 ec ed 43       	[r14+0x3c] = r4			  ## cvsd_codec.c:64:19
  1119ee:    b2 1e             	r2 = r3 - r2			  ## cvsd_codec.c:65:26
  1119f0:    2a 1f             	r2 = r2 - r5			  ## cvsd_codec.c:57:26
  1119f2:    42 18             	r2 += r4			  ## cvsd_codec.c:67:27
  1119f4:    d8 ec 0b 21       	[r0+r1<<2] = r2			  ## cvsd_codec.c:67:20
  1119f8:    c1 21             	r1 += 0x1			  ## cvsd_codec.c:54:27
  1119fa:    81 f8 d5 05       	if (r1 != 0x2) goto -0x56 <cvsd_decode+0xEC : 1119a8 >
  1119fe:    d0 ec d0 12       	r1 = [r13+0x20]			  ## cvsd_codec.c:224:17
  111a02:    12 16             	r2 = r1			  ## cvsd_codec.c:214:9
  111a04:    ab bf             	r3 = r2 >>> 0x1f			  ## cvsd_codec.c:214:9
  111a06:    d2 e1              <unkown instruction>			  ## cvsd_codec.c:214:9
  111a08:    31 2c             	r1 |= 0x1000			  ## cvsd_codec.c:214:9
  111a0a:    78 e0 01 12       	r1 = sat16(r2) (s)			  ## cvsd_codec.c:214:9
  111a0e:    d0 ec d1 12       	[r13+0x20] = r1			  ## cvsd_codec.c:214:9
  111a12:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:230:28
  111a16:    d8 ed 89 1b       	h[r8+r11<<1] = r1			  ## cvsd_codec.c:404:24
  111a1a:    0b e1 01 b0       	r11 = r11 + 0x1			  ## cvsd_codec.c:400:31
  111a1e:    8a ed 5d b1       	ifs (r11 < r10) goto -0x146 <cvsd_decode+0x20 : 1118dc >
  111a22:    04 97             	goto 0x2e <cvsd_decode+0x196 : 111a52 >
  111a24:    45 20             	r5 = 0x0
  111a26:    04 93             	goto 0x26 <cvsd_decode+0x192 : 111a4e >
  111a28:    d8 ee 90 15       	r1 = b[r9+r5] (u)			  ## cvsd_codec.c:408:45
  111a2c:    52 ee e0 10       	b[r14+0x0] = r1			  ## cvsd_codec.c:408:43
  111a30:    e1 16             	r1 = r14			  ## cvsd_codec.c:409:13
  111a32:    bf ea ee fe       	call -0x224 <CVSD_StudentDecode : 111812 >			  ## cvsd_codec.c:409:13
  111a36:    41 20             	r1 = 0x0			  ## cvsd_codec.c:170:9
  111a38:    02 16             	r2 = r0			  ## cvsd_codec.c:170:9
  111a3a:    23 05             	r3 = [r2++=0x4] 			  ## cvsd_codec.c:170:9
  111a3c:    10 87             	rep 0x4 0x8 {			  ## cvsd_codec.c:170:9
  111a3e:    99 dc             		r1 = r1 + r3  #			  ## cvsd_codec.c:170:9
  111a40:    23 05             			 r3 = [r2++=0x4] 
                               	}			  ## cvsd_codec.c:170:9
  111a42:    91 a3             	r1 = r1 >> 0x3			  ## cvsd_codec.c:181:19
  111a44:    50 ed ef 10       	h[r14+0xe] = r1			  ## cvsd_codec.c:184:28
  111a48:    d8 ed 89 15       	h[r8+r5<<1] = r1			  ## cvsd_codec.c:411:24
  111a4c:    c5 21             	r5 += 0x1			  ## cvsd_codec.c:407:31
  111a4e:    8a ed eb 51       	ifs (r5 < r10) goto -0x2a <cvsd_decode+0x16C : 111a28 >
  111a52:    40 20             	r0 = 0x0			  ## cvsd_codec.c:415:5
  111a54:    5e 04             	{pc, r14-r4} = [sp++]			  ## cvsd_codec.c:415:5


cvsd_set:
  111a56:    81 48             	if (r1 != 0) goto 0x10 <cvsd_set+0x12 : 111a68 >			  ## cvsd_codec.c:419:0
  111a58:    54 ee 20 10       	r1 = b[r2+0x0] (s)			  ## cvsd_codec.c:425:40
  111a5c:    50 ed 03 14       	h[r0+0x42] = r1			  ## cvsd_codec.c:425:38
  111a60:    54 ee 21 10       	r1 = b[r2+0x1] (s)			  ## cvsd_codec.c:426:40
  111a64:    50 ed 0f 14       	h[r0+0x4e] = r1			  ## cvsd_codec.c:426:38
  111a68:    80 00             	rts			  ## cvsd_codec.c:432:1


get_cvsd_codec_ops:
  111a6a:    c0 ff 74 1a 11 00 	r0 = 0x111a74 <bt_esco_cvsd_codec : 111a74 >			  ## cvsd_codec.c:443:0
  111a70:    80 00             	rts			  ## cvsd_codec.c:444:5
  111a72:    00 00             	nop


bt_esco_cvsd_codec:
  111a74:	 b8 15 11 00 bc 15 11 00         ........
  111a7c:	 8c 16 11 00 bc 18 11 00         ........
  111a84:	 56 1a 11 00                     V...


VecEleMul_s16_s16_s32:
  111a88:    79 04             	[--sp] = {rets, r9-r4}
  111a8a:    43 20             	r3 = 0x0
  111a8c:    05 63             	r5 = [r0+0xc] 
  111a8e:    a5 63             	[r2+0xc] = r5
  111a90:    d0 ec 1c 80       	r8 = [r1+0xc]
  111a94:    06 61             	r6 = [r0+0x4] 
  111a96:    c0 f1 61 60       	r6 = r6 << 0x1  #
  111a9a:    00 64             		 r0 = [r0+0x10] 
  111a9c:    17 61             	r7 = [r1+0x4] 
  111a9e:    c0 f1 71 70       	r7 = r7 << 0x1  #
  111aa2:    11 64             		 r1 = [r1+0x10] 
  111aa4:    24 60             	r4 = [r2+0x0] 
  111aa6:    d0 ec 24 90       	r9 = [r2+0x4]
  111aaa:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111aae:    22 64             		 r2 = [r2+0x10] 
  111ab0:    94 03             	rep 0x14 r4 {
  111ab2:    de ed 02 56       		r5 = h[r0++=r6] (s)
  111ab6:    de ed 12 47       		r4 = h[r1++=r7] (s)
  111aba:    45 1b             		r5 *= r4
  111abc:    c8 e1 53 58       		r5 = r5 >>> r8
  111ac0:    b8 e0 50 53       		r5 = r5 + r3 + c
  111ac4:    ad 08             		[r2++=r9] = r5
                               	}
  111ac6:    04 fe f3 01       	ifs (r4 > 0x0) goto -0x1a <VecEleMul_s16_s16_s32+0x28 : 111ab0 >
  111aca:    59 04             	{pc, r9-r4} = [sp++]


VecEleMul_s16_s32_s16:
  111acc:    78 04             	[--sp] = {rets, r8-r4}
  111ace:    04 63             	r4 = [r0+0xc] 
  111ad0:    a4 63             	[r2+0xc] = r4
  111ad2:    17 63             	r7 = [r1+0xc] 
  111ad4:    14 61             	r4 = [r1+0x4] 
  111ad6:    c0 f1 42 40       	r4 = r4 << 0x2  #
  111ada:    11 64             		 r1 = [r1+0x10] 
  111adc:    06 61             	r6 = [r0+0x4] 
  111ade:    c0 f1 61 61       	r6 = r6 << 0x11  #
  111ae2:    00 64             		 r0 = [r0+0x10] 
  111ae4:    a6 f1 40 40       	r6 <= insert(r4, p:0x0, l:0x10)  #
  111ae8:    23 60             		 r3 = [r2+0x0] 
  111aea:    d0 ec 24 80       	r8 = [r2+0x4]
  111aee:    c0 f1 81 80       	r8 = r8 << 0x1  #
  111af2:    22 64             		 r2 = [r2+0x10] 
  111af4:    63 03             	rep 0xe r3 {
  111af6:    e8 e8 06 51       		r5_r4 = h[r0 ++= r6.h]*[r1 ++= r6.l] (s)
  111afa:    d3 e1              <unkown instruction>
  111afc:    41 47             		if (r1 == 0) goto -0xf2 <cvsd_decode+0x150 : 111a0c >
  111afe:    78 e0 01 44       		r4 = sat16(r4) (s)
  111b02:    2c 0c             		h[r2++=r8] = r4
  111b04:    03 fe f6 01       		ifs (r3 > 0x0) goto -0x14
                               	} <VecEleMul_s16_s32_s16+0x28 : 111af4 >
  111b08:    58 04             	{pc, r8-r4} = [sp++]


VecEleMul_s32_s16_s32:
  111b0a:    78 04             	[--sp] = {rets, r8-r4}
  111b0c:    04 63             	r4 = [r0+0xc] 
  111b0e:    a4 63             	[r2+0xc] = r4
  111b10:    17 63             	r7 = [r1+0xc] 
  111b12:    04 61             	r4 = [r0+0x4] 
  111b14:    c0 f1 42 40       	r4 = r4 << 0x2  #
  111b18:    00 64             		 r0 = [r0+0x10] 
  111b1a:    16 61             	r6 = [r1+0x4] 
  111b1c:    c0 f1 61 61       	r6 = r6 << 0x11  #
  111b20:    11 64             		 r1 = [r1+0x10] 
  111b22:    a6 f1 40 40       	r6 <= insert(r4, p:0x0, l:0x10)  #
  111b26:    23 60             		 r3 = [r2+0x0] 
  111b28:    d0 ec 24 80       	r8 = [r2+0x4]
  111b2c:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111b30:    22 64             		 r2 = [r2+0x10] 
  111b32:    43 03             	rep 0xa r3 {
  111b34:    e8 e8 16 50       		r5_r4 = h[r1 ++= r6.h]*[r0 ++= r6.l] (s)
  111b38:    d3 e1              <unkown instruction>
  111b3a:    41 47             		if (r1 == 0) goto -0xf2 <cvsd_decode+0x18E : 111a4a >
  111b3c:    2c 08             		[r2++=r8] = r4
  111b3e:    03 fe f8 01       		ifs (r3 > 0x0) goto -0x10
                               	} <VecEleMul_s32_s16_s32+0x28 : 111b32 >
  111b42:    58 04             	{pc, r8-r4} = [sp++]


VecOvShift_s16_s16:
  111b44:    79 04             	[--sp] = {rets, r9-r4}
  111b46:    13 64             	r3 = [r1+0x10] 
  111b48:    d0 ec 14 80       	r8 = [r1+0x4]
  111b4c:    c0 f1 81 80       	r8 = r8 << 0x1  #
  111b50:    05 60             		 r5 = [r0+0x0] 
  111b52:    17 60             	r7 = [r1+0x0] 
  111b54:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_s16_s16+0x22 : 111b66 >
  111b58:    f0 e1 80 67       	r6 = r8 * r7
  111b5c:    b4 e0 62 68       	r6 = r6 - r8
  111b60:    b3 1d             	r3 = r3 + r6
  111b62:    a8 e0 00 80       	r8 = 0x0 - r8
  111b66:    7f 1f             	r7 = r7 - r5
  111b68:    85 1b             	r5 *= r8
  111b6a:    3c 1d             	r4 = r3 + r5
  111b6c:    27 03             	rep 0x6 r7 {
  111b6e:    de ed 42 58       		r5 = h[r4++=r8] (s)
  111b72:    3d 0c             		h[r3++=r8] = r5
                               	}
  111b74:    f7 5b             	if (r7 != 0) goto -0xa <VecOvShift_s16_s16+0x28 : 111b6c >
  111b76:    04 64             	r4 = [r0+0x10] 
  111b78:    d0 ec 04 90       	r9 = [r0+0x4]
  111b7c:    c0 f1 91 90       	r9 = r9 << 0x1  #
  111b80:    07 60             		 r7 = [r0+0x0] 
  111b82:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_s16_s16+0x50 : 111b94 >
  111b86:    f0 e1 70 69       	r6 = r7 * r9
  111b8a:    b4 e0 62 69       	r6 = r6 - r9
  111b8e:    c4 1d             	r4 = r4 + r6
  111b90:    a9 e0 00 90       	r9 = 0x0 - r9
  111b94:    27 03             	rep 0x6 r7 {
  111b96:    de ed 42 59       		r5 = h[r4++=r9] (s)
  111b9a:    3d 0c             		h[r3++=r8] = r5
                               	}
  111b9c:    f7 5b             	if (r7 != 0) goto -0xa <VecOvShift_s16_s16+0x50 : 111b94 >
  111b9e:    59 04             	{pc, r9-r4} = [sp++]


VecOvShift_s16_s32:
  111ba0:    79 04             	[--sp] = {rets, r9-r4}
  111ba2:    13 64             	r3 = [r1+0x10] 
  111ba4:    d0 ec 14 80       	r8 = [r1+0x4]
  111ba8:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111bac:    05 60             		 r5 = [r0+0x0] 
  111bae:    17 60             	r7 = [r1+0x0] 
  111bb0:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_s16_s32+0x22 : 111bc2 >
  111bb4:    f0 e1 80 67       	r6 = r8 * r7
  111bb8:    b4 e0 62 68       	r6 = r6 - r8
  111bbc:    b3 1d             	r3 = r3 + r6
  111bbe:    a8 e0 00 80       	r8 = 0x0 - r8
  111bc2:    7f 1f             	r7 = r7 - r5
  111bc4:    85 1b             	r5 *= r8
  111bc6:    3c 1d             	r4 = r3 + r5
  111bc8:    17 03             	rep 0x4 r7 {
  111bca:    45 08             		r5 = [r4++=r8] 
  111bcc:    3d 08             		[r3++=r8] = r5
                               	}
  111bce:    f7 5c             	if (r7 != 0) goto -0x8 <VecOvShift_s16_s32+0x28 : 111bc8 >
  111bd0:    04 64             	r4 = [r0+0x10] 
  111bd2:    d0 ec 04 90       	r9 = [r0+0x4]
  111bd6:    c0 f1 91 90       	r9 = r9 << 0x1  #
  111bda:    07 60             		 r7 = [r0+0x0] 
  111bdc:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_s16_s32+0x4E : 111bee >
  111be0:    f0 e1 70 69       	r6 = r7 * r9
  111be4:    b4 e0 62 69       	r6 = r6 - r9
  111be8:    c4 1d             	r4 = r4 + r6
  111bea:    a9 e0 00 90       	r9 = 0x0 - r9
  111bee:    27 03             	rep 0x6 r7 {
  111bf0:    de ed 42 59       		r5 = h[r4++=r9] (s)
  111bf4:    3d 08             		[r3++=r8] = r5
                               	}
  111bf6:    f7 5b             	if (r7 != 0) goto -0xa <VecOvShift_s16_s32+0x4E : 111bee >
  111bf8:    59 04             	{pc, r9-r4} = [sp++]


VecCopy_s16_s32:
  111bfa:    75 04             	[--sp] = {rets, r5, r4}
  111bfc:    02 61             	r2 = [r0+0x4] 
  111bfe:    c0 f1 21 20       	r2 = r2 << 0x1  #
  111c02:    14 60             		 r4 = [r1+0x0] 
  111c04:    13 61             	r3 = [r1+0x4] 
  111c06:    c0 f1 32 30       	r3 = r3 << 0x2  #
  111c0a:    00 64             		 r0 = [r0+0x10] 
  111c0c:    11 64             	r1 = [r1+0x10] 
  111c0e:    34 03             	rep 0x8 r4 {
  111c10:    de ed 02 52       		r5 = h[r0++=r2] (s)
  111c14:    de ec 13 53       		[r1++=r3] = r5
                               	}
  111c18:    f4 5a             	if (r4 != 0) goto -0xc <VecCopy_s16_s32+0x14 : 111c0e >
  111c1a:    55 04             	{pc, r5, r4} = [sp++]


VecCopy_s32_s16:
  111c1c:    75 04             	[--sp] = {rets, r5, r4}
  111c1e:    02 61             	r2 = [r0+0x4] 
  111c20:    c0 f1 22 20       	r2 = r2 << 0x2  #
  111c24:    14 60             		 r4 = [r1+0x0] 
  111c26:    13 61             	r3 = [r1+0x4] 
  111c28:    c0 f1 31 30       	r3 = r3 << 0x1  #
  111c2c:    00 64             		 r0 = [r0+0x10] 
  111c2e:    11 64             	r1 = [r1+0x10] 
  111c30:    54 03             	rep 0xc r4 {
  111c32:    de ec 02 52       		r5 = [r0++=r2]
  111c36:    78 e0 01 55       		r5 = sat16(r5) (s)
  111c3a:    de ed 11 53       		h[r1++=r3] = r5
                               	}
  111c3e:    f4 58             	if (r4 != 0) goto -0x10 <VecCopy_s32_s16+0x14 : 111c30 >
  111c40:    55 04             	{pc, r5, r4} = [sp++]


VecMinus_s16_s32_s32:
  111c42:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}
  111c46:    d0 ec 04 80       	r8 = [r0+0x4]
  111c4a:    c0 f1 81 80       	r8 = r8 << 0x1  #
  111c4e:    23 60             		 r3 = [r2+0x0] 
  111c50:    d0 ec 14 90       	r9 = [r1+0x4]
  111c54:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111c58:    00 64             		 r0 = [r0+0x10] 
  111c5a:    d0 ec 24 a0       	r10 = [r2+0x4]
  111c5e:    c0 f1 a2 a0       	r10 = r10 << 0x2  #
  111c62:    11 64             		 r1 = [r1+0x10] 
  111c64:    22 64             	r2 = [r2+0x10] 
  111c66:    43 03             	rep 0xa r3 {
  111c68:    de ed 02 58       		r5 = h[r0++=r8] (s)
  111c6c:    94 08             		r4 = [r1++=r9] 
  111c6e:    55 1f             		r5 = r5 - r4
  111c70:    2d 09             		[r2++=r10] = r5
                               	}
  111c72:    03 fe f8 01       	ifs (r3 > 0x0) goto -0x10 <VecMinus_s16_s32_s32+0x24 : 111c66 >
  111c76:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]


VecMeanSq_s16_s32:
  111c7a:    77 04             	[--sp] = {rets, r7-r4}
  111c7c:    04 63             	r4 = [r0+0xc] 
  111c7e:    94 61             	[r1+0x4] = r4
  111c80:    07 63             	r7 = [r0+0xc] 
  111c82:    06 60             	r6 = [r0+0x0] 
  111c84:    f2 f0 01 60       	r2 = r6 - 0x1  #
  111c88:    03 61             		 r3 = [r0+0x4] 
  111c8a:    c0 f1 31 30       	r3 = r3 << 0x1  #
  111c8e:    00 64             		 r0 = [r0+0x10] 
  111c90:    de ed 02 43       	r4 = h[r0++=r3] (s)
  111c94:    f8 e1 40 54       	r5_r4 = r4 * r4 (s)
  111c98:    32 03             	rep 0x8 r2 {
  111c9a:    de ed 02 23       		r2 = h[r0++=r3] (s)
  111c9e:    fc e1 20 52       		r5_r4 += r2 * r2 (s)
                               	}
  111ca2:    f2 5a             	if (r2 != 0) goto -0xc <VecMeanSq_s16_s32+0x1E : 111c98 >
  111ca4:    d8 e1 03 47       	r5_r4 >>>= r7
  111ca8:    f6 e1 40 56       	r5_r4 = r5_r4 / r6 (s)
  111cac:    94 60             	[r1+0x0] = r4
  111cae:    57 04             	{pc, r7-r4} = [sp++]


VecPlus_fix_r_r_r:
  111cb0:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}
  111cb4:    d0 ec 04 80       	r8 = [r0+0x4]
  111cb8:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111cbc:    00 64             		 r0 = [r0+0x10] 
  111cbe:    d0 ec 14 90       	r9 = [r1+0x4]
  111cc2:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111cc6:    11 64             		 r1 = [r1+0x10] 
  111cc8:    d0 ec 24 a0       	r10 = [r2+0x4]
  111ccc:    c0 f1 a2 a0       	r10 = r10 << 0x2  #
  111cd0:    23 60             		 r3 = [r2+0x0] 
  111cd2:    22 64             	r2 = [r2+0x10] 
  111cd4:    33 03             	rep 0x8 r3 {
  111cd6:    05 08             		r5 = [r0++=r8] 
  111cd8:    94 08             		r4 = [r1++=r9] 
  111cda:    4d 1d             		r5 = r4 + r5
  111cdc:    2d 09             		[r2++=r10] = r5
                               	}
  111cde:    03 fe f9 01       	ifs (r3 > 0x0) goto -0xe <VecPlus_fix_r_r_r+0x24 : 111cd4 >
  111ce2:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]


VecMinus_fix_r_r_r:
  111ce6:    d9 e8 30 07       	[--sp] = {rets, r10-r8, r5, r4}
  111cea:    d0 ec 04 80       	r8 = [r0+0x4]
  111cee:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111cf2:    23 60             		 r3 = [r2+0x0] 
  111cf4:    d0 ec 14 90       	r9 = [r1+0x4]
  111cf8:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111cfc:    00 64             		 r0 = [r0+0x10] 
  111cfe:    d0 ec 24 a0       	r10 = [r2+0x4]
  111d02:    c0 f1 a2 a0       	r10 = r10 << 0x2  #
  111d06:    11 64             		 r1 = [r1+0x10] 
  111d08:    22 64             	r2 = [r2+0x10] 
  111d0a:    33 03             	rep 0x8 r3 {
  111d0c:    05 08             		r5 = [r0++=r8] 
  111d0e:    94 08             		r4 = [r1++=r9] 
  111d10:    55 1f             		r5 = r5 - r4
  111d12:    2d 09             		[r2++=r10] = r5
                               	}
  111d14:    03 fe f9 01       	ifs (r3 > 0x0) goto -0xe <VecMinus_fix_r_r_r+0x24 : 111d0a >
  111d18:    d5 e8 30 07       	{pc, r10-r8, r5, r4} = [sp++]


VecDiv_fix_r_r_r:
  111d1c:    7b 04             	[--sp] = {rets, r11-r4}
  111d1e:    e2 9f             	sp += -0x4
  111d20:    33 60             	r3 = [r3+0x0] 
  111d22:    83 20             	[sp] = r3
  111d24:    04 20             	r4 = [sp]
  111d26:    05 63             	r5 = [r0+0xc] 
  111d28:    d0 ec 04 80       	r8 = [r0+0x4]
  111d2c:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111d30:    00 64             		 r0 = [r0+0x10] 
  111d32:    d0 ec 14 a0       	r10 = [r1+0x4]
  111d36:    c0 f1 a2 a0       	r10 = r10 << 0x2  #
  111d3a:    16 63             		 r6 = [r1+0xc] 
  111d3c:    6e df             	r6 = r6 - r5  #
  111d3e:    11 64             		 r1 = [r1+0x10] 
  111d40:    d0 ec 24 90       	r9 = [r2+0x4]
  111d44:    d0 ec 20 b0       	r11 = [r2+0x0]
  111d48:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111d4c:    25 63             		 r5 = [r2+0xc] 
  111d4e:    6b dd             	r3 = r6 + r5  #
  111d50:    22 64             		 r2 = [r2+0x10] 
  111d52:    bb 03             	rep 0x18 r11 {
  111d54:    47 f0 00 00       		r7 = 0x0  #
  111d58:    06 08             			 r6 = [r0++=r8] 
  111d5a:    d8 f1 01 63       		r7_r6 <<<= r3  #
  111d5e:    15 09             			 r5 = [r1++=r10] 
  111d60:    55 1d             		r5 = r5 + r4
  111d62:    f6 e1 60 75       		r7_r6 = r7_r6 / r5 (s)
  111d66:    d0 e1 00 66       		r7_r6 <<<= 0x20
  111d6a:    af 08             		[r2++=r9] = r7
                               	}
  111d6c:    0b fe f1 01       	ifs (r11 > 0x0) goto -0x1e <VecDiv_fix_r_r_r+0x36 : 111d52 >
  111d70:    02 81             	sp += 0x4
  111d72:    5b 04             	{pc, r11-r4} = [sp++]


VecEleMul_fix_r_r_r:
  111d74:    78 04             	[--sp] = {rets, r8-r4}
  111d76:    04 63             	r4 = [r0+0xc] 
  111d78:    a4 63             	[r2+0xc] = r4
  111d7a:    17 63             	r7 = [r1+0xc] 
  111d7c:    04 61             	r4 = [r0+0x4] 
  111d7e:    c0 f1 42 40       	r4 = r4 << 0x2  #
  111d82:    00 64             		 r0 = [r0+0x10] 
  111d84:    16 61             	r6 = [r1+0x4] 
  111d86:    c0 f1 62 60       	r6 = r6 << 0x2  #
  111d8a:    11 64             		 r1 = [r1+0x10] 
  111d8c:    a6 f1 40 48       	r6 <= insert(r4, p:0x10, l:0x10)  #
  111d90:    23 60             		 r3 = [r2+0x0] 
  111d92:    d0 ec 24 80       	r8 = [r2+0x4]
  111d96:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111d9a:    22 64             		 r2 = [r2+0x10] 
  111d9c:    43 03             	rep 0xa r3 {
  111d9e:    e0 e8 06 51       		r5_r4 = [r0 ++= r6.h]*[r1 ++= r6.l] (s)
  111da2:    d3 e1              <unkown instruction>
  111da4:    41 47             		if (r1 == 0) goto -0xf2 <VecPlus_fix_r_r_r+0x4 : 111cb4 >
  111da6:    2c 08             		[r2++=r8] = r4
  111da8:    03 fe f8 01       		ifs (r3 > 0x0) goto -0x10
                               	} <VecEleMul_fix_r_r_r+0x28 : 111d9c >
  111dac:    58 04             	{pc, r8-r4} = [sp++]


VecEleMul_fix_c_r_c:
  111dae:    7a 04             	[--sp] = {rets, r10-r4}
  111db0:    04 61             	r4 = [r0+0x4] 
  111db2:    c0 f1 43 40       	r4 = r4 << 0x3  #
  111db6:    00 64             		 r0 = [r0+0x10] 
  111db8:    34 f1 fc 4f       	r4 = r4 + -0x4  #
  111dbc:    17 63             		 r7 = [r1+0xc] 
  111dbe:    d0 ec 14 a0       	r10 = [r1+0x4]
  111dc2:    c0 f1 a2 a0       	r10 = r10 << 0x2  #
  111dc6:    11 64             		 r1 = [r1+0x10] 
  111dc8:    aa f1 40 48       	r10 <= insert(r4, p:0x10, l:0x10)  #
  111dcc:    23 60             		 r3 = [r2+0x0] 
  111dce:    26 61             	r6 = [r2+0x4] 
  111dd0:    c0 f1 63 60       	r6 = r6 << 0x3  #
  111dd4:    22 64             		 r2 = [r2+0x10] 
  111dd6:    fe 3c             	r6 += -0x4
  111dd8:    a3 03             	rep 0x16 r3 {
  111dda:    60 e9 01 51       		r5_r4 = [r0 ++= 0x4]*[r1 ++= 0x0] (s)
  111dde:    e0 e8 0a 91       		r9_r8 = [r0 ++= r10.h]*[r1 ++= r10.l] (s)
  111de2:    d3 e1              <unkown instruction>
  111de4:    41 47             		if (r1 == 0) goto -0xf2 <VecMinus_fix_r_r_r+0xE : 111cf4 >
  111de6:    d3 f1              <unkown instruction>
  111de8:    81 87              <unkown instruction>
  111dea:    a4 05             		[r2++=0x4] = r4
  111dec:    de ec 23 86       		[r2++=r6] = r8
  111df0:    f3 53             		if (r3 != 0) goto -0x1a <VecEleMul_fix_c_r_c+0x2A : 111dd8 >
  111df2:    5a 04             		{pc, r10-r4} = [sp++]


VecMagAndDiv_fix:
  111df4:    7b 04             		[--sp] = {rets, r11-r4}
                               	}
  111df6:    e2 9f             	sp += -0x4
  111df8:    22 60             	r2 = [r2+0x0] 
  111dfa:    82 20             	[sp] = r2
  111dfc:    02 20             	r2 = [sp]
  111dfe:    05 63             	r5 = [r0+0xc] 
  111e00:    c0 f1 51 50       	r5 = r5 << 0x1  #
  111e04:    16 63             		 r6 = [r1+0xc] 
  111e06:    d5 df             	r5 = r5 - r6  #
  111e08:    37 63             		 r7 = [r3+0xc] 
  111e0a:    b4 e0 72 a5       	r10 = r7 - r5
  111e0e:    d0 ec 04 b0       	r11 = [r0+0x4]
  111e12:    c0 f1 b3 b0       	r11 = r11 << 0x3  #
  111e16:    34 60             		 r4 = [r3+0x0] 
  111e18:    3b f1 fc bf       	r11 = r11 + -0x4  #
  111e1c:    00 64             		 r0 = [r0+0x10] 
  111e1e:    d0 ec 14 80       	r8 = [r1+0x4]
  111e22:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111e26:    11 64             		 r1 = [r1+0x10] 
  111e28:    d0 ec 34 90       	r9 = [r3+0x4]
  111e2c:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111e30:    33 64             		 r3 = [r3+0x10] 
  111e32:    c0 e1 b0 b1       	r11 = r11 << 0x10
  111e36:    a4 03             	rep 0x16 r4 {
  111e38:    61 e9 01 70       		r7_r6 = [r0 ++= 0x4]*[r0 ++= 0x4] (s)
  111e3c:    e4 e8 0b 70       		r7_r6 += [r0 ++= r11.h]*[r0 ++= r11.l] (s)
  111e40:    dc e1 03 6a       		r7_r6 ><= r10 (sat)
  111e44:    15 08             		r5 = [r1++=r8] 
  111e46:    d5 1c             		r5 = r5 + r2
  111e48:    f6 e1 60 75       		r7_r6 = r7_r6 / r5 (s)
  111e4c:    be 08             		[r3++=r9] = r6
                               	}
  111e4e:    f4 53             	if (r4 != 0) goto -0x1a <VecMagAndDiv_fix+0x42 : 111e36 >
  111e50:    02 81             	sp += 0x4
  111e52:    5b 04             	{pc, r11-r4} = [sp++]


VecOvShift_fix:
  111e54:    79 04             	[--sp] = {rets, r9-r4}
  111e56:    13 64             	r3 = [r1+0x10] 
  111e58:    d0 ec 14 80       	r8 = [r1+0x4]
  111e5c:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111e60:    05 60             		 r5 = [r0+0x0] 
  111e62:    17 60             	r7 = [r1+0x0] 
  111e64:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_fix+0x22 : 111e76 >
  111e68:    f0 e1 80 67       	r6 = r8 * r7
  111e6c:    b4 e0 62 68       	r6 = r6 - r8
  111e70:    b3 1d             	r3 = r3 + r6
  111e72:    a8 e0 00 80       	r8 = 0x0 - r8
  111e76:    7f 1f             	r7 = r7 - r5
  111e78:    85 1b             	r5 *= r8
  111e7a:    3c 1d             	r4 = r3 + r5
  111e7c:    17 03             	rep 0x4 r7 {
  111e7e:    45 08             		r5 = [r4++=r8] 
  111e80:    3d 08             		[r3++=r8] = r5
                               	}
  111e82:    f7 5c             	if (r7 != 0) goto -0x8 <VecOvShift_fix+0x28 : 111e7c >
  111e84:    04 64             	r4 = [r0+0x10] 
  111e86:    d0 ec 04 90       	r9 = [r0+0x4]
  111e8a:    c0 f1 92 90       	r9 = r9 << 0x2  #
  111e8e:    07 60             		 r7 = [r0+0x0] 
  111e90:    02 fe 07 00       	ifs (r2 > 0x0) goto 0xe <VecOvShift_fix+0x4E : 111ea2 >
  111e94:    f0 e1 70 69       	r6 = r7 * r9
  111e98:    b4 e0 62 69       	r6 = r6 - r9
  111e9c:    c4 1d             	r4 = r4 + r6
  111e9e:    a9 e0 00 90       	r9 = 0x0 - r9
  111ea2:    17 03             	rep 0x4 r7 {
  111ea4:    c5 08             		r5 = [r4++=r9] 
  111ea6:    3d 08             		[r3++=r8] = r5
                               	}
  111ea8:    f7 5c             	if (r7 != 0) goto -0x8 <VecOvShift_fix+0x4E : 111ea2 >
  111eaa:    59 04             	{pc, r9-r4} = [sp++]


VecCopy_fix_r_r:
  111eac:    75 04             	[--sp] = {rets, r5, r4}
  111eae:    15 61             	r5 = [r1+0x4] 
  111eb0:    c0 f1 52 50       	r5 = r5 << 0x2  #
  111eb4:    04 61             		 r4 = [r0+0x4] 
  111eb6:    c0 f1 42 40       	r4 = r4 << 0x2  #
  111eba:    12 60             		 r2 = [r1+0x0] 
  111ebc:    11 64             	r1 = [r1+0x10] 
  111ebe:    00 64             	r0 = [r0+0x10] 
  111ec0:    32 03             	rep 0x8 r2 {
  111ec2:    de ec 02 34       		r3 = [r0++=r4]
  111ec6:    de ec 13 35       		[r1++=r5] = r3
                               	}
  111eca:    02 fe f9 01       	ifs (r2 > 0x0) goto -0xe <VecCopy_fix_r_r+0x14 : 111ec0 >
  111ece:    55 04             	{pc, r5, r4} = [sp++]


VecCopy_fix_r_c:
  111ed0:    75 04             	[--sp] = {rets, r5, r4}
  111ed2:    04 61             	r4 = [r0+0x4] 
  111ed4:    c0 f1 42 40       	r4 = r4 << 0x2  #
  111ed8:    00 64             		 r0 = [r0+0x10] 
  111eda:    15 61             	r5 = [r1+0x4] 
  111edc:    c0 f1 53 50       	r5 = r5 << 0x3  #
  111ee0:    12 60             		 r2 = [r1+0x0] 
  111ee2:    11 64             	r1 = [r1+0x10] 
  111ee4:    52 03             	rep 0xc r2 {
  111ee6:    de ec 02 34       		r3 = [r0++=r4]
  111eea:    41 ea 00 10       		[r1+0x4] = 0x0
  111eee:    de ec 13 35       		[r1++=r5] = r3
                               	}
  111ef2:    02 fe f7 01       	ifs (r2 > 0x0) goto -0x12 <VecCopy_fix_r_c+0x14 : 111ee4 >
  111ef6:    55 04             	{pc, r5, r4} = [sp++]


VecConjEleMulAndDiv_fix:
  111ef8:    7e 04             	[--sp] = {rets, r14-r4}
  111efa:    e2 9e             	sp += -0x8
  111efc:    d0 ec 30 80       	r8 = [r3+0x0]
  111f00:    1d d6             	r13 = r1  #
  111f02:    03 2e             		 r3 = [sp+56]
  111f04:    d0 e9 01 20       	d[sp] = r3_r2
  111f08:    0e 16             	r14 = r0
  111f0a:    d0 e9 00 00       	r1_r0 = d[sp]
  111f0e:    d0 ec ec 20       	r2 = [r14+0xc]
  111f12:    d0 ec dc 40       	r4 = [r13+0xc]
  111f16:    22 dd             	r2 = r2 + r4  #
  111f18:    05 63             		 r5 = [r0+0xc] 
  111f1a:    2a df             	r2 = r2 - r5  #
  111f1c:    14 63             		 r4 = [r1+0xc] 
  111f1e:    b4 e0 42 c2       	r12 = r4 - r2
  111f22:    d0 ec e4 20       	r2 = [r14+0x4]
  111f26:    c0 f1 23 20       	r2 = r2 << 0x3  #
  111f2a:    13 60             		 r3 = [r1+0x0] 
  111f2c:    fa 3c             	r2 += -0x4
  111f2e:    d0 ec d4 90       	r9 = [r13+0x4]
  111f32:    c0 e1 93 90       	r9 = r9 << 0x3
  111f36:    d0 ec e0 e1       	r14 = [r14+0x10]
  111f3a:    d0 ec 04 a0       	r10 = [r0+0x4]
  111f3e:    c0 e1 a2 a0       	r10 = r10 << 0x2
  111f42:    d0 ec d0 d1       	r13 = [r13+0x10]
  111f46:    d0 ec 14 b0       	r11 = [r1+0x4]
  111f4a:    c0 f1 b3 b0       	r11 = r11 << 0x3  #
  111f4e:    00 64             		 r0 = [r0+0x10] 
  111f50:    3b f1 fc bf       	r11 = r11 + -0x4  #
  111f54:    11 64             		 r1 = [r1+0x10] 
  111f56:    a9 e1 40 28       	r9 <= insert(r2, p:0x10, l:0x10)
  111f5a:    61 e9 e1 5d       	r5_r4 = [r14 ++= 0x4]*[r13 ++= 0x4] (s)
  111f5e:    e0 e9 ef 5d       	r5_r4 += [r14 ++= -0x4]*[r13 ++= 0x0] (s)
  111f62:    6f e9 e1 7d       	r7_r6 = [r14 ++= 0x4]*[r13 ++= -0x4] (s)
  111f66:    e6 e8 e9 7d       	r7_r6 -= [r14 ++= r9.h]*[r13 ++= r9.l] (s)
  111f6a:    dc f1 03 4c       	r5_r4 ><= r12 (sat)  #
  111f6e:    02 09             		 r2 = [r0++=r10] 
  111f70:    dc e1 03 6c       	r7_r6 ><= r12 (sat)
  111f74:    82 18             	r2 += r8
  111f76:    f6 e1 40 52       	r5_r4 = r5_r4 / r2 (s)
  111f7a:    f6 f1 60 72       	r7_r6 = r7_r6 / r2 (s)  #
  111f7e:    94 05             		 [r1++=0x4] = r4
  111f80:    9e 09             	[r1++=r11] = r6
  111f82:    03 ea ea ff       	if (--r3 != 0) goto -0x2c <VecConjEleMulAndDiv_fix+0x62 : 111f5a >
  111f86:    02 82             	sp += 0x8
  111f88:    5e 04             	{pc, r14-r4} = [sp++]


VecRecurAvg_fix:
  111f8a:    78 04             	[--sp] = {rets, r8-r4}
  111f8c:    50 ec 20 20       	r3_r2 = d[r2+0x0]
  111f90:    d0 ec 04 80       	r8 = [r0+0x4]
  111f94:    c0 f1 82 80       	r8 = r8 << 0x2  #
  111f98:    00 64             		 r0 = [r0+0x10] 
  111f9a:    15 61             	r5 = [r1+0x4] 
  111f9c:    c0 f1 52 50       	r5 = r5 << 0x2  #
  111fa0:    14 60             		 r4 = [r1+0x0] 
  111fa2:    11 64             	r1 = [r1+0x10] 
  111fa4:    94 03             	rep 0x14 r4 {
  111fa6:    06 08             		r6 = [r0++=r8] 
  111fa8:    17 60             		r7 = [r1+0x0] 
  111faa:    ee 1f             		r6 = r6 - r7
  111fac:    f8 e1 60 72       		r7_r6 = r6 * r2 (s)
  111fb0:    d3 e1              <unkown instruction>
  111fb2:    61 63             		r1 = [r6+0xc] 
  111fb4:    68 e8 00 16       		[r1+0x0] += r6
  111fb8:    19 1d             		r1 = r1 + r5
  111fba:    04 fe f3 01       		ifs (r4 > 0x0) goto -0x1a
                               	} <VecRecurAvg_fix+0x1A : 111fa4 >
  111fbe:    58 04             	{pc, r8-r4} = [sp++]


VecConjRecurAvg_fix:
  111fc0:    7d 04             	[--sp] = {rets, r13-r4}
  111fc2:    50 ec 30 80       	r9_r8 = d[r3+0x0]
  111fc6:    03 61             	r3 = [r0+0x4] 
  111fc8:    33 a3             	r3 = r3 << 0x3
  111fca:    d0 ec 20 a0       	r10 = [r2+0x0]
  111fce:    33 f1 fc 3f       	r3 = r3 + -0x4  #
  111fd2:    04 63             		 r4 = [r0+0xc] 
  111fd4:    d0 ec 14 b0       	r11 = [r1+0x4]
  111fd8:    c0 f1 b3 b0       	r11 = r11 << 0x3  #
  111fdc:    15 63             		 r5 = [r1+0xc] 
  111fde:    4c dd             	r4 = r4 + r5  #
  111fe0:    26 63             		 r6 = [r2+0xc] 
  111fe2:    b4 f0 42 d6       	r13 = r4 - r6  #
  111fe6:    00 64             		 r0 = [r0+0x10] 
  111fe8:    d0 ec 24 c0       	r12 = [r2+0x4]
  111fec:    c0 f1 c3 c0       	r12 = r12 << 0x3  #
  111ff0:    11 64             		 r1 = [r1+0x10] 
  111ff2:    ab f1 40 38       	r11 <= insert(r3, p:0x10, l:0x10)  #
  111ff6:    22 64             		 r2 = [r2+0x10] 
  111ff8:    61 e9 01 51       	r5_r4 = [r0 ++= 0x4]*[r1 ++= 0x4] (s)
  111ffc:    e0 e9 0f 51       	r5_r4 += [r0 ++= -0x4]*[r1 ++= 0x0] (s)
  112000:    6f e9 01 71       	r7_r6 = [r0 ++= 0x4]*[r1 ++= -0x4] (s)
  112004:    e6 e8 0b 71       	r7_r6 -= [r0 ++= r11.h]*[r1 ++= r11.l] (s)
  112008:    d3 f1              <unkown instruction>
  11200a:    41 4d             	if (r1 == 0) goto -0xe6 <VecConjEleMulAndDiv_fix+0x2E : 111f26 >
  11200c:    23 05             	r3 = [r2++=0x4] 
  11200e:    d3 f1              <unkown instruction>
  112010:    61 6d             	r1 = [r6+0x34] 
  112012:    2d 05             	r5 = [r2++=-0x4] 
  112014:    cc 1e             	r4 = r4 - r3
  112016:    6e 1f             	r6 = r6 - r5
  112018:    f8 e1 60 78       	r7_r6 = r6 * r8 (s)
  11201c:    d3 e1              <unkown instruction>
  11201e:    61 69             	r1 = [r6+0x24] 
  112020:    f8 e1 40 58       	r5_r4 = r4 * r8 (s)
  112024:    d3 e1              <unkown instruction>
  112026:    41 49             	if (r1 == 0) goto -0xee <VecConjEleMulAndDiv_fix+0x42 : 111f3a >
  112028:    68 e8 00 24       	[r2+0x0] += r4
  11202c:    68 e8 04 26       	[r2+0x4] += r6
  112030:    c2 18             	r2 += r12
  112032:    0a ea e1 ff       	if (--r10 != 0) goto -0x3e <VecConjRecurAvg_fix+0x38 : 111ff8 >
  112036:    5d 04             	{pc, r13-r4} = [sp++]


VecMagRecurAvg_fix:
  112038:    d9 e8 70 0f       	[--sp] = {rets, r11-r8, r6-r4}
  11203c:    50 ec 20 20       	r3_r2 = d[r2+0x0]
  112040:    d0 ec 04 a0       	r10 = [r0+0x4]
  112044:    c0 e1 a3 a0       	r10 = r10 << 0x3
  112048:    3a e1 fc af       	r10 = r10 + -0x4
  11204c:    aa e1 40 a8       	r10 <= insert(r10, p:0x10, l:0x10)
  112050:    d0 ec 14 b0       	r11 = [r1+0x4]
  112054:    c0 f1 b2 b0       	r11 = r11 << 0x2  #
  112058:    15 63             		 r5 = [r1+0xc] 
  11205a:    d0 ec 0c 80       	r8 = [r0+0xc]
  11205e:    c0 f1 81 80       	r8 = r8 << 0x1  #
  112062:    04 60             		 r4 = [r0+0x0] 
  112064:    b4 f0 52 68       	r6 = r5 - r8  #
  112068:    00 64             		 r0 = [r0+0x10] 
  11206a:    11 64             	r1 = [r1+0x10] 
  11206c:    f4 03             	rep 0x20 r4 {
  11206e:    61 e9 01 90       		r9_r8 = [r0 ++= 0x4]*[r0 ++= 0x4] (s)
  112072:    e4 e8 0a 90       		r9_r8 += [r0 ++= r10.h]*[r0 ++= r10.l] (s)
  112076:    dc f1 03 86       		r9_r8 ><= r6 (sat)  #
  11207a:    15 60             			 r5 = [r1+0x0] 
  11207c:    b4 e0 82 85       		r8 = r8 - r5
  112080:    f8 e1 80 92       		r9_r8 = r8 * r2 (s)
  112084:    df e1 81 83       		r8 = r9_r8 >> r3 (s)
  112088:    58 18             		r8 += r5
  11208a:    de ec 13 8b       		[r1++=r11] = r8
                               	}
  11208e:    f4 4e             	if (r4 != 0) goto -0x24 <VecMagRecurAvg_fix+0x34 : 11206c >
  112090:    d5 e8 70 0f       	{pc, r11-r8, r6-r4} = [sp++]


VecPlusMulScalar_fix:
  112094:    7d 04             	[--sp] = {rets, r13-r4}
  112096:    50 ec 20 80       	r9_r8 = d[r2+0x0]
  11209a:    d0 ec 04 b0       	r11 = [r0+0x4]
  11209e:    c0 e1 b3 b0       	r11 = r11 << 0x3
  1120a2:    d0 ec 30 a0       	r10 = [r3+0x0]
  1120a6:    3b f1 fc bf       	r11 = r11 + -0x4  #
  1120aa:    00 64             		 r0 = [r0+0x10] 
  1120ac:    d0 ec 14 c0       	r12 = [r1+0x4]
  1120b0:    c0 f1 c3 c0       	r12 = r12 << 0x3  #
  1120b4:    11 64             		 r1 = [r1+0x10] 
  1120b6:    3c e1 fc cf       	r12 = r12 + -0x4
  1120ba:    d0 ec 34 d0       	r13 = [r3+0x4]
  1120be:    c0 f1 d3 d0       	r13 = r13 << 0x3  #
  1120c2:    33 64             		 r3 = [r3+0x10] 
  1120c4:    3d e1 fc df       	r13 = r13 + -0x4
  1120c8:    da 03             	rep 0x1c r10 {
  1120ca:    e0 ee 11 58       		r5_r4 = [r1 ++= 0x4]*r8 (s)
  1120ce:    df f1 41 49       		r4 = r5_r4 >> r9 (s)  #
  1120d2:    02 05             			 r2 = [r0++=0x4] 
  1120d4:    c4 1c             		r4 = r4 + r2
  1120d6:    60 ee 1c 78       		r7_r6 = [r1 ++= r12]*r8  (s)
  1120da:    df f1 61 69       		r6 = r7_r6 >> r9 (s)  #
  1120de:    82 09             			 r2 = [r0++=r11] 
  1120e0:    e6 dc             		r6 = r6 + r2  #
  1120e2:    b4 05             			 [r3++=0x4] = r4
  1120e4:    be 0a             		[r3++=r13] = r6
                               	}
  1120e6:    8a f8 ef 01       	if (r10 != 0x0) goto -0x22 <VecPlusMulScalar_fix+0x34 : 1120c8 >
  1120ea:    5d 04             	{pc, r13-r4} = [sp++]


VecGetMag_fix:
  1120ec:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}
  1120f0:    03 61             	r3 = [r0+0x4] 
  1120f2:    c0 f1 33 30       	r3 = r3 << 0x3  #
  1120f6:    06 63             		 r6 = [r0+0xc] 
  1120f8:    33 f1 fc 3f       	r3 = r3 + -0x4  #
  1120fc:    00 64             		 r0 = [r0+0x10] 
  1120fe:    c0 f1 30 31       	r3 = r3 << 0x10  #
  112102:    12 60             		 r2 = [r1+0x0] 
  112104:    d0 ec 14 80       	r8 = [r1+0x4]
  112108:    96 63             	[r1+0xc] = r6
  11210a:    c0 f1 82 80       	r8 = r8 << 0x2  #
  11210e:    11 64             		 r1 = [r1+0x10] 
  112110:    62 03             	rep 0xe r2 {
  112112:    61 e9 01 50       		r5_r4 = [r0 ++= 0x4]*[r0 ++= 0x4] (s)
  112116:    e4 e8 03 50       		r5_r4 += [r0 ++= r3.h]*[r0 ++= r3.l] (s)
  11211a:    df e1 41 46       		r4 = r5_r4 >> r6 (s)
  11211e:    1c 08             		[r1++=r8] = r4
                               	}
  112120:    f2 57             	if (r2 != 0) goto -0x12 <VecGetMag_fix+0x24 : 112110 >
  112122:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]


VecMax_fix_v_s:
  112126:    74 04             	[--sp] = {rets, r4}
  112128:    00 60             	r0 = [r0+0x0] 
  11212a:    12 61             	r2 = [r1+0x4] 
  11212c:    c0 f1 22 20       	r2 = r2 << 0x2  #
  112130:    13 60             		 r3 = [r1+0x0] 
  112132:    11 64             	r1 = [r1+0x10] 
  112134:    53 03             	rep 0xc r3 {
  112136:    14 60             		r4 = [r1+0x0] 
  112138:    94 ed 00 10       		ifs (r4 < r0) {
  11213c:    de ec 13 02       			[r1++=r2] = r0
                               	} else {
  112140:    91 1c             			r1 = r1 + r2
                               	}
                               	}
  112142:    f3 58             	if (r3 != 0) goto -0x10 <VecMax_fix_v_s+0xE : 112134 >
  112144:    54 04             	{pc, r4} = [sp++]


VecMin_fix_v_s:
  112146:    74 04             	[--sp] = {rets, r4}
  112148:    00 60             	r0 = [r0+0x0] 
  11214a:    12 61             	r2 = [r1+0x4] 
  11214c:    c0 f1 22 20       	r2 = r2 << 0x2  #
  112150:    13 60             		 r3 = [r1+0x0] 
  112152:    11 64             	r1 = [r1+0x10] 
  112154:    53 03             	rep 0xc r3 {
  112156:    14 60             		r4 = [r1+0x0] 
  112158:    14 ee 00 10       		ifs (r4 > r0) {
  11215c:    de ec 13 02       			[r1++=r2] = r0
                               	} else {
  112160:    91 1c             			r1 = r1 + r2
                               	}
                               	}
  112162:    f3 58             	if (r3 != 0) goto -0x10 <VecMin_fix_v_s+0xE : 112154 >
  112164:    54 04             	{pc, r4} = [sp++]


VecOppos_fix:
  112166:    d9 e8 30 03       	[--sp] = {rets, r9, r8, r5, r4}
  11216a:    d0 ec 14 90       	r9 = [r1+0x4]
  11216e:    d0 ec 04 80       	r8 = [r0+0x4]
  112172:    c0 f1 92 90       	r9 = r9 << 0x2  #
  112176:    00 64             		 r0 = [r0+0x10] 
  112178:    c0 f1 82 80       	r8 = r8 << 0x2  #
  11217c:    12 60             		 r2 = [r1+0x0] 
  11217e:    11 64             	r1 = [r1+0x10] 
  112180:    72 03             	rep 0x10 r2 {
  112182:    04 08             		r4 = [r0++=r8] 
  112184:    a4 f0 00 40       		r4 = 0x0 - r4  #
  112188:    05 08             			 r5 = [r0++=r8] 
  11218a:    a5 f0 00 50       		r5 = 0x0 - r5  #
  11218e:    9c 08             			 [r1++=r9] = r4
  112190:    9d 08             		[r1++=r9] = r5
                               	}
  112192:    02 fe f5 01       	ifs (r2 > 0x0) goto -0x16 <VecOppos_fix+0x1A : 112180 >
  112196:    d5 e8 30 03       	{pc, r9, r8, r5, r4} = [sp++]


VecMean_fix:
  11219a:    77 04             	[--sp] = {rets, r7-r4}
  11219c:    42 21             	r2 = 0x1
  11219e:    04 63             	r4 = [r0+0xc] 
  1121a0:    94 61             	[r1+0x4] = r4
  1121a2:    06 61             	r6 = [r0+0x4] 
  1121a4:    c0 f1 62 60       	r6 = r6 << 0x2  #
  1121a8:    07 60             		 r7 = [r0+0x0] 
  1121aa:    f3 f0 01 70       	r3 = r7 - 0x1  #
  1121ae:    00 64             		 r0 = [r0+0x10] 
  1121b0:    60 ee 06 52       	r5_r4 = [r0 ++= r6]*r2  (s)
  1121b4:    13 03             	rep 0x4 r3 {
  1121b6:    64 ee 06 52       		r5_r4 += [r0 ++= r6]*r2  (s)
                               	}
  1121ba:    f3 5c             	if (r3 != 0) goto -0x8 <VecMean_fix+0x1A : 1121b4 >
  1121bc:    f6 e1 40 57       	r5_r4 = r5_r4 / r7 (s)
  1121c0:    94 60             	[r1+0x0] = r4
  1121c2:    57 04             	{pc, r7-r4} = [sp++]


VecMeanSq_fix_r:
  1121c4:    77 04             	[--sp] = {rets, r7-r4}
  1121c6:    04 63             	r4 = [r0+0xc] 
  1121c8:    94 61             	[r1+0x4] = r4
  1121ca:    07 63             	r7 = [r0+0xc] 
  1121cc:    06 60             	r6 = [r0+0x0] 
  1121ce:    f2 f0 01 60       	r2 = r6 - 0x1  #
  1121d2:    03 61             		 r3 = [r0+0x4] 
  1121d4:    c0 f1 32 31       	r3 = r3 << 0x12  #
  1121d8:    00 64             		 r0 = [r0+0x10] 
  1121da:    e0 e8 03 50       	r5_r4 = [r0 ++= r3.h]*[r0 ++= r3.l] (s)
  1121de:    12 03             	rep 0x4 r2 {
  1121e0:    e4 e8 03 50       		r5_r4 += [r0 ++= r3.h]*[r0 ++= r3.l] (s)
                               	}
  1121e4:    f2 5c             	if (r2 != 0) goto -0x8 <VecMeanSq_fix_r+0x1A : 1121de >
  1121e6:    d8 e1 03 47       	r5_r4 >>>= r7
  1121ea:    f6 e1 40 56       	r5_r4 = r5_r4 / r6 (s)
  1121ee:    94 60             	[r1+0x0] = r4
  1121f0:    57 04             	{pc, r7-r4} = [sp++]


VecMeanSq_fix_c:
  1121f2:    d9 e8 70 01       	[--sp] = {rets, r8, r6-r4}
  1121f6:    d0 ec 04 80       	r8 = [r0+0x4]
  1121fa:    c0 f1 83 80       	r8 = r8 << 0x3  #
  1121fe:    03 60             		 r3 = [r0+0x0] 
  112200:    38 f1 fc 8f       	r8 = r8 + -0x4  #
  112204:    06 63             		 r6 = [r0+0xc] 
  112206:    06 f1 01 60       	r6 = r6 + 0x1  #
  11220a:    00 64             		 r0 = [r0+0x10] 
  11220c:    c0 e1 80 81       	r8 = r8 << 0x10
  112210:    f2 e0 01 30       	r2 = r3 - 0x1
  112214:    61 e9 01 50       	r5_r4 = [r0 ++= 0x4]*[r0 ++= 0x4] (s)
  112218:    e4 e8 08 50       	r5_r4 += [r0 ++= r8.h]*[r0 ++= r8.l] (s)
  11221c:    32 03             	rep 0x8 r2 {
  11221e:    e1 e9 01 50       		r5_r4 += [r0 ++= 0x4]*[r0 ++= 0x4] (s)
  112222:    e4 e8 08 50       		r5_r4 += [r0 ++= r8.h]*[r0 ++= r8.l] (s)
                               	}
  112226:    f2 5a             	if (r2 != 0) goto -0xc <VecMeanSq_fix_c+0x2A : 11221c >
  112228:    d8 e1 02 46       	r5_r4 >>= r6
  11222c:    f6 e1 40 53       	r5_r4 = r5_r4 / r3 (s)
  112230:    36 f1 fe 6f       	r6 = r6 + -0x2  #
  112234:    94 60             		 [r1+0x0] = r4
  112236:    96 61             	[r1+0x4] = r6
  112238:    d5 e8 70 01       	{pc, r8, r6-r4} = [sp++]


VecRequanByMax_fix_r:
  11223c:    7a 04             	[--sp] = {rets, r10-r4}
  11223e:    fa 21             	r2 += -0x1f
  112240:    04 63             	r4 = [r0+0xc] 
  112242:    94 63             	[r1+0xc] = r4
  112244:    1a 16             	r10 = r1
  112246:    d0 ec 04 80       	r8 = [r0+0x4]
  11224a:    c0 f1 82 80       	r8 = r8 << 0x2  #
  11224e:    00 64             		 r0 = [r0+0x10] 
  112250:    d0 ec 14 90       	r9 = [r1+0x4]
  112254:    c0 f1 92 90       	r9 = r9 << 0x2  #
  112258:    13 60             		 r3 = [r1+0x0] 
  11225a:    11 64             	r1 = [r1+0x10] 
  11225c:    04 16             	r4 = r0
  11225e:    45 20             	r5 = 0x0
  112260:    37 16             	r7 = r3
  112262:    77 03             	rep 0x10 r7 {
  112264:    46 08             		r6 = [r4++=r8] 
  112266:    a6 ed 00 00       		ifs (r6 < 0x0) {
  11226a:    a6 e0 00 60       			r6 = 0x0 - r6
                               	}
  11226e:    16 ee 00 05       		ifs (r6 > r5) {
  112272:    65 16             			r5 = r6
                               	}
                               	}
  112274:    f7 56             	if (r7 != 0) goto -0x14 <VecRequanByMax_fix_r+0x26 : 112262 >
  112276:    80 e1 00 75       	r7 = clz(r5)
  11227a:    aa 1d             	r2 = r2 + r7
  11227c:    22 ee 1e 00       	ifs (r2 > 0x1e) {
  112280:    42 3e             		r2 = 0x1e
                               	}
  112282:    b2 ed e2 0f       	ifs (r2 < -0x1e) {
  112286:    12 22             		r2 = -0x1e
                               	}
  112288:    25 e8 00 00       	if (r5 == 0x0) {
  11228c:    42 20             		r2 = 0x0
                               	}
  11228e:    33 03             	rep 0x8 r3 {
  112290:    04 08             		r4 = [r0++=r8] 
  112292:    cc e1 43 42       		r4 = r4 >< r2 (sat)
  112296:    9c 08             		[r1++=r9] = r4
                               	}
  112298:    f3 5a             	if (r3 != 0) goto -0xc <VecRequanByMax_fix_r+0x52 : 11228e >
  11229a:    68 e8 0c a2       	[r10+0xc] += r2
  11229e:    5a 04             	{pc, r10-r4} = [sp++]


VecRequanByMax_fix_c:
  1122a0:    7a 04             	[--sp] = {rets, r10-r4}
  1122a2:    fa 21             	r2 += -0x1f
  1122a4:    04 63             	r4 = [r0+0xc] 
  1122a6:    94 63             	[r1+0xc] = r4
  1122a8:    1a 16             	r10 = r1
  1122aa:    d0 ec 04 80       	r8 = [r0+0x4]
  1122ae:    c0 f1 83 80       	r8 = r8 << 0x3  #
  1122b2:    00 64             		 r0 = [r0+0x10] 
  1122b4:    38 e1 fc 8f       	r8 = r8 + -0x4
  1122b8:    d0 ec 14 90       	r9 = [r1+0x4]
  1122bc:    c0 f1 93 90       	r9 = r9 << 0x3  #
  1122c0:    13 60             		 r3 = [r1+0x0] 
  1122c2:    39 e1 fc 9f       	r9 = r9 + -0x4
  1122c6:    11 64             	r1 = [r1+0x10] 
  1122c8:    04 16             	r4 = r0
  1122ca:    45 20             	r5 = 0x0
  1122cc:    37 16             	r7 = r3
  1122ce:    46 05             	r6 = [r4++=0x4] 
  1122d0:    a6 ed 00 00       	ifs (r6 < 0x0) {
  1122d4:    a6 e0 00 60       		r6 = 0x0 - r6
                               	}
  1122d8:    16 ee 00 05       	ifs (r6 > r5) {
  1122dc:    65 16             		r5 = r6
                               	}
  1122de:    46 08             	r6 = [r4++=r8] 
  1122e0:    a6 ed 00 00       	ifs (r6 < 0x0) {
  1122e4:    a6 e0 00 60       		r6 = 0x0 - r6
                               	}
  1122e8:    16 ee 00 05       	ifs (r6 > r5) {
  1122ec:    65 16             		r5 = r6
                               	}
  1122ee:    07 ea ee ff       	if (--r7 != 0) goto -0x24 <VecRequanByMax_fix_c+0x2E : 1122ce >
  1122f2:    80 e1 00 75       	r7 = clz(r5)
  1122f6:    aa 1d             	r2 = r2 + r7
  1122f8:    22 ee 1e 00       	ifs (r2 > 0x1e) {
  1122fc:    42 3e             		r2 = 0x1e
                               	}
  1122fe:    b2 ed e2 0f       	ifs (r2 < -0x1e) {
  112302:    12 22             		r2 = -0x1e
                               	}
  112304:    25 e8 00 00       	if (r5 == 0x0) {
  112308:    42 20             		r2 = 0x0
                               	}
  11230a:    73 03             	rep 0x10 r3 {
  11230c:    04 05             		r4 = [r0++=0x4] 
  11230e:    cc f1 43 42       		r4 = r4 >< r2 (sat)  #
  112312:    05 08             			 r5 = [r0++=r8] 
  112314:    cc f1 53 52       		r5 = r5 >< r2 (sat)  #
  112318:    94 05             			 [r1++=0x4] = r4
  11231a:    9d 08             		[r1++=r9] = r5
                               	}
  11231c:    f3 56             	if (r3 != 0) goto -0x14 <VecRequanByMax_fix_c+0x6A : 11230a >
  11231e:    68 e8 0c a2       	[r10+0xc] += r2
  112322:    5a 04             	{pc, r10-r4} = [sp++]


VecEleShift_fix_r:
  112324:    d9 e8 10 03       	[--sp] = {rets, r9, r8, r4}
  112328:    d0 ec 04 80       	r8 = [r0+0x4]
  11232c:    c0 f1 82 80       	r8 = r8 << 0x2  #
  112330:    00 64             		 r0 = [r0+0x10] 
  112332:    d0 ec 14 90       	r9 = [r1+0x4]
  112336:    c0 f1 92 90       	r9 = r9 << 0x2  #
  11233a:    13 60             		 r3 = [r1+0x0] 
  11233c:    11 64             	r1 = [r1+0x10] 
  11233e:    33 03             	rep 0x8 r3 {
  112340:    04 08             		r4 = [r0++=r8] 
  112342:    cc e1 43 42       		r4 = r4 >< r2 (sat)
  112346:    9c 08             		[r1++=r9] = r4
                               	}
  112348:    03 fe f9 01       	ifs (r3 > 0x0) goto -0xe <VecEleShift_fix_r+0x1A : 11233e >
  11234c:    d5 e8 10 03       	{pc, r9, r8, r4} = [sp++]


VecEleShift_fix_c:
  112350:    d9 e8 30 03       	[--sp] = {rets, r9, r8, r5, r4}
  112354:    d0 ec 04 80       	r8 = [r0+0x4]
  112358:    c0 f1 83 80       	r8 = r8 << 0x3  #
  11235c:    00 64             		 r0 = [r0+0x10] 
  11235e:    38 f1 fc 8f       	r8 = r8 + -0x4  #
  112362:    13 60             		 r3 = [r1+0x0] 
  112364:    d0 ec 14 90       	r9 = [r1+0x4]
  112368:    c0 f1 93 90       	r9 = r9 << 0x3  #
  11236c:    11 64             		 r1 = [r1+0x10] 
  11236e:    39 e1 fc 9f       	r9 = r9 + -0x4
  112372:    73 03             	rep 0x10 r3 {
  112374:    04 05             		r4 = [r0++=0x4] 
  112376:    cc f1 43 42       		r4 = r4 >< r2 (sat)  #
  11237a:    05 08             			 r5 = [r0++=r8] 
  11237c:    cc f1 53 52       		r5 = r5 >< r2 (sat)  #
  112380:    94 05             			 [r1++=0x4] = r4
  112382:    9d 08             		[r1++=r9] = r5
                               	}
  112384:    03 fe f5 01       	ifs (r3 > 0x0) goto -0x16 <VecEleShift_fix_c+0x22 : 112372 >
  112388:    d5 e8 30 03       	{pc, r9, r8, r5, r4} = [sp++]


CircVecArrEwMulAndSum_fix:
  11238c:    7f 04             	[--sp] = {rets, r15-r4}
  11238e:    d8 e8 ff ff       	[--sp] = {r15-r0}
  112392:    e0 04             	[--sp] = {psr}
  112394:    64 e0 00 45       	r4 = psr
  112398:    44 e1 20 4e       	r4 = r4 | 0xA00
  11239c:    64 e0 80 45       	psr = r4
  1123a0:    d0 ec 18 d0       	r13 = [r1+0x8]
  1123a4:    c0 e1 d3 d4       	r13 = r13 <<< 0x3
  1123a8:    d8 e8 00 20       	[--sp] = {r13}
  1123ac:    d0 ec 00 a0       	r10 = [r0+0x0]
  1123b0:    d0 ec 10 80       	r8 = [r1+0x0]
  1123b4:    d0 ec 00 92       	r9 = [r0+0x20]
  1123b8:    b4 f0 92 9a       	r9 = r9 - r10  #
  1123bc:    14 68             		 r4 = [r1+0x20] 
  1123be:    b4 e0 42 48       	r4 = r4 - r8
  1123c2:    d0 ec 08 d1       	r13 = [r0+0x18]
  1123c6:    c0 f1 d3 d5       	r13 = r13 <<< 0x13  #
  1123ca:    07 66             		 r7 = [r0+0x18] 
  1123cc:    7f a3             	r7 = r7 <<< 0x3
  1123ce:    ff 3c             	r7 += -0x4
  1123d0:    90 e1 d0 d7       	r13 = r13 | r7
  1123d4:    c0 f1 90 95       	r9 = r9 <<< 0x10  #
  1123d8:    27 61             		 r7 = [r2+0x4] 
  1123da:    90 f1 90 94       	r9 = r9 | r4  #
  1123de:    16 65             		 r6 = [r1+0x14] 
  1123e0:    d0 ec 10 f1       	r15 = [r1+0x10]
  1123e4:    d0 ec 08 e0       	r14 = [r0+0x8]
  1123e8:    d0 ec 20 c0       	r12 = [r2+0x0]
  1123ec:    d0 ec 0c b1       	r11 = [r0+0x1c]
  1123f0:    3b f1 ff bf       	r11 = r11 + -0x1  #
  1123f4:    04 65             		 r4 = [r0+0x14] 
  1123f6:    d8 e8 00 08       	[--sp] = {r11}
  1123fa:    c0 e1 e3 e4       	r14 = r14 <<< 0x3
  1123fe:    7f a3             	r7 = r7 <<< 0x3
  112400:    ff 3c             	r7 += -0x4
  112402:    25 64             	r5 = [r2+0x10] 
  112404:    61 e9 41 16       	r1_r0 = [r4 ++= 0x4]*[r6 ++= 0x4] (s)
  112408:    6f ec 40 16       	r1_r0 -= [r4 ++= 0x0]*[r6 ++= -0x4] (s)
  11240c:    61 e9 4f 36       	r3_r2 = [r4 ++= -0x4]*[r6 ++= 0x4] (s)
  112410:    e4 e8 4d 36       	r3_r2 += [r4 ++= r13.h]*[r6 ++= r13.l] (s)
  112414:    0b 20             	r11 = [sp]
  112416:    7b 03             	rep 0x10 r11 {
  112418:    e1 e9 41 16       		r1_r0 += [r4 ++= 0x4]*[r6 ++= 0x4] (s)
  11241c:    6f ec 40 16       		r1_r0 -= [r4 ++= 0x0]*[r6 ++= -0x4] (s)
  112420:    e1 e9 4f 36       		r3_r2 += [r4 ++= -0x4]*[r6 ++= 0x4] (s)
  112424:    e4 e8 4d 36       		r3_r2 += [r4 ++= r13.h]*[r6 ++= r13.l] (s)
                               	}
  112428:    8b f8 f5 01       	if (r11 != 0x0) goto -0x16 <CircVecArrEwMulAndSum_fix+0x8A : 112416 >
  11242c:    df e1 01 0f       	r0 = r1_r0 >> r15 (s)
  112430:    df f1 21 2f       	r2 = r3_r2 >> r15 (s)  #
  112434:    d0 05             		 [r5++=0x4] = r0
  112436:    de ec 53 27       	[r5++=r7] = r2
  11243a:    d0 16             	r0 = r13
  11243c:    e4 d8             	r4 += r14  #
  11243e:    0d 21             		 r13 = [sp+4]
  112440:    d6 18             	r6 += r13
  112442:    ea 18             	r10 += r14
  112444:    d8 18             	r8 += r13
  112446:    0d 16             	r13 = r0
  112448:    0c ea dc ff       	if (--r12 != 0) goto -0x48 <CircVecArrEwMulAndSum_fix+0x78 : 112404 >
  11244c:    02 82             	sp += 0x8
  11244e:    a0 04             	{psr} = [sp++]
  112450:    d4 e8 ff ff       	{r15-r0} = [sp++]
  112454:    5f 04             	{pc, r15-r4} = [sp++]


logAprx_fix:
  112456:    d9 e8 d0 00       	[--sp] = {rets, r7, r6, r4}
  11245a:    02 61             	r2 = [r0+0x4] 
  11245c:    43 38             	r3 = 0x18
  11245e:    a2 f0 18 20       	r2 = 0x18 - r2  #
  112462:    93 61             		 [r1+0x4] = r3
  112464:    00 60             	r0 = [r0+0x0] 
  112466:    14 60             	r4 = [r1+0x0] 
  112468:    27 16             	r7 = r2
  11246a:    06 16             	r6 = r0
  11246c:    ff e1              <unkown instruction>
  11246e:    17 66             	r7 = [r1+0x18] 
  112470:    64 16             	r4 = r6
  112472:    24 e8 00 00       	if (r4 == 0x0) {
  112476:    43 20             		r3 = 0x0
                               	}
  112478:    94 60             	[r1+0x0] = r4
  11247a:    93 61             	[r1+0x4] = r3
  11247c:    d5 e8 d0 00       	{pc, r7, r6, r4} = [sp++]


expAprx_fix:
  112480:    77 04             	[--sp] = {rets, r7-r4}
  112482:    02 60             	r2 = [r0+0x0] 
  112484:    00 61             	r0 = [r0+0x4] 
  112486:    a0 f0 18 00       	r0 = 0x18 - r0  #
  11248a:    13 61             		 r3 = [r1+0x4] 
  11248c:    15 36             	r5 = -0xa
  11248e:    55 b8             	r5 = r5 << 0x18
  112490:    cc e1 23 40       	r4 = r2 >< r0 (sat)
  112494:    94 ed 00 05       	ifs (r4 < r5) {
  112498:    54 16             		r4 = r5
                               	}
  11249a:    ff e1              <unkown instruction>
  11249c:    0f 44             	r7 = b[r0+0x4] (u)
  11249e:    b3 e1 18 5d       	r3 = uextra(r5, p:0x1a, l:0x6)
  1124a2:    b5 e1 69 50       	r5 = sextra(r5, p:0x0, l:0x1a)
  1124a6:    f8 e1 40 55       	r5_r4 = r4 * r5 (s)
  1124aa:    80 e1 00 65       	r6 = clz(r5)
  1124ae:    26 e8 20 40       	if (r6 == 0x20) {
  1124b2:    80 e1 00 74       		r7 = clz(r4)
  1124b6:    ee 1d             		r6 = r6 + r7
                               	}
  1124b8:    f6 3d             	r6 += -0x23
  1124ba:    dc e1 03 46       	r5_r4 ><= r6 (sat)
  1124be:    3b 98             	r3 = r3 + 0x18
  1124c0:    b3 1d             	r3 = r3 + r6
  1124c2:    24 e8 00 00       	if (r4 == 0x0) {
  1124c6:    43 20             		r3 = 0x0
                               	}
  1124c8:    40 16             	r0 = r4
  1124ca:    21 eb 09 00       	[r1+] = {r3, r0}
  1124ce:    57 04             	{pc, r7-r4} = [sp++]


sqrtAprx_fix:
  1124d0:    77 04             	[--sp] = {rets, r7-r4}
  1124d2:    00 eb 05 00       	{r2, r0} = [r0+]
  1124d6:    c3 ff f3 04 b5 00 	r3 = 0xb504f3 <__stub_LZ4_decompress_safe_continue+0xA384F6 : b504f2 >
  1124dc:    c4 ff 72 e8 51 13 	r4 = 0x1351e872 <__stub_LZ4_decompress_safe_continue+0x13406876 : 1351e872 >
  1124e2:    06 16             	r6 = r0
  1124e4:    47 20             	r7 = 0x0
  1124e6:    25 16             	r5 = r2
  1124e8:    a5 ed 00 00       	ifs (r5 < 0x0) {
  1124ec:    a5 e0 00 50       		r5 = 0x0 - r5
                               	}
  1124f0:    ff e1              <unkown instruction>
  1124f2:    1b 66             	r3 = h[r1+0xc] (u)
  1124f4:    55 e8 04 00       	if ((r5 & 0x1) == 0) goto 0x8 <sqrtAprx_fix+0x30 : 112500 >
  1124f8:    f8 e1 60 73       	r7_r6 = r6 * r3 (s)
  1124fc:    de e1 67 69       	r6 = r7_r6 >> 0x17 (s)
  112500:    f8 e1 60 74       	r7_r6 = r6 * r4 (s)
  112504:    ad a1             	r5 = r2 >>> 0x1
  112506:    5a 8f             	r2 = r5 + 0xf
  112508:    de e1 6c 01       	r0 = r7_r6 >> 0x1c (u)
  11250c:    21 eb 05 00       	[r1+] = {r2, r0}
  112510:    57 04             	{pc, r7-r4} = [sp++]


B_iircal:
  112512:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:107:0
  112514:    50 ec 00 80       	r9_r8 = d[r0+0x0]			  ## B_filter.c:133:24
  112518:    c0 28             	r0 += 0x8			  ## B_filter.c:134:27


biir_i_outter_loop:
  11251a:    d4 ed 12 60       	r6 = h[r1++=0x2] (s)			  ## B_filter.c:139:2
  11251e:    07 16             	r7 = r0			  ## B_filter.c:139:2
  112520:    84 16             	r4 = r8			  ## B_filter.c:139:2
  112522:    e0 ee 41 b6       	r11_r10 = [r4 ++= 0x4]*r6 (s)			  ## B_filter.c:139:2
  112526:    10 83             	rep 0x4 0x4 {			  ## B_filter.c:139:2
  112528:    e1 e9 71 b4       		r11_r10 += [r7 ++= 0x4]*[r4 ++= 0x4] (s)
                               	}			  ## B_filter.c:139:2
  11252c:    05 60             	r5 = [r0+0x0] 			  ## B_filter.c:139:2
  11252e:    86 60             	[r0+0x0] = r6			  ## B_filter.c:139:2
  112530:    85 61             	[r0+0x4] = r5			  ## B_filter.c:139:2
  112532:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:139:2
  112536:    06 62             	r6 = [r0+0x8] 			  ## B_filter.c:139:2
  112538:    85 62             	[r0+0x8] = r5			  ## B_filter.c:139:2
  11253a:    86 63             	[r0+0xc] = r6			  ## B_filter.c:139:2
  11253c:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:139:2
  112540:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:139:2
  112542:    03 ea ea ff       	if (--r3 != 0) goto -0x2c <biir_i_outter_loop : 11251a >			  ## B_filter.c:139:2
  112546:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:180:1


B_comput_correlataionS:
  112548:    76 04             	[--sp] = {rets, r6-r4}			  ## B_filter.c:295:0
  11254a:    44 20             	r4 = 0x0			  ## B_filter.c:313:3
  11254c:    45 20             	r5 = 0x0			  ## B_filter.c:313:3


bccs:
  11254e:    32 03             	rep 0x8 r2 {			  ## B_filter.c:313:3
  112550:    d4 ed 12 60       		r6 = h[r1++=0x2] (s)			  ## B_filter.c:313:3
  112554:    ec ee 01 56       		r5_r4 += h[r0 ++= 0x2]*r6 (s)
                               	}			  ## B_filter.c:313:3
  112558:    f2 5a             	if (r2 != 0) goto -0xc <bccs : 11254e >			  ## B_filter.c:313:3
  11255a:    df e1 41 03       	r0 = r5_r4 >> r3 (s)			  ## B_filter.c:336:2
  11255e:    56 04             	{pc, r6-r4} = [sp++]			  ## B_filter.c:337:2


B_fir_cal_s:
  112560:    d9 e8 f0 df       	[--sp] = {rets, r15, r14, r12-r4}			  ## B_filter.c:351:0
  112564:    50 ed 06 c0       	r12 = h[r0+0x6] (u)			  ## B_filter.c:390:2
  112568:    54 ed 04 80       	r8 = h[r0+0x4] (s)			  ## B_filter.c:382:16
  11256c:    d0 ec 0c 90       	r9 = [r0+0xc]			  ## B_filter.c:383:24
  112570:    54 ed 08 a0       	r10 = h[r0+0x8] (s)			  ## B_filter.c:388:32
  112574:    d0 ec 00 b0       	r11 = [r0+0x0]			  ## B_filter.c:380:25
  112578:    38 e1 ff 8f       	r8 = r8 + -0x1			  ## B_filter.c:382:33
  11257c:    c0 e1 91 90       	r9 = r9 << 0x1			  ## B_filter.c:383:30
  112580:    c0 e1 a2 50       	r5 = r10 << 0x2			  ## B_filter.c:388:51
  112584:    35 31             	r5 |= 0x20000			  ## B_filter.c:388:29


fir_s_outter_loop:
  112586:    b7 16             	r7 = r11			  ## B_filter.c:390:2
  112588:    14 16             	r4 = r1			  ## B_filter.c:390:2
  11258a:    e8 e8 45 f7       	r15_r14 = h[r4 ++= r5.h]*[r7 ++= r5.l] (s)			  ## B_filter.c:390:2
  11258e:    86 16             	r6 = r8			  ## B_filter.c:390:2


bccs1:
  112590:    16 03             	rep 0x4 r6 {			  ## B_filter.c:390:2
  112592:    ec e8 45 f7       		r15_r14 += h[r4 ++= r5.h]*[r7 ++= r5.l] (s)
                               	}			  ## B_filter.c:390:2
  112596:    f6 5c             	if (r6 != 0) goto -0x8 <bccs1 : 112590 >			  ## B_filter.c:390:2
  112598:    df e1 e1 ac       	r10 = r15_r14 >> r12 (s)			  ## B_filter.c:390:2
  11259c:    78 e0 01 aa       	r10 = sat16(r10) (s)			  ## B_filter.c:390:2
  1125a0:    d0 ed 23 a0       	h[r2++=0x2] = r10			  ## B_filter.c:390:2
  1125a4:    91 18             	r1 += r9			  ## B_filter.c:390:2
  1125a6:    03 ea ee ff       	if (--r3 != 0) goto -0x24 <fir_s_outter_loop : 112586 >			  ## B_filter.c:390:2
  1125aa:    50 ed 07 c0       	h[r0+0x6] = r12			  ## B_filter.c:390:2
  1125ae:    d5 e8 f0 df       	{pc, r15, r14, r12-r4} = [sp++]			  ## B_filter.c:429:1


B_array_vol:
  1125b2:    42 03             	rep 0xa r2 {			  ## B_filter.c:433:0
  1125b4:    54 ed 00 30       		r3 = h[r0+0x0] (s)			  ## B_filter.c:444:3
  1125b8:    13 1b             		r3 *= r1			  ## B_filter.c:444:3
  1125ba:    bb ad             		r3 = r3 >>> 0xd			  ## B_filter.c:444:3
  1125bc:    83 06             		h[r0++=0x2] = r3
                               	}			  ## B_filter.c:444:3
  1125be:    f2 59             	if (r2 != 0) goto -0xe <B_array_vol : 1125b2 >			  ## B_filter.c:444:3
  1125c0:    80 00             	rts			  ## B_filter.c:463:1


B_Syn_filt:
  1125c2:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:556:0
  1125c4:    d0 e9 24 80       	r9_r8 = d[sp+36]			  ## B_filter.c:556:0


bsy1_s_outter_loop:
  1125c8:    f7 e0 02 20       	r7 = r2 - 0x2			  ## B_filter.c:587:2
  1125cc:    04 16             	r4 = r0			  ## B_filter.c:587:2
  1125ce:    d4 ed 12 50       	r5 = h[r1++=0x2] (s)			  ## B_filter.c:587:2
  1125d2:    e8 ee 41 b5       	r11_r10 = h[r4 ++= 0x2]*r5 (s)			  ## B_filter.c:587:2
  1125d6:    86 16             	r6 = r8			  ## B_filter.c:587:2


bsy1:
  1125d8:    36 03             	rep 0x8 r6 {			  ## B_filter.c:587:2
  1125da:    d7 ed 7e 5f       		r5 = h[r7++=-0x2] (s)			  ## B_filter.c:587:2
  1125de:    ee ee 41 b5       		r11_r10 -= h[r4 ++= 0x2]*r5 (s)
                               	}			  ## B_filter.c:587:2
  1125e2:    f6 5a             	if (r6 != 0) goto -0xc <bsy1 : 1125d8 >			  ## B_filter.c:587:2
  1125e4:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:587:2
  1125e8:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:587:2
  1125ec:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:587:2
  1125ee:    03 ea eb ff       	if (--r3 != 0) goto -0x2a <bsy1_s_outter_loop : 1125c8 >			  ## B_filter.c:587:2
  1125f2:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:625:1


B_Residu:
  1125f4:    7b 04             	[--sp] = {rets, r11-r4}			  ## B_filter.c:641:0
  1125f6:    d0 e9 24 80       	r9_r8 = d[sp+36]			  ## B_filter.c:641:0


brs1_s_outter_loop:
  1125fa:    f7 e0 02 10       	r7 = r1 - 0x2			  ## B_filter.c:669:2
  1125fe:    04 16             	r4 = r0			  ## B_filter.c:669:2
  112600:    d4 ed 12 50       	r5 = h[r1++=0x2] (s)			  ## B_filter.c:669:2
  112604:    e8 ee 41 b5       	r11_r10 = h[r4 ++= 0x2]*r5 (s)			  ## B_filter.c:669:2
  112608:    86 16             	r6 = r8			  ## B_filter.c:669:2


brsy1:
  11260a:    36 03             	rep 0x8 r6 {			  ## B_filter.c:669:2
  11260c:    d7 ed 7e 5f       		r5 = h[r7++=-0x2] (s)			  ## B_filter.c:669:2
  112610:    ec ee 41 b5       		r11_r10 += h[r4 ++= 0x2]*r5 (s)
                               	}			  ## B_filter.c:669:2
  112614:    f6 5a             	if (r6 != 0) goto -0xc <brsy1 : 11260a >			  ## B_filter.c:669:2
  112616:    df e1 a1 59       	r5 = r11_r10 >> r9 (s)			  ## B_filter.c:669:2
  11261a:    78 e0 01 55       	r5 = sat16(r5) (s)			  ## B_filter.c:669:2
  11261e:    a5 06             	h[r2++=0x2] = r5			  ## B_filter.c:669:2
  112620:    03 ea eb ff       	if (--r3 != 0) goto -0x2a <brs1_s_outter_loop : 1125fa >			  ## B_filter.c:669:2
  112624:    5b 04             	{pc, r11-r4} = [sp++]			  ## B_filter.c:707:1


repair_corefun_corr:
  112626:    7f 04             	[--sp] = {rets, r15-r4}			  ## repair_corefun.c:146:0
  112628:    e2 9e             	sp += -0x8			  ## repair_corefun.c:146:0
  11262a:    34 d6             	r4 = r3  #			  ## repair_corefun.c:146:0
  11262c:    80 21             		 [sp+4] = r0			  ## repair_corefun.c:146:0
  11262e:    40 a1             	r0 = r4 << 0x1			  ## repair_corefun.c:152:7
  112630:    d0 e9 3c e0       	r15_r14 = d[sp+60]			  ## repair_corefun.c:152:7
  112634:    84 14             	r5_r4 = 0
  112636:    c2 d4             	r10 = 0  #
  112638:    85 20             		 [sp] = r5
  11263a:    c3 14             	r11 = 0
  11263c:    04 9a             	goto 0x34 <repair_corefun_corr+0x4C : 112672 >
  11263e:    e7 d6             	r7 = r14  #			  ## repair_corefun.c:157:3
  112640:    06 21             		 r6 = [sp+4]			  ## repair_corefun.c:157:3
  112642:    15 16             	r5 = r1			  ## repair_corefun.c:157:3
  112644:    ac 16             	r12 = r10			  ## repair_corefun.c:157:3
  112646:    c5 14             	r13 = 0			  ## repair_corefun.c:157:3
  112648:    77 03             	rep 0x10 r7 {			  ## repair_corefun.c:157:3
  11264a:    d4 ed 52 80       		r8 = h[r5++=0x2] (s)			  ## repair_corefun.c:157:3
  11264e:    d4 ed 62 90       		r9 = h[r6++=0x2] (s)			  ## repair_corefun.c:157:3
  112652:    b4 e0 82 89       		r8 = r8 - r9			  ## repair_corefun.c:157:3
  112656:    fc e1 80 d8       		r13_r12 += r8 * r8 (s)
                               	}			  ## repair_corefun.c:157:3
  11265a:    f7 56             	if (r7 != 0) goto -0x14 <repair_corefun_corr+0x22 : 112648 >			  ## repair_corefun.c:157:3
  11265c:    d0 ec f0 50       	r5 = [r15+0x0]			  ## repair_corefun.c:158:18
  112660:    d0 e1 08 c8       	r13_r12 >>= 0x8			  ## repair_corefun.c:157:3
  112664:    9c e9 00 45       	if (r12 < r5) {
  112668:    d0 ec f1 c0       		[r15+0x0] = r12			  ## repair_corefun.c:160:15
  11266c:    84 20             		[sp] = r4
                               	}			  ## repair_corefun.c:160:15
  11266e:    01 18             	r1 += r0			  ## repair_corefun.c:152:2
  112670:    34 18             	r4 += r3			  ## repair_corefun.c:152:32
  112672:    82 ed e4 41       	ifs (r4 < r2) goto -0x38 <repair_corefun_corr+0x18 : 11263e >
  112676:    00 20             	r0 = [sp]			  ## repair_corefun.c:165:2
  112678:    02 82             	sp += 0x8
  11267a:    5f 04             	{pc, r15-r4} = [sp++]			  ## repair_corefun.c:165:2


repair_corefun_mixdata:
  11267c:    7a 04             	[--sp] = {rets, r10-r4}			  ## repair_corefun.c:170:0
  11267e:    37 d6             	r7 = r3  #			  ## repair_corefun.c:171:2
  112680:    04 29             		 r4 = [sp+36]			  ## repair_corefun.c:171:2
  112682:    d4 e9 20 a0       	r10 = [sp+32]
  112686:    44 a1             	r4 = r4 << 0x1			  ## repair_corefun.c:171:2
  112688:    46 20             	r6 = 0x0			  ## repair_corefun.c:171:2
  11268a:    97 03             	rep 0x14 r7 {			  ## repair_corefun.c:171:2
  11268c:    68 ee 14 96       		r9_r8 = h[r1 ++= r4]*r6  (s)			  ## repair_corefun.c:171:2
  112690:    6c ee 24 93       		r9_r8 += h[r2 ++= r4]*r3  (s)			  ## repair_corefun.c:171:2
  112694:    df e1 81 5a       		r5 = r9_r8 >> r10 (s)			  ## repair_corefun.c:171:2
  112698:    de ed 01 54       		h[r0++=r4] = r5			  ## repair_corefun.c:171:2
  11269c:    6e 81             		r6 = r6 + 0x1			  ## repair_corefun.c:171:2
  11269e:    fb 3f             		r3 += -0x1
                               	}			  ## repair_corefun.c:171:2
  1126a0:    f7 54             	if (r7 != 0) goto -0x18 <repair_corefun_mixdata+0xE : 11268a >			  ## repair_corefun.c:171:2
  1126a2:    5a 04             	{pc, r10-r4} = [sp++]			  ## repair_corefun.c:172:2


get_repair_api:
  1126a4:    c0 ff 14 2a 11 00 	r0 = 0x112a14 <BT15_REPAIR_API_OBJ : 112a14 >			  ## BT15_repair.c:500:0
  1126aa:    80 00             	rts			  ## BT15_repair.c:501:2


need_size:
  1126ac:    40 e0 10 04       	r0 = 0x410			  ## BT15_repair.c:361:0
  1126b0:    80 00             	rts			  ## BT15_repair.c:362:2


repair_open:
  1126b2:    75 04             	[--sp] = {rets, r5, r4}			  ## BT15_repair.c:366:0
  1126b4:    04 16             	r4 = r0			  ## BT15_repair.c:366:0
  1126b6:    41 20             	r1 = 0x0			  ## BT15_repair.c:368:2
  1126b8:    42 e0 10 04       	r2 = 0x410			  ## BT15_repair.c:368:2
  1126bc:    45 20             	r5 = 0x0			  ## BT15_repair.c:368:2
  1126be:    bf ea 4c f6       	call -0x1368 <memset : 11135a >			  ## BT15_repair.c:368:2
  1126c2:    41 e0 c4 01       	r1 = 0x1c4			  ## BT15_repair.c:369:23
  1126c6:    02 e1 00 44       	r2 = r4 + 0x400			  ## BT15_repair.c:369:23
  1126ca:    40 f0 00 02       	r0 = 0x200  #			  ## BT15_repair.c:369:14
  1126ce:    a9 60             		 h[r2+0x0] = r1			  ## BT15_repair.c:369:23
  1126d0:    ad 4a             	b[r2+0xa] = r5			  ## BT15_repair.c:370:25
  1126d2:    a8 66             	h[r2+0xc] = r0			  ## BT15_repair.c:371:21
  1126d4:    55 04             	{pc, r5, r4} = [sp++]			  ## BT15_repair.c:372:1


repair_fun:
  1126d6:    7f 04             	[--sp] = {rets, r15-r4}			  ## BT15_repair.c:479:0
  1126d8:    e2 94             	sp += -0x30			  ## BT15_repair.c:479:0
  1126da:    1c d6             	r12 = r1  #			  ## BT15_repair.c:479:0
  1126dc:    06 39             		 r6 = [sp+100]			  ## BT15_repair.c:479:0
  1126de:    07 16             	r7 = r0			  ## BT15_repair.c:479:0
  1126e0:    30 e1 fe 7d       	r0 = r7 + -0x202			  ## BT15_repair.c:482:2
  1126e4:    35 d6             	r5 = r3  #			  ## BT15_repair.c:482:2
  1126e6:    80 23             		 [sp+12] = r0			  ## BT15_repair.c:482:2
  1126e8:    30 e1 de 7f       	r0 = r7 + -0x22			  ## BT15_repair.c:482:2
  1126ec:    29 d6             	r9 = r2  #			  ## BT15_repair.c:482:2
  1126ee:    80 22             		 [sp+8] = r0
  1126f0:    44 20             	r4 = 0x0
  1126f2:    d0 e9 19 60       	d[sp+24] = r7_r6
  1126f6:    0b f1 00 74       	r11 = r7 + 0x400  #
  1126fa:    82 25             		 [sp+20] = r2
  1126fc:    81 24             	[sp+16] = r1
  1126fe:    c4 82             	goto 0x304 <repair_fun+0x32E : 112a04 >
  112700:    41 a1             	r1 = r4 << 0x1			  ## BT15_repair.c:486:35
  112702:    b4 e0 90 51       	r5 = r9 + r1			  ## BT15_repair.c:486:35
  112706:    ad 16             	r13 = r10			  ## BT15_repair.c:484:11
  112708:    3a ed 3c 00       	ifs (r10 >= 0x3c) {			  ## BT15_repair.c:484:11
  11270c:    4d e0 3c 00       		r13 = 0x3c
                               	}			  ## BT15_repair.c:484:11
  112710:    54 ed b0 00       	r0 = h[r11+0x0] (s)
  112714:    00 a1             	r0 = r0 << 0x1
  112716:    70 18             	r0 += r7
  112718:    06 4c             	if (r6 == 0) goto 0x18 <repair_fun+0x5C : 112732 >			  ## BT15_repair.c:391:6
  11271a:    c0 e1 d1 20       	r2 = r13 << 0x1			  ## BT15_repair.c:394:42
  11271e:    41 20             	r1 = 0x0			  ## BT15_repair.c:394:3
  112720:    bf ea 1b f6       	call -0x13ca <memset : 11135a >			  ## BT15_repair.c:394:3
  112724:    54 ed bc 00       	r0 = h[r11+0xc] (s)			  ## BT15_repair.c:395:19
  112728:    8d ee 0f 00       	ifs (r0 <= r13) goto 0x1e <repair_fun+0x74 : 11274a >			  ## BT15_repair.c:395:19
  11272c:    b4 e0 02 0d       	r0 = r0 - r13			  ## BT15_repair.c:397:23
  112730:    04 8a             	goto 0x14 <repair_fun+0x70 : 112746 >			  ## BT15_repair.c:397:23
  112732:    c1 18             	r1 += r12			  ## BT15_repair.c:486:21
  112734:    c0 e1 d1 20       	r2 = r13 << 0x1			  ## BT15_repair.c:403:48
  112738:    bf ea ae f5       	call -0x14a4 <memmove : 111298 >			  ## BT15_repair.c:403:3
  11273c:    54 ed bc 00       	r0 = h[r11+0xc] (s)			  ## BT15_repair.c:404:19
  112740:    30 fe 03 fe       	ifs (r0 > 0x1ff) goto 0x6 <repair_fun+0x74 : 11274a >			  ## BT15_repair.c:404:19
  112744:    d0 18             	r0 += r13			  ## BT15_repair.c:406:23
  112746:    50 ed bd 00       	h[r11+0xc] = r0
  11274a:    50 ee ba 00       	r0 = b[r11+0xa] (u)			  ## BT15_repair.c:411:22
  11274e:    84 29             	[sp+36] = r4			  ## BT15_repair.c:411:2
  112750:    85 28             	[sp+32] = r5			  ## BT15_repair.c:411:2
  112752:    00 f8 6d 04       	if (r0 == 0x2) goto 0xda <repair_fun+0x15A : 112830 >			  ## BT15_repair.c:411:2
  112756:    00 f8 7e 02       	if (r0 == 0x1) goto 0xfc <repair_fun+0x180 : 112856 >
  11275a:    01 ff 00 00 30 01 	if (r0 != 0x0) goto 0x260 <repair_fun+0x2EA : 1129c0 >
  112760:    00 ff 00 60 2d 01 	if (r6 == 0x0) goto 0x25a <repair_fun+0x2EA : 1129c0 >
  112766:    54 ed b0 40       	r4 = h[r11+0x0] (s)			  ## BT15_repair.c:308:44
  11276a:    50 ed b5 40       	h[r11+0x4] = r4			  ## BT15_repair.c:416:26
  11276e:    50 ed b9 d0       	h[r11+0x8] = r13			  ## BT15_repair.c:417:24
  112772:    40 21             	r0 = 0x1			  ## BT15_repair.c:418:27
  112774:    52 ee ba 00       	b[r11+0xa] = r0			  ## BT15_repair.c:418:27
  112778:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <__stub_LZ4_decompress_safe_continue+0x7FEE8002 : 7ffffffe >			  ## BT15_repair.c:304:15
  11277e:    36 f1 00 4f       	r6 = r4 + -0x100  #			  ## BT15_repair.c:311:41
  112782:    80 2a             		 [sp+40] = r0			  ## BT15_repair.c:304:15
  112784:    a8 88             	r0 = sp + 40			  ## BT15_repair.c:304:15
  112786:    80 21             	[sp+4] = r0			  ## BT15_repair.c:312:6
  112788:    60 a1             	r0 = r6 << 0x1			  ## BT15_repair.c:312:37
  11278a:    71 1c             	r1 = r7 + r0			  ## BT15_repair.c:312:37
  11278c:    40 a1             	r0 = r4 << 0x1			  ## BT15_repair.c:308:66
  11278e:    70 18             	r0 += r7			  ## BT15_repair.c:308:66
  112790:    37 e1 e0 0f       	r7 = r0 + -0x20			  ## BT15_repair.c:308:21
  112794:    6a 20             	r2 = 0xa0			  ## BT15_repair.c:312:6
  112796:    43 22             	r3 = 0x2			  ## BT15_repair.c:312:6
  112798:    40 30             	r0 = 0x10			  ## BT15_repair.c:312:6
  11279a:    70 d6             	r0 = r7  #			  ## BT15_repair.c:312:6
  11279c:    80 20             		 [sp] = r0			  ## BT15_repair.c:312:6
  11279e:    bf ea 42 ff       	call -0x17c <repair_corefun_corr : 112626 >			  ## BT15_repair.c:312:6
  1127a2:    01 dd             	r1 = r0 + r4  #			  ## BT15_repair.c:317:7
  1127a4:    02 23             		 r2 = [sp+12]			  ## BT15_repair.c:317:7
  1127a6:    11 a1             	r1 = r1 << 0x1			  ## BT15_repair.c:317:7
  1127a8:    b4 f0 20 c1       	r12 = r2 + r1  #			  ## BT15_repair.c:317:7
  1127ac:    03 2a             		 r3 = [sp+40]			  ## BT15_repair.c:326:14
  1127ae:    06 18             	r6 += r0			  ## BT15_repair.c:313:22
  1127b0:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## BT15_repair.c:317:20
  1127b4:    6a 82             	r2 = r6 + 0x2			  ## BT15_repair.c:316:22
  1127b6:    04 9b             	goto 0x36 <repair_fun+0x118 : 1127ee >
  1127b8:    c0 14             	r8 = 0			  ## BT15_repair.c:323:3
  1127ba:    c1 14             	r9 = 0			  ## BT15_repair.c:323:3
  1127bc:    44 30             	r4 = 0x10			  ## BT15_repair.c:323:3
  1127be:    75 16             	r5 = r7			  ## BT15_repair.c:323:3
  1127c0:    c1 16             	r1 = r12			  ## BT15_repair.c:323:3
  1127c2:    74 03             	rep 0x10 r4 {			  ## BT15_repair.c:323:3
  1127c4:    d4 ed 12 f0       		r15 = h[r1++=0x2] (s)			  ## BT15_repair.c:323:3
  1127c8:    d4 ed 52 e0       		r14 = h[r5++=0x2] (s)			  ## BT15_repair.c:323:3
  1127cc:    b4 e0 f2 fe       		r15 = r15 - r14			  ## BT15_repair.c:323:3
  1127d0:    fc e1 f0 9f       		r9_r8 += r15 * r15 (s)
                               	}			  ## BT15_repair.c:323:3
  1127d4:    f4 56             	if (r4 != 0) goto -0x14 <repair_fun+0xEC : 1127c2 >			  ## BT15_repair.c:323:3
  1127d6:    d0 e1 08 88       	r9_r8 >>= 0x8			  ## BT15_repair.c:323:3
  1127da:    04 16             	r4 = r0			  ## BT15_repair.c:324:7
  1127dc:    18 e9 00 43       	if (r8 >= r3) {			  ## BT15_repair.c:324:7
  1127e0:    38 16             		r8 = r3			  ## BT15_repair.c:324:7
  1127e2:    64 16             		r4 = r6
                               	}			  ## BT15_repair.c:324:7
  1127e4:    0c e1 04 c0       	r12 = r12 + 0x4			  ## BT15_repair.c:317:2
  1127e8:    c0 22             	r0 += 0x2			  ## BT15_repair.c:317:41
  1127ea:    83 16             	r3 = r8
  1127ec:    46 16             	r6 = r4
  1127ee:    82 ed e3 01       	ifs (r0 < r2) goto -0x3a <repair_fun+0xE2 : 1127b8 >
  1127f2:    40 21             	r0 = 0x1			  ## BT15_repair.c:345:3
  1127f4:    72 d6             	r2 = r7  #			  ## BT15_repair.c:345:3
  1127f6:    80 21             		 [sp+4] = r0			  ## BT15_repair.c:345:3
  1127f8:    60 a1             	r0 = r6 << 0x1			  ## BT15_repair.c:334:22
  1127fa:    04 27             	r4 = [sp+28]			  ## BT15_repair.c:334:22
  1127fc:    41 1c             	r1 = r4 + r0			  ## BT15_repair.c:334:22
  1127fe:    43 30             	r3 = 0x10			  ## BT15_repair.c:345:3
  112800:    40 24             	r0 = 0x4			  ## BT15_repair.c:345:3
  112802:    70 d6             	r0 = r7  #			  ## BT15_repair.c:345:3
  112804:    80 20             		 [sp] = r0			  ## BT15_repair.c:345:3
  112806:    47 16             	r7 = r4			  ## BT15_repair.c:345:3
  112808:    bf ea 38 ff       	call -0x190 <repair_corefun_mixdata : 11267c >			  ## BT15_repair.c:345:3
  11280c:    54 ed b4 00       	r0 = h[r11+0x4] (s)			  ## BT15_repair.c:349:15
  112810:    6c 90             	r4 = r6 + 0x10			  ## BT15_repair.c:348:47
  112812:    41 a1             	r1 = r4 << 0x1			  ## BT15_repair.c:348:15
  112814:    71 18             	r1 += r7			  ## BT15_repair.c:348:15
  112816:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:349:15
  112818:    70 18             	r0 += r7			  ## BT15_repair.c:349:15
  11281a:    c0 e1 d1 20       	r2 = r13 << 0x1			  ## BT15_repair.c:352:33
  11281e:    bf ea 3b f5       	call -0x158a <memmove : 111298 >			  ## BT15_repair.c:352:3
  112822:    50 ed bf 40       	h[r11+0xe] = r4			  ## BT15_repair.c:354:23
  112826:    d4 e9 14 90       	r9 = [sp+20]			  ## BT15_repair.c:354:23
  11282a:    d4 e9 10 c0       	r12 = [sp+16]			  ## BT15_repair.c:354:23
  11282e:    64 87             	goto 0x18e <repair_fun+0x2E8 : 1129be >			  ## BT15_repair.c:354:23
  112830:    86 f8 c6 00       	if (r6 != 0x0) goto 0x18c <repair_fun+0x2EA : 1129c0 >
  112834:    54 ed b0 00       	r0 = h[r11+0x0] (s)			  ## BT15_repair.c:455:20
  112838:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:456:9
  11283a:    70 18             	r0 += r7			  ## BT15_repair.c:456:9
  11283c:    41 20             	r1 = 0x0			  ## BT15_repair.c:456:9
  11283e:    04 87             	goto 0xe <repair_fun+0x178 : 11284e >			  ## BT15_repair.c:456:9
  112840:    d8 ed 0a 21       	r2 = h[r0+r1<<1] (s)			  ## BT15_repair.c:457:18
  112844:    12 1b             	r2 *= r1			  ## BT15_repair.c:457:29
  112846:    a2 a4             	r2 = r2 >> 0x4			  ## BT15_repair.c:457:33
  112848:    d8 ed 09 21       	h[r0+r1<<1] = r2			  ## BT15_repair.c:457:16
  11284c:    c1 21             	r1 += 0x1			  ## BT15_repair.c:456:25
  11284e:    81 f8 f7 21       	if (r1 != 0x10) goto -0x12 <repair_fun+0x16A : 112840 >
  112852:    40 20             	r0 = 0x0			  ## BT15_repair.c:459:27
  112854:    14 8e             	goto 0x5c <repair_fun+0x1DC : 1128b2 >			  ## BT15_repair.c:459:27
  112856:    16 50             	if (r6 == 0) goto 0x60 <repair_fun+0x1E2 : 1128b8 >			  ## BT15_repair.c:423:7
  112858:    50 ed b8 00       	r0 = h[r11+0x8] (u)			  ## BT15_repair.c:426:24
  11285c:    d0 18             	r0 += r13			  ## BT15_repair.c:426:24
  11285e:    50 ed b9 00       	h[r11+0x8] = r0			  ## BT15_repair.c:426:24
  112862:    54 ed b0 00       	r0 = h[r11+0x0] (s)			  ## BT15_repair.c:428:20
  112866:    54 ed be 10       	r1 = h[r11+0xe] (s)			  ## BT15_repair.c:427:16
  11286a:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:428:18
  11286c:    70 18             	r0 += r7			  ## BT15_repair.c:428:18
  11286e:    11 a1             	r1 = r1 << 0x1			  ## BT15_repair.c:427:16
  112870:    71 18             	r1 += r7			  ## BT15_repair.c:427:16
  112872:    c0 e1 d1 20       	r2 = r13 << 0x1			  ## BT15_repair.c:431:34
  112876:    bf ea 0f f5       	call -0x15e2 <memmove : 111298 >			  ## BT15_repair.c:431:4
  11287a:    54 ed b8 00       	r0 = h[r11+0x8] (s)			  ## BT15_repair.c:434:21
  11287e:    90 fd 9f 7e       	ifs (r0 < 0xbf) goto 0x13e <repair_fun+0x2EA : 1129c0 >			  ## BT15_repair.c:434:21
  112882:    50 e1 ff a3       	r0 = r10 ^ 0xFFFFFFFF			  ## BT15_repair.c:438:5
  112886:    b0 ee c3 0f       	ifs (r0 <= -0x3d) {			  ## BT15_repair.c:438:5
  11288a:    40 e0 c3 ff       		r0 = -0x3d
                               	}			  ## BT15_repair.c:438:5
  11288e:    54 ed b0 10       	r1 = h[r11+0x0] (s)			  ## BT15_repair.c:436:21
  112892:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:438:5
  112894:    11 a1             	r1 = r1 << 0x1			  ## BT15_repair.c:438:5
  112896:    10 de             	r0 = r1 - r0  #			  ## BT15_repair.c:438:5
  112898:    01 22             		 r1 = [sp+8]			  ## BT15_repair.c:438:5
  11289a:    10 18             	r0 += r1			  ## BT15_repair.c:438:5
  11289c:    41 30             	r1 = 0x10			  ## BT15_repair.c:438:5
  11289e:    04 86             	goto 0xc <repair_fun+0x1D6 : 1128ac >			  ## BT15_repair.c:438:5
  1128a0:    54 ed 00 20       	r2 = h[r0+0x0] (s)			  ## BT15_repair.c:440:25
  1128a4:    12 1b             	r2 *= r1			  ## BT15_repair.c:440:42
  1128a6:    a2 a4             	r2 = r2 >> 0x4			  ## BT15_repair.c:440:46
  1128a8:    82 06             	h[r0++=0x2] = r2			  ## BT15_repair.c:440:23
  1128aa:    f9 3f             	r1 += -0x1			  ## BT15_repair.c:441:7
  1128ac:    01 fd f8 03       	ifs (r1 >= 0x1) goto -0x10 <repair_fun+0x1CA : 1128a0 >
  1128b0:    40 22             	r0 = 0x2			  ## BT15_repair.c:443:28
  1128b2:    52 ee ba 00       	b[r11+0xa] = r0
  1128b6:    44 84             	goto 0x108 <repair_fun+0x2EA : 1129c0 >
  1128b8:    40 20             	r0 = 0x0			  ## BT15_repair.c:448:27
  1128ba:    52 ee ba 00       	b[r11+0xa] = r0			  ## BT15_repair.c:448:27
  1128be:    c0 ff ff ff ff 7f 	r0 = 0x7fffffff <__stub_LZ4_decompress_safe_continue+0x7FEE8002 : 7ffffffe >			  ## BT15_repair.c:227:15
  1128c4:    80 2b             	[sp+44] = r0			  ## BT15_repair.c:227:15
  1128c6:    54 ed be 00       	r0 = h[r11+0xe] (s)			  ## BT15_repair.c:239:23
  1128ca:    54 ed b0 20       	r2 = h[r11+0x0] (s)			  ## BT15_repair.c:231:21
  1128ce:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:239:23
  1128d0:    73 1c             	r3 = r7 + r0			  ## BT15_repair.c:239:23
  1128d2:    20 a1             	r0 = r2 << 0x1			  ## BT15_repair.c:231:21
  1128d4:    b4 e0 70 80       	r8 = r7 + r0			  ## BT15_repair.c:231:21
  1128d8:    40 20             	r0 = 0x0			  ## BT15_repair.c:242:3
  1128da:    41 20             	r1 = 0x0			  ## BT15_repair.c:242:3
  1128dc:    44 30             	r4 = 0x10			  ## BT15_repair.c:242:3
  1128de:    86 16             	r6 = r8			  ## BT15_repair.c:242:3
  1128e0:    64 03             	rep 0xe r4 {			  ## BT15_repair.c:242:3
  1128e2:    d4 ed 32 70       		r7 = h[r3++=0x2] (s)			  ## BT15_repair.c:242:3
  1128e6:    d4 ed 62 50       		r5 = h[r6++=0x2] (s)			  ## BT15_repair.c:242:3
  1128ea:    7f 1f             		r7 = r7 - r5			  ## BT15_repair.c:242:3
  1128ec:    fc e1 70 17       		r1_r0 += r7 * r7 (s)
                               	}			  ## BT15_repair.c:242:3
  1128f0:    f4 57             	if (r4 != 0) goto -0x12 <repair_fun+0x20A : 1128e0 >			  ## BT15_repair.c:242:3
  1128f2:    d0 f1 08 08       	r1_r0 >>= 0x8  #			  ## BT15_repair.c:242:3
  1128f6:    07 27             		 r7 = [sp+28]
  1128f8:    ab 8c             	r3 = sp + 44
  1128fa:    e0 f1 64 00       	r0 = r0 * 0x64  #			  ## BT15_repair.c:243:30
  1128fe:    83 21             		 [sp+4] = r3			  ## BT15_repair.c:246:5
  112900:    43 30             	r3 = 0x10			  ## BT15_repair.c:246:5
  112902:    34 f1 a0 2f       	r4 = r2 + -0x60  #			  ## BT15_repair.c:232:40
  112906:    83 20             		 [sp] = r3			  ## BT15_repair.c:246:5
  112908:    41 a1             	r1 = r4 << 0x1			  ## BT15_repair.c:246:36
  11290a:    71 18             	r1 += r7			  ## BT15_repair.c:246:36
  11290c:    52 30             	r2 = 0x50			  ## BT15_repair.c:246:5
  11290e:    43 21             	r3 = 0x1			  ## BT15_repair.c:246:5
  112910:    85 a7             	r5 = r0 >> 0x7			  ## BT15_repair.c:243:37
  112912:    80 16             	r0 = r8			  ## BT15_repair.c:246:5
  112914:    bf ea 87 fe       	call -0x2f2 <repair_corefun_corr : 112626 >			  ## BT15_repair.c:246:5
  112918:    06 1d             	r6 = r0 + r4			  ## BT15_repair.c:248:23
  11291a:    86 ec 43 50       	if (r5 <= r6) goto 0x86 <repair_fun+0x2CE : 1129a4 >
  11291e:    40 21             	r0 = 0x1			  ## BT15_repair.c:264:3
  112920:    81 d6             	r1 = r8  #			  ## BT15_repair.c:264:3
  112922:    80 21             		 [sp+4] = r0			  ## BT15_repair.c:264:3
  112924:    60 a1             	r0 = r6 << 0x1			  ## BT15_repair.c:260:23
  112926:    74 1c             	r4 = r7 + r0			  ## BT15_repair.c:260:23
  112928:    43 30             	r3 = 0x10			  ## BT15_repair.c:264:3
  11292a:    40 24             	r0 = 0x4			  ## BT15_repair.c:264:3
  11292c:    40 d6             	r0 = r4  #			  ## BT15_repair.c:264:3
  11292e:    80 20             		 [sp] = r0			  ## BT15_repair.c:264:3
  112930:    42 16             	r2 = r4			  ## BT15_repair.c:264:3
  112932:    bf ea a3 fe       	call -0x2ba <repair_corefun_mixdata : 11267c >			  ## BT15_repair.c:264:3
  112936:    8d fd 09 22       	ifs (r13 < 0x11) goto 0x12 <repair_fun+0x276 : 11294c >			  ## BT15_repair.c:264:3
  11293a:    00 e1 20 40       	r0 = r4 + 0x20			  ## BT15_repair.c:267:13
  11293e:    01 e1 20 80       	r1 = r8 + 0x20			  ## BT15_repair.c:267:37
  112942:    c0 e1 d1 20       	r2 = r13 << 0x1			  ## BT15_repair.c:267:79
  112946:    fa 20             	r2 += -0x20			  ## BT15_repair.c:267:79
  112948:    bf ea a6 f4       	call -0x16b4 <memmove : 111298 >			  ## BT15_repair.c:267:4
  11294c:    54 ed b0 10       	r1 = h[r11+0x0] (s)			  ## BT15_repair.c:275:7
  112950:    86 ee 0b 10       	ifs (r1 <= r6) goto 0x16 <repair_fun+0x294 : 11296a >			  ## BT15_repair.c:275:7
  112954:    b4 e0 60 0d       	r0 = r6 + r13			  ## BT15_repair.c:277:44
  112958:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:277:12
  11295a:    70 18             	r0 += r7			  ## BT15_repair.c:277:12
  11295c:    91 1f             	r1 = r1 - r6			  ## BT15_repair.c:277:77
  11295e:    12 a1             	r2 = r1 << 0x1			  ## BT15_repair.c:277:89
  112960:    41 20             	r1 = 0x0			  ## BT15_repair.c:277:4
  112962:    bf ea fa f4       	call -0x160c <memset : 11135a >			  ## BT15_repair.c:277:4
  112966:    50 ed b0 10       	r1 = h[r11+0x0] (u)			  ## BT15_repair.c:277:4
  11296a:    32 e1 ff df       	r2 = r13 + -0x1			  ## BT15_repair.c:283:47
  11296e:    98 17             	r0 = r1.l (s)			  ## BT15_repair.c:284:37
  112970:    20 18             	r0 += r2			  ## BT15_repair.c:284:64
  112972:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:284:14
  112974:    74 1c             	r4 = r7 + r0			  ## BT15_repair.c:284:14
  112976:    30 e1 c2 4e       	r0 = r4 + -0x13e			  ## BT15_repair.c:286:29
  11297a:    e1 1c             	r1 = r6 + r2			  ## BT15_repair.c:283:53
  11297c:    11 a1             	r1 = r1 << 0x1			  ## BT15_repair.c:283:15
  11297e:    7d 1c             	r5 = r7 + r1			  ## BT15_repair.c:283:15
  112980:    31 e1 c2 5e       	r1 = r5 + -0x13e			  ## BT15_repair.c:286:53
  112984:    42 e0 40 01       	r2 = 0x140			  ## BT15_repair.c:286:3
  112988:    bf ea 86 f4       	call -0x16f4 <memmove : 111298 >			  ## BT15_repair.c:286:3
  11298c:    10 3f             	r0 = -0x1			  ## BT15_repair.c:291:3
  11298e:    30 f1 c0 4e       	r0 = r4 + -0x140  #			  ## BT15_repair.c:286:19
  112992:    80 21             		 [sp+4] = r0			  ## BT15_repair.c:291:3
  112994:    43 e0 00 01       	r3 = 0x100			  ## BT15_repair.c:291:3
  112998:    41 28             	r1 = 0x8			  ## BT15_repair.c:291:3
  11299a:    32 f1 c0 5e       	r2 = r5 + -0x140  #			  ## BT15_repair.c:286:43
  11299e:    81 20             		 [sp] = r1			  ## BT15_repair.c:291:3
  1129a0:    01 16             	r1 = r0			  ## BT15_repair.c:291:3
  1129a2:    04 8b             	goto 0x16 <repair_fun+0x2E4 : 1129ba >			  ## BT15_repair.c:291:3
  1129a4:    54 ed be 00       	r0 = h[r11+0xe] (s)			  ## BT15_repair.c:253:23
  1129a8:    41 21             	r1 = 0x1			  ## BT15_repair.c:254:3
  1129aa:    00 a1             	r0 = r0 << 0x1			  ## BT15_repair.c:253:23
  1129ac:    72 1c             	r2 = r7 + r0			  ## BT15_repair.c:253:23
  1129ae:    43 30             	r3 = 0x10			  ## BT15_repair.c:254:3
  1129b0:    40 24             	r0 = 0x4			  ## BT15_repair.c:254:3
  1129b2:    d0 e9 01 00       	d[sp] = r1_r0			  ## BT15_repair.c:254:3
  1129b6:    80 16             	r0 = r8			  ## BT15_repair.c:254:3
  1129b8:    81 16             	r1 = r8			  ## BT15_repair.c:254:3
  1129ba:    bf ea 5f fe       	call -0x342 <repair_corefun_mixdata : 11267c >
  1129be:    06 26             	r6 = [sp+24]
  1129c0:    b4 f0 a2 5d       	r5 = r10 - r13  #			  ## BT15_repair.c:485:7
  1129c4:    00 28             		 r0 = [sp+32]			  ## BT15_repair.c:467:2
  1129c6:    c0 e1 d1 40       	r4 = r13 << 0x1			  ## BT15_repair.c:467:26
  1129ca:    71 16             	r1 = r7			  ## BT15_repair.c:467:2
  1129cc:    42 16             	r2 = r4			  ## BT15_repair.c:467:2
  1129ce:    bf ea 63 f4       	call -0x173a <memmove : 111298 >			  ## BT15_repair.c:467:2
  1129d2:    71 1d             	r1 = r7 + r4			  ## BT15_repair.c:468:57
  1129d4:    a0 e0 00 df       	r0 = 0x200 - r13			  ## BT15_repair.c:468:80
  1129d8:    02 a1             	r2 = r0 << 0x1			  ## BT15_repair.c:468:87
  1129da:    70 16             	r0 = r7			  ## BT15_repair.c:468:2
  1129dc:    bf ea 5c f4       	call -0x1748 <memmove : 111298 >			  ## BT15_repair.c:468:2
  1129e0:    50 ee ba 00       	r0 = b[r11+0xa] (u)			  ## BT15_repair.c:469:18
  1129e4:    00 fc 0c 02       	if (r0 > 0x1) goto 0x18 <repair_fun+0x32A : 112a00 >			  ## BT15_repair.c:469:18
  1129e8:    50 ed b4 00       	r0 = h[r11+0x4] (u)			  ## BT15_repair.c:471:39
  1129ec:    b4 e0 02 0d       	r0 = r0 - r13			  ## BT15_repair.c:471:49
  1129f0:    50 ed b5 00       	h[r11+0x4] = r0			  ## BT15_repair.c:471:25
  1129f4:    50 ed b6 00       	r0 = h[r11+0x6] (u)			  ## BT15_repair.c:472:37
  1129f8:    b4 e0 02 0d       	r0 = r0 - r13			  ## BT15_repair.c:472:45
  1129fc:    50 ed b7 00       	h[r11+0x6] = r0			  ## BT15_repair.c:472:23
  112a00:    04 29             	r4 = [sp+36]
  112a02:    d4 18             	r4 += r13			  ## BT15_repair.c:487:8
  112a04:    ba e1 41 50       	r10 = sextra(r5, p:0x0, l:0x10)			  ## BT15_repair.c:482:9
  112a08:    0a ff 01 a0 79 fe 	ifs (r10 >= 0x1) goto -0x30e <repair_fun+0x2A : 112700 >			  ## BT15_repair.c:482:9
  112a0e:    40 20             	r0 = 0x0			  ## BT15_repair.c:489:2
  112a10:    02 8c             	sp += 0x30			  ## BT15_repair.c:489:2
  112a12:    5f 04             	{pc, r15-r4} = [sp++]			  ## BT15_repair.c:489:2


BT15_REPAIR_API_OBJ:
  112a14:	 ac 26 11 00 b2 26 11 00         .&...&..
  112a1c:	 d6 26 11 00                     .&..


os_code_begin:
  112a20:    60 00             	cli			  ## mask_export.c:74:0
  112a22:    c0 ff 84 1c 03 00 	r0 = 0x31c84 <the_debug_isr_stack : 31c84 >			  ## mask_export.c:76:35
  112a28:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## mask_export.c:76:35
  112a2c:    80 00             	rts			  ## mask_export.c:77:1


local_irq_enable:
  112a2e:    c0 ff 84 1c 03 00 	r0 = 0x31c84 <the_debug_isr_stack : 31c84 >			  ## mask_export.c:85:0
  112a34:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:86:9
  112a36:    f9 3f             	r1 += -0x1			  ## mask_export.c:86:9
  112a38:    81 60             	[r0+0x0] = r1			  ## mask_export.c:86:9
  112a3a:    81 41             	if (r1 != 0) goto 0x2 <local_irq_enable+0x10 : 112a3e >			  ## mask_export.c:86:9
  112a3c:    61 00             	sti			  ## mask_export.c:87:9
  112a3e:    80 00             	rts			  ## mask_export.c:89:1


irq_init:
  112a40:    c0 ff 84 1c 03 00 	r0 = 0x31c84 <the_debug_isr_stack : 31c84 >			  ## mask_export.c:81:0
  112a46:    40 ea 00 00       	[r0+0x0] = 0x0			  ## mask_export.c:82:5
  112a4a:    80 00             	rts			  ## mask_export.c:83:1


free:
  112a4c:    c1 ff c4 1c 03 00 	r1 = 0x31cc4 <mask_free : 31cc4 >			  ## mask_export.c:22:0
  112a52:    11 60             	r1 = [r1+0x0] 			  ## mask_export.c:23:5
  112a54:    d1 00             	goto r1			  ## mask_export.c:23:5


malloc:
  112a56:    c1 ff c8 1c 03 00 	r1 = 0x31cc8 <mask_malloc : 31cc8 >			  ## mask_export.c:26:0
  112a5c:    11 60             	r1 = [r1+0x0] 			  ## mask_export.c:27:12
  112a5e:    d1 00             	goto r1			  ## mask_export.c:27:12


mask_init:
  112a60:    77 04             	[--sp] = {rets, r7-r4}			  ## mask_export.c:57:0
  112a62:    25 16             	r5 = r2			  ## mask_export.c:57:0
  112a64:    16 16             	r6 = r1			  ## mask_export.c:57:0
  112a66:    07 16             	r7 = r0			  ## mask_export.c:57:0
  112a68:    c0 ff 84 1c 03 00 	r0 = 0x31c84 <the_debug_isr_stack : 31c84 >			  ## mask_export.c:82:5
  112a6e:    41 20             	r1 = 0x0			  ## mask_export.c:82:5
  112a70:    34 d6             	r4 = r3  #			  ## mask_export.c:82:5
  112a72:    81 60             		 [r0+0x0] = r1			  ## mask_export.c:82:5
  112a74:    c0 ff 84 1c 03 00 	r0 = 0x31c84 <the_debug_isr_stack : 31c84 >			  ## mask_export.c:59:5
  112a7a:    c2 ff 74 02 00 00 	r2 = 0x274 <os_bss_size : 274 >			  ## mask_export.c:59:5
  112a80:    bf ea 6b f4       	call -0x172a <memset : 11135a >			  ## mask_export.c:59:5
  112a84:    c0 ff c4 1c 03 00 	r0 = 0x31cc4 <mask_free : 31cc4 >			  ## mask_export.c:60:15
  112a8a:    87 60             	[r0+0x0] = r7			  ## mask_export.c:60:15
  112a8c:    c0 ff c8 1c 03 00 	r0 = 0x31cc8 <mask_malloc : 31cc8 >			  ## mask_export.c:61:17
  112a92:    86 60             	[r0+0x0] = r6			  ## mask_export.c:61:17
  112a94:    c0 ff d0 1c 03 00 	r0 = 0x31cd0 <mask_stack_free : 31cd0 >			  ## mask_export.c:62:21
  112a9a:    85 60             	[r0+0x0] = r5			  ## mask_export.c:62:21
  112a9c:    c0 ff cc 1c 03 00 	r0 = 0x31ccc <mask_stack_malloc : 31ccc >			  ## mask_export.c:63:23
  112aa2:    01 26             	r1 = [sp+24]			  ## mask_export.c:63:23
  112aa4:    84 60             	[r0+0x0] = r4			  ## mask_export.c:63:23
  112aa6:    c0 ff d4 1c 03 00 	r0 = 0x31cd4 <vPortStartFirstTask : 31cd4 >			  ## mask_export.c:64:25
  112aac:    02 25             	r2 = [sp+20]			  ## mask_export.c:64:25
  112aae:    81 60             	[r0+0x0] = r1			  ## mask_export.c:64:25
  112ab0:    c0 ff d8 1c 03 00 	r0 = 0x31cd8 <mask_portSUPPRESS_TICKS_AND_SLEEP : 31cd8 >			  ## mask_export.c:65:39
  112ab6:    01 29             	r1 = [sp+36]			  ## mask_export.c:65:39
  112ab8:    82 60             	[r0+0x0] = r2			  ## mask_export.c:65:39
  112aba:    c0 ff dc 1c 03 00 	r0 = 0x31cdc <mask_putchar : 31cdc >			  ## mask_export.c:67:18
  112ac0:    02 2a             	r2 = [sp+40]			  ## mask_export.c:67:18
  112ac2:    81 60             	[r0+0x0] = r1			  ## mask_export.c:67:18
  112ac4:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## mask_export.c:68:16
  112aca:    01 27             	r1 = [sp+28]			  ## mask_export.c:68:16
  112acc:    82 60             	[r0+0x0] = r2			  ## mask_export.c:68:16
  112ace:    00 28             	r0 = [sp+32]			  ## mask_export.c:68:16
  112ad0:    c2 ff e4 1c 03 00 	r2 = 0x31ce4 <exception_irq_hook : 31ce4 >			  ## mask_export.c:69:24
  112ad6:    a1 60             	[r2+0x0] = r1			  ## mask_export.c:69:24
  112ad8:    c1 ff e8 1c 03 00 	r1 = 0x31ce8 <idle_hook : 31ce8 >			  ## mask_export.c:70:15
  112ade:    90 60             	[r1+0x0] = r0			  ## mask_export.c:70:15
  112ae0:    57 04             	{pc, r7-r4} = [sp++]			  ## mask_export.c:71:1


uxListRemove:
  112ae2:    10 04             	[--sp] = rets			  ## list.c:218:0
  112ae4:    01 16             	r1 = r0			  ## list.c:218:0
  112ae6:    41 9c             	call -0xc8 <os_code_begin : 112a20 >			  ## list.c:221:5
  112ae8:    13 61             	r3 = [r1+0x4] 			  ## list.c:224:21
  112aea:    10 62             	r0 = [r1+0x8] 			  ## list.c:224:58
  112aec:    12 64             	r2 = [r1+0x10] 			  ## list.c:222:55
  112aee:    b0 62             	[r3+0x8] = r0			  ## list.c:224:40
  112af0:    10 62             	r0 = [r1+0x8] 			  ## list.c:225:21
  112af2:    83 61             	[r0+0x4] = r3			  ## list.c:225:40
  112af4:    23 61             	r3 = [r2+0x4] 			  ## list.c:231:17
  112af6:    13 e8 00 01       	if (r3 == r1) {			  ## list.c:231:17
  112afa:    a0 61             		[r2+0x4] = r0
                               	}			  ## list.c:232:25
  112afc:    44 ea 00 10       	[r1+0x10] = 0x0			  ## list.c:237:33
  112b00:    c0 eb ff 2f       	[r2+0x0] += -0x1			  ## list.c:238:30
  112b04:    41 94             	call -0xd8 <local_irq_enable : 112a2e >			  ## list.c:239:5
  112b06:    20 60             	r0 = [r2+0x0] 			  ## list.c:240:20
  112b08:    00 04             	pc = [sp++]			  ## list.c:240:5


vListInsertEnd:
  112b0a:    02 61             	r2 = [r0+0x4] 			  ## list.c:124:0
  112b0c:    92 61             	[r1+0x4] = r2			  ## list.c:136:27
  112b0e:    23 62             	r3 = [r2+0x8] 			  ## list.c:137:42
  112b10:    93 62             	[r1+0x8] = r3			  ## list.c:137:31
  112b12:    23 62             	r3 = [r2+0x8] 			  ## list.c:142:14
  112b14:    b1 61             	[r3+0x4] = r1			  ## list.c:142:33
  112b16:    a1 62             	[r2+0x8] = r1			  ## list.c:143:25
  112b18:    90 64             	[r1+0x10] = r0			  ## list.c:146:32
  112b1a:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## list.c:148:30
  112b1e:    80 00             	rts			  ## list.c:151:1


prvResetNextTaskUnblockTime:
  112b20:    c0 ff f0 1d 03 00 	r0 = 0x31df0 <pxDelayedTaskList : 31df0 >			  ## tasks.c:3479:0
  112b26:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:3482:9
  112b28:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:3482:9
  112b2a:    b1 e8 00 d0       	if (r1 != 0x0) {			  ## tasks.c:3482:9
  112b2e:    00 60             		r0 = [r0+0x0] 			  ## tasks.c:3493:29
  112b30:    00 63             		r0 = [r0+0xc] 			  ## tasks.c:3493:29
  112b32:    00 63             		r0 = [r0+0xc] 			  ## tasks.c:3493:29
  112b34:    00 65             		r0 = [r0+0x14] 
                               	} else {			  ## tasks.c:3494:32
  112b36:    10 3f             		r0 = -0x1
                               	}
  112b38:    c1 ff a4 1c 03 00 	r1 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >
  112b3e:    90 60             	[r1+0x0] = r0
  112b40:    80 00             	rts			  ## tasks.c:3496:1


xTaskRemoveFromEventList:
  112b42:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2788:0
  112b44:    01 16             	r1 = r0			  ## tasks.c:2788:0
  112b46:    bf ea 6b ff       	call -0x12a <os_code_begin : 112a20 >			  ## tasks.c:2805:5
  112b4a:    10 63             	r0 = [r1+0xc] 			  ## tasks.c:2806:32
  112b4c:    05 63             	r5 = [r0+0xc] 			  ## tasks.c:2806:32
  112b4e:    85 4d             	if (r5 != 0) goto 0x1a <xTaskRemoveFromEventList+0x28 : 112b6a >
  112b50:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  112b56:    42 f0 f7 0a       	r2 = 0xaf7  #			  ## FreeRTOSConfig.h:181:5
  112b5a:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  112b5c:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  112b62:    c1 ff 1f 4a 11 00 	r1 = 0x114a1f <vTickISR+0x23A : 114a1e >			  ## FreeRTOSConfig.h:181:5
  112b68:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112b6a:    04 e1 28 50       	r4 = r5 + 0x28			  ## tasks.c:2808:43
  112b6e:    40 16             	r0 = r4			  ## tasks.c:2808:12
  112b70:    51 98             	call -0x90 <uxListRemove : 112ae2 >			  ## tasks.c:2808:12
  112b72:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:2810:9
  112b78:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2810:9
  112b7a:    00 47             	if (r0 == 0) goto 0xe <xTaskRemoveFromEventList+0x48 : 112b8a >			  ## tasks.c:2810:9
  112b7c:    c0 ff b4 1d 03 00 	r0 = 0x31db4 <xPendingReadyList : 31db4 >			  ## tasks.c:2816:9
  112b82:    41 16             	r1 = r4			  ## tasks.c:2816:9
  112b84:    61 82             	call -0x7c <vListInsertEnd : 112b0a >			  ## tasks.c:2816:9
  112b86:    cd 3c             	r5 += 0x3c			  ## tasks.c:2819:25
  112b88:    04 92             	goto 0x24 <xTaskRemoveFromEventList+0x6C : 112bae >
  112b8a:    5c 94             	r4 = r5 + 0x14			  ## tasks.c:2811:47
  112b8c:    40 16             	r0 = r4			  ## tasks.c:2811:16
  112b8e:    51 89             	call -0xae <uxListRemove : 112ae2 >			  ## tasks.c:2811:16
  112b90:    d0 ec 5e 03       	r0 = [++r5=0x3c]			  ## tasks.c:2812:9
  112b94:    c1 ff 98 1c 03 00 	r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:2812:9
  112b9a:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:2812:9
  112b9e:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2812:9
  112ba2:    c1 ff ec 1c 03 00 	r1 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:2812:9
  112ba8:    10 18             	r0 += r1			  ## tasks.c:2812:9
  112baa:    41 16             	r1 = r4			  ## tasks.c:2812:9
  112bac:    51 8e             	call -0xa4 <vListInsertEnd : 112b0a >			  ## tasks.c:2812:9
  112bae:    bf ea 3e ff       	call -0x184 <local_irq_enable : 112a2e >			  ## tasks.c:2818:5
  112bb2:    53 60             	r3 = [r5+0x0] 			  ## tasks.c:2819:25
  112bb4:    bf ea 34 ff       	call -0x198 <os_code_begin : 112a20 >			  ## tasks.c:2819:38
  112bb8:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2819:38
  112bbe:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2819:38
  112bc0:    bf ea 35 ff       	call -0x196 <local_irq_enable : 112a2e >			  ## tasks.c:2819:38
  112bc4:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:2819:52
  112bc6:    42 20             	r2 = 0x0			  ## tasks.c:2819:52
  112bc8:    13 ec 00 80       	if (r3 > r0) {
  112bcc:    c0 ff ac 1c 03 00 		r0 = 0x31cac <xYieldPending : 31cac >			  ## tasks.c:2827:23
  112bd2:    42 21             		r2 = 0x1			  ## tasks.c:2827:23
  112bd4:    82 60             		[r0+0x0] = r2
                               	}			  ## tasks.c:2827:23
  112bd6:    51 84             	call -0xb8 <prvResetNextTaskUnblockTime : 112b20 >			  ## tasks.c:2842:9
  112bd8:    20 16             	r0 = r2			  ## tasks.c:2846:5
  112bda:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2846:5


xTaskSwitchContext:
  112bdc:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2653:0
  112bde:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:2655:9
  112be4:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:2655:9
  112be6:    c0 ff ac 1c 03 00 	r0 = 0x31cac <xYieldPending : 31cac >			  ## tasks.c:2655:9
  112bec:    01 44             	if (r1 == 0) goto 0x8 <xTaskSwitchContext+0x1A : 112bf6 >			  ## tasks.c:2655:9
  112bee:    40 ea 01 00       	[r0+0x0] = 0x1			  ## tasks.c:2658:23
  112bf2:    40 20             	r0 = 0x0			  ## tasks.c:2658:23
  112bf4:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1
  112bf6:    40 ea 00 00       	[r0+0x0] = 0x0			  ## tasks.c:2661:23
  112bfa:    bf ea 11 ff       	call -0x1de <os_code_begin : 112a20 >			  ## tasks.c:2596:5
  112bfe:    c0 ff 98 1c 03 00 	r0 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:2598:5
  112c04:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2598:5
  112c06:    80 e1 00 00       	r0 = clz(r0)			  ## tasks.c:2598:5
  112c0a:    a0 e0 1f 00       	r0 = 0x1F - r0			  ## tasks.c:2598:5
  112c0e:    e4 e1 14 00       	r4 = r0 * 0x14			  ## tasks.c:2616:5
  112c12:    c5 ff ec 1c 03 00 	r5 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:2616:5
  112c18:    d8 ec 42 05       	r0 = [r4+r5]			  ## tasks.c:2616:5
  112c1c:    80 4d             	if (r0 != 0) goto 0x1a <xTaskSwitchContext+0x5C : 112c38 >
  112c1e:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  112c24:    42 f0 38 0a       	r2 = 0xa38  #			  ## FreeRTOSConfig.h:181:5
  112c28:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  112c2a:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  112c30:    c1 ff a3 49 11 00 	r1 = 0x1149a3 <vTickISR+0x1BE : 1149a2 >			  ## FreeRTOSConfig.h:181:5
  112c36:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112c38:    49 1d             	r1 = r4 + r5			  ## tasks.c:2618:5
  112c3a:    10 61             	r0 = [r1+0x4] 			  ## tasks.c:2618:5
  112c3c:    00 61             	r0 = [r0+0x4] 			  ## tasks.c:2618:5
  112c3e:    1a 88             	r2 = r1 + 0x8			  ## tasks.c:2618:5
  112c40:    90 61             	[r1+0x4] = r0			  ## tasks.c:2618:5
  112c42:    10 e8 00 42       	if (r0 == r2) {			  ## tasks.c:2618:5
  112c46:    00 61             		r0 = [r0+0x4] 			  ## tasks.c:2618:5
  112c48:    90 61             		[r1+0x4] = r0
                               	}			  ## tasks.c:2618:5
  112c4a:    00 63             	r0 = [r0+0xc] 			  ## tasks.c:2618:5
  112c4c:    c1 ff b8 1c 03 00 	r1 = 0x31cb8 <highCurrentTCB : 31cb8 >			  ## tasks.c:2618:5
  112c52:    90 60             	[r1+0x0] = r0			  ## tasks.c:2618:5
  112c54:    bf ea eb fe       	call -0x22a <local_irq_enable : 112a2e >			  ## tasks.c:2649:5
  112c58:    40 21             	r0 = 0x1			  ## tasks.c:2649:5
  112c5a:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2711:1


vPortYield:
  112c5c:    75 04             	[--sp] = {rets, r5, r4}			  ## port.c:310:0
  112c5e:    bf ea df fe       	call -0x242 <os_code_begin : 112a20 >			  ## port.c:324:5
  112c62:    51 9c             	call -0x88 <xTaskSwitchContext : 112bdc >			  ## port.c:326:9
  112c64:    00 56             	if (r0 == 0) goto 0x2c <vPortYield+0x36 : 112c92 >			  ## port.c:326:9
  112c66:    40 20             	r0 = 0x0
  112c68:    c1 ff b8 1c 03 00 	r1 = 0x31cb8 <highCurrentTCB : 31cb8 >
  112c6e:    c2 ff 8c 1c 03 00 	r2 = 0x31c8c <CurrentTCB : 31c8c >
  112c74:    c3 ff a0 f1 10 00 	r3 = 0x10f1a0 <RAM_LIMIT_H+0xDD1A0 : 10f1a0 >
  112c7a:    04 89             	goto 0x12 <vPortYield+0x32 : 112c8e >
  112c7c:    d8 ec 1a 40       	r4 = [r1+r0<<2]			  ## port.c:349:30
  112c80:    d8 ec 2a 50       	r5 = [r2+r0<<2]			  ## port.c:349:13
  112c84:    95 e8 00 04       	if (r5 != r4) {			  ## port.c:349:13
  112c88:    00 ef 08 30       		[r3+0x0] |= 0x8
                               	}			  ## port.c:356:33
  112c8c:    c0 21             	r0 += 0x1			  ## port.c:347:36
  112c8e:    80 f8 f5 03       	if (r0 != 0x1) goto -0x16 <vPortYield+0x20 : 112c7c >
  112c92:    35 04             	{rets, r5, r4} = [sp++]
  112c94:    67 8c             	goto -0x268 <local_irq_enable : 112a2e >


vListInitialise:
  112c96:    09 88             	r1 = r0 + 0x8			  ## list.c:87:0
  112c98:    81 61             	[r0+0x4] = r1			  ## list.c:91:21
  112c9a:    42 ea ff 03       	[r0+0x8] = 0xFFFFFFFF			  ## list.c:95:33
  112c9e:    81 63             	[r0+0xc] = r1			  ## list.c:99:29
  112ca0:    81 64             	[r0+0x10] = r1			  ## list.c:100:33
  112ca2:    40 ea 00 00       	[r0+0x0] = 0x0			  ## list.c:102:29
  112ca6:    80 00             	rts			  ## list.c:108:1


xQueueGenericReset:
  112ca8:    76 04             	[--sp] = {rets, r6-r4}			  ## queue.c:284:0
  112caa:    04 15             	r5_r4 = r1_r0			  ## queue.c:284:0
  112cac:    84 4d             	if (r4 != 0) goto 0x1a <xQueueGenericReset+0x20 : 112cc8 >			  ## queue.c:284:0
  112cae:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  112cb4:    42 f0 1f 01       	r2 = 0x11f  #			  ## FreeRTOSConfig.h:181:5
  112cb8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  112cba:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  112cc0:    c1 ff 04 48 11 00 	r1 = 0x114804 <vTickISR+0x20 : 114804 >			  ## FreeRTOSConfig.h:181:5
  112cc6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112cc8:    bf ea aa fe       	call -0x2ac <os_code_begin : 112a20 >			  ## queue.c:289:5
  112ccc:    01 f1 40 40       	r1 = r4 + 0x40  #			  ## queue.c:289:5
  112cd0:    40 6f             		 r0 = [r4+0x3c] 			  ## queue.c:291:55
  112cd2:    12 60             	r2 = [r1+0x0] 			  ## queue.c:291:75
  112cd4:    f0 f1 20 60       	r6 = r2 * r0  #			  ## queue.c:291:64
  112cd8:    43 60             		 r3 = [r4+0x0] 			  ## queue.c:291:36
  112cda:    36 18             	r6 += r3			  ## queue.c:291:43
  112cdc:    c6 61             	[r4+0x4] = r6			  ## queue.c:291:25
  112cde:    4e ea 00 40       	[r4+0x38] = 0x0			  ## queue.c:292:36
  112ce2:    f8 3f             	r0 += -0x1			  ## queue.c:294:71
  112ce4:    20 db             	r0 *= r2  #			  ## queue.c:294:91
  112ce6:    c3 62             		 [r4+0x8] = r3			  ## queue.c:293:28
  112ce8:    30 18             	r0 += r3			  ## queue.c:294:49
  112cea:    c0 63             	[r4+0xc] = r0			  ## queue.c:294:31
  112cec:    78 3f             	r0 = 0xff			  ## queue.c:294:31
  112cee:    98 44             	b[r1+0x4] = r0			  ## queue.c:295:26
  112cf0:    98 45             	b[r1+0x5] = r0			  ## queue.c:296:26
  112cf2:    48 90             	r0 = r4 + 0x10			  ## queue.c:296:26
  112cf4:    05 45             	if (r5 == 0) goto 0xa <xQueueGenericReset+0x58 : 112d00 >			  ## queue.c:296:26
  112cf6:    61 8f             	call -0x62 <vListInitialise : 112c96 >			  ## queue.c:315:13
  112cf8:    00 e1 24 40       	r0 = r4 + 0x24			  ## queue.c:316:40
  112cfc:    61 8c             	call -0x68 <vListInitialise : 112c96 >			  ## queue.c:316:13
  112cfe:    04 86             	goto 0xc <xQueueGenericReset+0x64 : 112d0c >			  ## queue.c:316:13
  112d00:    41 64             	r1 = [r4+0x10] 			  ## queue.c:304:17
  112d02:    01 44             	if (r1 == 0) goto 0x8 <xQueueGenericReset+0x64 : 112d0c >			  ## queue.c:304:17
  112d04:    bf ea 1d ff       	call -0x1c6 <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:305:21
  112d08:    00 41             	if (r0 == 0) goto 0x2 <xQueueGenericReset+0x64 : 112d0c >			  ## queue.c:305:21
  112d0a:    51 88             	call -0xb0 <vPortYield : 112c5c >			  ## queue.c:306:21
  112d0c:    bf ea 8f fe       	call -0x2e2 <local_irq_enable : 112a2e >			  ## queue.c:319:5
  112d10:    40 21             	r0 = 0x1			  ## queue.c:323:5
  112d12:    56 04             	{pc, r6-r4} = [sp++]			  ## queue.c:323:5


xQueueGenericCreateStatic:
  112d14:    7c 04             	[--sp] = {rets, r12-r4}			  ## queue.c:330:0
  112d16:    e2 9f             	sp += -0x4			  ## queue.c:330:0
  112d18:    34 16             	r4 = r3			  ## queue.c:330:0
  112d1a:    2c 16             	r12 = r2			  ## queue.c:330:0
  112d1c:    15 16             	r5 = r1			  ## queue.c:330:0
  112d1e:    0b 16             	r11 = r0			  ## queue.c:330:0
  112d20:    ca ff e0 1c 03 00 	r10 = 0x31ce0 <mask_log_e : 31ce0 >			  ## queue.c:330:0
  112d26:    c8 ff 17 48 11 00 	r8 = 0x114817 <vTickISR+0x32 : 114816 >			  ## queue.c:330:0
  112d2c:    c9 ff 1e 48 11 00 	r9 = 0x11481e <vTickISR+0x3A : 11481e >			  ## queue.c:330:0
  112d32:    80 46             	if (r0 != 0) goto 0xc <xQueueGenericCreateStatic+0x2C : 112d40 >			  ## queue.c:330:0
  112d34:    d0 ec a0 30       	r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  112d38:    42 e0 4d 01       	r2 = 0x14d			  ## FreeRTOSConfig.h:181:5
  112d3c:    80 15             	r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  112d3e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112d40:    84 46             	if (r4 != 0) goto 0xc <xQueueGenericCreateStatic+0x3A : 112d4e >
  112d42:    d0 ec a0 30       	r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  112d46:    42 e0 51 01       	r2 = 0x151			  ## FreeRTOSConfig.h:181:5
  112d4a:    80 15             	r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  112d4c:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112d4e:    85 48             	if (r5 != 0) goto 0x10 <xQueueGenericCreateStatic+0x4C : 112d60 >
  112d50:    bc e8 00 c0       	if (r12 != 0x0) {
  112d54:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  112d58:    42 e0 55 01       		r2 = 0x155			  ## FreeRTOSConfig.h:181:5
  112d5c:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  112d5e:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  112d60:    05 48             	if (r5 == 0) goto 0x10 <xQueueGenericCreateStatic+0x5E : 112d72 >
  112d62:    3c e8 00 c0       	if (r12 == 0x0) {
  112d66:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  112d6a:    42 e0 56 01       		r2 = 0x156			  ## FreeRTOSConfig.h:181:5
  112d6e:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  112d70:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  112d72:    50 30             	r0 = 0x50			  ## queue.c:349:25
  112d74:    80 20             	[sp] = r0			  ## queue.c:349:25
  112d76:    00 20             	r0 = [sp]			  ## queue.c:350:9
  112d78:    b0 e8 50 c0       	if (r0 != 0x50) {
  112d7c:    d0 ec a0 30       		r3 = [r10+0x0]			  ## FreeRTOSConfig.h:181:5
  112d80:    42 e0 5e 01       		r2 = 0x15e			  ## FreeRTOSConfig.h:181:5
  112d84:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  112d86:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  112d88:    04 52             	if (r4 == 0) goto 0x24 <xQueueGenericCreateStatic+0x9A : 112dae >			  ## FreeRTOSConfig.h:181:5
  112d8a:    07 f1 40 40       	r7 = r4 + 0x40  #
  112d8e:    06 2b             		 r6 = [sp+44]
  112d90:    40 21             	r0 = 0x1
  112d92:    40 d6             	r0 = r4  #			  ## queue.c:428:9
  112d94:    f8 46             		 b[r7+0x6] = r0			  ## queue.c:365:47
  112d96:    b5 e8 00 00       	if (r5 != 0x0) {			  ## queue.c:365:47
  112d9a:    c0 16             		r0 = r12
                               	}			  ## queue.c:428:9
  112d9c:    40 d6             	r0 = r4  #			  ## queue.c:443:12
  112d9e:    c0 60             		 [r4+0x0] = r0			  ## queue.c:443:12
  112da0:    d0 ec 4d b3       	[r4+0x3c] = r11			  ## queue.c:441:26
  112da4:    f5 60             	[r7+0x0] = r5			  ## queue.c:442:28
  112da6:    41 21             	r1 = 0x1			  ## queue.c:443:12
  112da8:    bf ea 7e ff       	call -0x104 <xQueueGenericReset : 112ca8 >			  ## queue.c:443:12
  112dac:    fe 4c             	b[r7+0xc] = r6			  ## queue.c:447:33
  112dae:    40 16             	r0 = r4			  ## queue.c:372:5
  112db0:    02 81             	sp += 0x4			  ## queue.c:372:5
  112db2:    5c 04             	{pc, r12-r4} = [sp++]			  ## queue.c:372:5


prvCopyDataToQueue:
  112db4:    7a 04             	[--sp] = {rets, r10-r4}			  ## queue.c:1526:0
  112db6:    04 16             	r4 = r0			  ## queue.c:1526:0
  112db8:    07 f1 40 40       	r7 = r4 + 0x40  #			  ## queue.c:1526:0
  112dbc:    46 6e             		 r6 = [r4+0x38] 			  ## queue.c:1532:34
  112dbe:    25 d6             	r5 = r2  #
  112dc0:    73 60             		 r3 = [r7+0x0] 			  ## queue.c:1534:18
  112dc2:    03 5d             	if (r3 == 0) goto 0x3a <prvCopyDataToQueue+0x4A : 112dfe >
  112dc4:    35 56             	if (r5 == 0) goto 0xec <prvCopyDataToQueue+0xFE : 112eb2 >
  112dc6:    32 d6             	r2 = r3  #			  ## queue.c:1557:16
  112dc8:    40 63             		 r0 = [r4+0xc] 			  ## queue.c:1557:43
  112dca:    bf ea 65 f2       	call -0x1b36 <memmove : 111298 >			  ## queue.c:1557:16
  112dce:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1558:43
  112dd0:    41 63             	r1 = [r4+0xc] 			  ## queue.c:1558:31
  112dd2:    11 1e             	r1 = r1 - r0			  ## queue.c:1558:31
  112dd4:    c1 63             	[r4+0xc] = r1			  ## queue.c:1558:31
  112dd6:    42 60             	r2 = [r4+0x0] 			  ## queue.c:1559:46
  112dd8:    91 e9 00 c2       	if (r1 < r2) {			  ## queue.c:1559:46
  112ddc:    41 61             		r1 = [r4+0x4] 			  ## queue.c:1560:47
  112dde:    a0 e0 00 00       		r0 = 0x0 - r0			  ## queue.c:1558:31
  112de2:    10 18             		r0 += r1			  ## queue.c:1560:54
  112de4:    c0 63             		[r4+0xc] = r0
                               	}			  ## queue.c:1560:35
  112de6:    40 20             	r0 = 0x0			  ## queue.c:1560:35
  112de8:    41 21             	r1 = 0x1			  ## queue.c:1560:35
  112dea:    42 21             	r2 = 0x1			  ## queue.c:1565:23
  112dec:    b5 e8 02 00       	if (r5 != 0x2) {			  ## queue.c:1565:23
  112df0:    42 20             		r2 = 0x0
                               	}			  ## queue.c:1565:23
  112df2:    36 e8 00 00       	if (r6 == 0x0) {			  ## queue.c:1565:23
  112df6:    61 16             		r1 = r6
                               	}			  ## queue.c:1566:35
  112df8:    a1 19             	r1 &= r2			  ## queue.c:1565:13
  112dfa:    6e 1e             	r6 = r6 - r1			  ## queue.c:1565:13
  112dfc:    34 88             	goto 0xd0 <prvCopyDataToQueue+0x11A : 112ece >
  112dfe:    41 60             	r1 = [r4+0x0] 			  ## queue.c:1537:26
  112e00:    40 20             	r0 = 0x0
  112e02:    b1 45             	if (r1 != 0) goto 0xca <prvCopyDataToQueue+0x11A : 112ece >
  112e04:    c1 d4             	r9 = 0  #
  112e06:    45 61             		 r5 = [r4+0x4] 			  ## queue.c:1540:69
  112e08:    25 51             	if (r5 == 0) goto 0xa2 <prvCopyDataToQueue+0xF8 : 112eac >
  112e0a:    bf ea 09 fe       	call -0x3ee <os_code_begin : 112a20 >			  ## tasks.c:3603:9
  112e0e:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3603:9
  112e14:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3603:9
  112e16:    bf ea 0a fe       	call -0x3ec <local_irq_enable : 112a2e >			  ## tasks.c:3603:9
  112e1a:    c7 ff e0 1c 03 00 	r7 = 0x31ce0 <mask_log_e : 31ce0 >			  ## tasks.c:3603:9
  112e20:    c8 ff 61 49 11 00 	r8 = 0x114961 <vTickISR+0x17C : 114960 >			  ## tasks.c:3603:9
  112e26:    ca ff 62 4a 11 00 	r10 = 0x114a62 <vTickISR+0x27E : 114a62 >			  ## tasks.c:3603:9
  112e2c:    02 e8 06 50       	if (r5 == r2) goto 0xc <prvCopyDataToQueue+0x88 : 112e3c >			  ## tasks.c:3603:9
  112e30:    42 f0 13 0e       	r2 = 0xe13  #			  ## FreeRTOSConfig.h:181:5
  112e34:    73 60             		 r3 = [r7+0x0] 			  ## FreeRTOSConfig.h:181:5
  112e36:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  112e38:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  112e3a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112e3c:    c5 34             	r5 += 0x14
  112e3e:    50 6f             	r0 = [r5+0x3c] 			  ## tasks.c:3605:9
  112e40:    80 47             	if (r0 != 0) goto 0xe <prvCopyDataToQueue+0x9C : 112e50 >			  ## tasks.c:3605:9
  112e42:    42 f0 15 0e       	r2 = 0xe15  #			  ## FreeRTOSConfig.h:181:5
  112e46:    73 60             		 r3 = [r7+0x0] 			  ## FreeRTOSConfig.h:181:5
  112e48:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  112e4a:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  112e4c:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112e4e:    50 6f             	r0 = [r5+0x3c] 			  ## FreeRTOSConfig.h:181:5
  112e50:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## tasks.c:3606:31
  112e54:    d1 6f             	[r5+0x3c] = r1			  ## tasks.c:3606:31
  112e56:    40 20             	r0 = 0x0			  ## tasks.c:3606:31
  112e58:    91 49             	if (r1 != 0) goto 0x52 <prvCopyDataToQueue+0xF8 : 112eac >			  ## tasks.c:3606:31
  112e5a:    51 6e             	r1 = [r5+0x38] 			  ## tasks.c:3610:41
  112e5c:    52 6a             	r2 = [r5+0x28] 			  ## tasks.c:3610:20
  112e5e:    01 e8 25 20       	if (r2 == r1) goto 0x4a <prvCopyDataToQueue+0xF8 : 112eac >			  ## tasks.c:3610:20
  112e62:    bf ea dd fd       	call -0x446 <os_code_begin : 112a20 >			  ## tasks.c:3618:17
  112e66:    50 16             	r0 = r5			  ## tasks.c:3619:21
  112e68:    bf ea 3b fe       	call -0x38a <uxListRemove : 112ae2 >			  ## tasks.c:3619:21
  112e6c:    c1 ff ec 1c 03 00 	r1 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:3619:21
  112e72:    c2 ff 98 1c 03 00 	r2 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:3619:21
  112e78:    80 49             	if (r0 != 0) goto 0x12 <prvCopyDataToQueue+0xD8 : 112e8c >			  ## tasks.c:3619:21
  112e7a:    50 6a             	r0 = [r5+0x28] 			  ## tasks.c:3620:21
  112e7c:    e3 e1 14 00       	r3 = r0 * 0x14			  ## tasks.c:3620:21
  112e80:    d8 ec 32 31       	r3 = [r3+r1]			  ## tasks.c:3620:21
  112e84:    33 e8 00 00       	if (r3 == 0x0) {			  ## tasks.c:3620:21
  112e88:    66 e8 03 20       		[r2+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:3620:21
  112e8c:    50 6e             	r0 = [r5+0x38] 			  ## tasks.c:3628:44
  112e8e:    a3 f0 08 00       	r3 = 0x8 - r0  #			  ## tasks.c:3633:17
  112e92:    d0 6a             		 [r5+0x28] = r0			  ## tasks.c:3628:35
  112e94:    d3 65             	[r5+0x14] = r3			  ## tasks.c:3633:17
  112e96:    66 e8 00 20       	[r2+0x0] |= 1 << r0			  ## tasks.c:3634:17
  112e9a:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3634:17
  112e9e:    10 18             	r0 += r1			  ## tasks.c:3634:17
  112ea0:    51 16             	r1 = r5			  ## tasks.c:3634:17
  112ea2:    bf ea 32 fe       	call -0x39c <vListInsertEnd : 112b0a >			  ## tasks.c:3634:17
  112ea6:    bf ea c2 fd       	call -0x47c <local_irq_enable : 112a2e >			  ## tasks.c:3635:17
  112eaa:    40 21             	r0 = 0x1
  112eac:    d0 ec 45 90       	[r4+0x4] = r9			  ## queue.c:1541:40
  112eb0:    04 8e             	goto 0x1c <prvCopyDataToQueue+0x11A : 112ece >			  ## queue.c:1541:40
  112eb2:    32 d6             	r2 = r3  #			  ## queue.c:1549:16
  112eb4:    40 62             		 r0 = [r4+0x8] 			  ## queue.c:1549:41
  112eb6:    bf ea ef f1       	call -0x1c22 <memmove : 111298 >			  ## queue.c:1549:16
  112eba:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1550:40
  112ebc:    41 62             	r1 = [r4+0x8] 			  ## queue.c:1550:28
  112ebe:    01 18             	r1 += r0			  ## queue.c:1550:28
  112ec0:    c1 62             	[r4+0x8] = r1			  ## queue.c:1550:28
  112ec2:    42 61             	r2 = [r4+0x4] 			  ## queue.c:1551:44
  112ec4:    40 20             	r0 = 0x0			  ## queue.c:1551:44
  112ec6:    11 e9 00 42       	if (r1 >= r2) {			  ## queue.c:1551:44
  112eca:    41 60             		r1 = [r4+0x0] 			  ## queue.c:1552:43
  112ecc:    c1 62             		[r4+0x8] = r1
                               	}			  ## queue.c:1552:32
  112ece:    69 81             	r1 = r6 + 0x1			  ## queue.c:1580:52
  112ed0:    c1 6e             	[r4+0x38] = r1			  ## queue.c:1580:32
  112ed2:    5a 04             	{pc, r10-r4} = [sp++]			  ## queue.c:1582:5


vTaskSuspendAll:
  112ed4:    10 04             	[--sp] = rets			  ## tasks.c:1854:0
  112ed6:    bf ea a3 fd       	call -0x4ba <os_code_begin : 112a20 >			  ## tasks.c:1860:5
  112eda:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:1862:5
  112ee0:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1862:5
  112ee4:    00 04             	pc = [sp++]			  ## tasks.c:1866:1


vTaskSetTimeOutState:
  112ee6:    74 04             	[--sp] = {rets, r4}			  ## tasks.c:2894:0
  112ee8:    04 16             	r4 = r0			  ## tasks.c:2894:0
  112eea:    84 4d             	if (r4 != 0) goto 0x1a <vTaskSetTimeOutState+0x20 : 112f06 >			  ## tasks.c:2894:0
  112eec:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  112ef2:    42 f0 4f 0b       	r2 = 0xb4f  #			  ## FreeRTOSConfig.h:181:5
  112ef6:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  112ef8:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  112efe:    c1 ff 38 4a 11 00 	r1 = 0x114a38 <vTickISR+0x254 : 114a38 >			  ## FreeRTOSConfig.h:181:5
  112f04:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112f06:    c0 ff b4 1c 03 00 	r0 = 0x31cb4 <xNumOfOverflows : 31cb4 >			  ## tasks.c:2896:33
  112f0c:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2896:33
  112f0e:    c0 60             	[r4+0x0] = r0			  ## tasks.c:2896:31
  112f10:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:2897:34
  112f16:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2897:34
  112f18:    c0 61             	[r4+0x4] = r0			  ## tasks.c:2897:32
  112f1a:    54 04             	{pc, r4} = [sp++]			  ## tasks.c:2898:1


xTaskCheckForTimeOut:
  112f1c:    78 04             	[--sp] = {rets, r8-r4}			  ## tasks.c:2902:0
  112f1e:    04 15             	r5_r4 = r1_r0			  ## tasks.c:2902:0
  112f20:    c6 ff e0 1c 03 00 	r6 = 0x31ce0 <mask_log_e : 31ce0 >			  ## tasks.c:2902:0
  112f26:    c8 ff 61 49 11 00 	r8 = 0x114961 <vTickISR+0x17C : 114960 >			  ## tasks.c:2902:0
  112f2c:    c7 ff 4d 4a 11 00 	r7 = 0x114a4d <vTickISR+0x268 : 114a4c >			  ## tasks.c:2902:0
  112f32:    84 46             	if (r4 != 0) goto 0xc <xTaskCheckForTimeOut+0x24 : 112f40 >			  ## tasks.c:2902:0
  112f34:    42 f0 59 0b       	r2 = 0xb59  #			  ## FreeRTOSConfig.h:181:5
  112f38:    63 60             		 r3 = [r6+0x0] 			  ## FreeRTOSConfig.h:181:5
  112f3a:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  112f3c:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  112f3e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112f40:    85 46             	if (r5 != 0) goto 0xc <xTaskCheckForTimeOut+0x32 : 112f4e >
  112f42:    42 f0 5a 0b       	r2 = 0xb5a  #			  ## FreeRTOSConfig.h:181:5
  112f46:    63 60             		 r3 = [r6+0x0] 			  ## FreeRTOSConfig.h:181:5
  112f48:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  112f4a:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  112f4c:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  112f4e:    bf ea 67 fd       	call -0x532 <os_code_begin : 112a20 >			  ## tasks.c:2908:5
  112f52:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:2911:44
  112f58:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:2911:44
  112f5a:    bf ea 61 fd       	call -0x53e <os_code_begin : 112a20 >			  ## tasks.c:2914:13
  112f5e:    c2 ff 8c 1c 03 00 	r2 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2914:13
  112f64:    26 60             	r6 = [r2+0x0] 			  ## tasks.c:2914:13
  112f66:    bf ea 62 fd       	call -0x53c <local_irq_enable : 112a2e >			  ## tasks.c:2914:13
  112f6a:    50 ee 69 05       	r0 = b[r6+0x59] (u)			  ## tasks.c:2914:27
  112f6e:    00 4d             	if (r0 == 0) goto 0x1a <xTaskCheckForTimeOut+0x6E : 112f8a >			  ## tasks.c:2914:13
  112f70:    bf ea 56 fd       	call -0x554 <os_code_begin : 112a20 >			  ## tasks.c:2917:13
  112f74:    22 60             	r2 = [r2+0x0] 			  ## tasks.c:2917:13
  112f76:    bf ea 5a fd       	call -0x54c <local_irq_enable : 112a2e >			  ## tasks.c:2917:13
  112f7a:    40 20             	r0 = 0x0			  ## tasks.c:2917:42
  112f7c:    52 ee 29 05       	b[r2+0x59] = r0			  ## tasks.c:2917:42
  112f80:    42 21             	r2 = 0x1
  112f82:    bf ea 54 fd       	call -0x558 <local_irq_enable : 112a2e >			  ## tasks.c:2947:5
  112f86:    20 16             	r0 = r2			  ## tasks.c:2949:5
  112f88:    58 04             	{pc, r8-r4} = [sp++]			  ## tasks.c:2949:5
  112f8a:    50 60             	r0 = [r5+0x0] 			  ## tasks.c:2923:17
  112f8c:    42 20             	r2 = 0x0			  ## tasks.c:2923:17
  112f8e:    70 f8 f8 ff       	if (r0 == -0x1) goto -0x10 <xTaskCheckForTimeOut+0x66 : 112f82 >			  ## tasks.c:2923:17
  112f92:    c1 ff b4 1c 03 00 	r1 = 0x31cb4 <xNumOfOverflows : 31cb4 >			  ## tasks.c:2931:22
  112f98:    16 60             	r6 = [r1+0x0] 			  ## tasks.c:2931:22
  112f9a:    47 60             	r7 = [r4+0x0] 			  ## tasks.c:2931:52
  112f9c:    41 61             	r1 = [r4+0x4] 			  ## tasks.c:2931:52
  112f9e:    42 21             	r2 = 0x1			  ## tasks.c:2931:52
  112fa0:    07 e8 02 60       	if (r6 == r7) goto 0x4 <xTaskCheckForTimeOut+0x8C : 112fa8 >			  ## tasks.c:2931:52
  112fa4:    01 e9 ed 31       	if (r3 >= r1) goto -0x26 <xTaskCheckForTimeOut+0x66 : 112f82 >
  112fa8:    39 1e             	r1 = r3 - r1			  ## tasks.c:2938:58
  112faa:    81 ec ea 01       	if (r0 <= r1) goto -0x2c <xTaskCheckForTimeOut+0x66 : 112f82 >			  ## tasks.c:2938:58
  112fae:    08 1e             	r0 = r0 - r1			  ## tasks.c:2940:36
  112fb0:    40 d6             	r0 = r4  #			  ## tasks.c:2941:21
  112fb2:    d0 60             		 [r5+0x0] = r0			  ## tasks.c:2940:36
  112fb4:    41 98             	call -0xd0 <vTaskSetTimeOutState : 112ee6 >			  ## tasks.c:2941:21
  112fb6:    42 20             	r2 = 0x0
  112fb8:    f7 84             	goto -0x38 <xTaskCheckForTimeOut+0x66 : 112f82 >


vListInsert:
  112fba:    75 04             	[--sp] = {rets, r5, r4}			  ## list.c:155:0
  112fbc:    14 60             	r4 = [r1+0x0] 			  ## list.c:157:57
  112fbe:    74 f8 07 fe       	if (r4 == -0x1) goto 0xe <vListInsert+0x16 : 112fd0 >
  112fc2:    0b 88             	r3 = r0 + 0x8
  112fc4:    32 16             	r2 = r3
  112fc6:    23 61             	r3 = [r2+0x4] 			  ## list.c:198:76
  112fc8:    35 60             	r5 = [r3+0x0] 			  ## list.c:198:84
  112fca:    84 ec fb 51       	if (r5 <= r4) goto -0xa <vListInsert+0xA : 112fc4 >			  ## list.c:198:84
  112fce:    04 82             	goto 0x4 <vListInsert+0x1A : 112fd4 >			  ## list.c:198:84
  112fd0:    02 64             	r2 = [r0+0x10] 			  ## list.c:174:39
  112fd2:    23 61             	r3 = [r2+0x4] 
  112fd4:    93 61             	[r1+0x4] = r3			  ## list.c:204:27
  112fd6:    b1 62             	[r3+0x8] = r1			  ## list.c:205:39
  112fd8:    92 62             	[r1+0x8] = r2			  ## list.c:206:31
  112fda:    a1 61             	[r2+0x4] = r1			  ## list.c:207:24
  112fdc:    90 64             	[r1+0x10] = r0			  ## list.c:211:32
  112fde:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## list.c:213:30
  112fe2:    55 04             	{pc, r5, r4} = [sp++]			  ## list.c:214:1


prvAddCurrentTaskToDelayedList:
  112fe4:    77 04             	[--sp] = {rets, r7-r4}			  ## tasks.c:4419:0
  112fe6:    c2 ff a8 1c 03 00 	r2 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:4421:40
  112fec:    04 d5             	r5_r4 = r1_r0  #			  ## tasks.c:4421:40
  112fee:    27 60             		 r7 = [r2+0x0] 			  ## tasks.c:4421:40
  112ff0:    bf ea 16 fd       	call -0x5d4 <os_code_begin : 112a20 >			  ## tasks.c:4431:9
  112ff4:    c6 ff 8c 1c 03 00 	r6 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:4431:9
  112ffa:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4431:9
  112ffc:    bf ea 17 fd       	call -0x5d2 <local_irq_enable : 112a2e >			  ## tasks.c:4431:9
  113000:    40 20             	r0 = 0x0			  ## tasks.c:4431:9
  113002:    52 ee 29 05       	b[r2+0x59] = r0			  ## tasks.c:4431:38
  113006:    bf ea 0b fd       	call -0x5ea <os_code_begin : 112a20 >			  ## tasks.c:4434:5
  11300a:    bf ea 09 fd       	call -0x5ee <os_code_begin : 112a20 >			  ## tasks.c:4437:24
  11300e:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4437:24
  113010:    bf ea 0d fd       	call -0x5e6 <local_irq_enable : 112a2e >			  ## tasks.c:4437:24
  113014:    28 94             	r0 = r2 + 0x14			  ## tasks.c:4437:38
  113016:    bf ea 64 fd       	call -0x538 <uxListRemove : 112ae2 >			  ## tasks.c:4437:9
  11301a:    80 4b             	if (r0 != 0) goto 0x16 <prvAddCurrentTaskToDelayedList+0x4E : 113032 >
  11301c:    bf ea 00 fd       	call -0x600 <os_code_begin : 112a20 >			  ## tasks.c:4442:9
  113020:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4442:9
  113022:    bf ea 04 fd       	call -0x5f8 <local_irq_enable : 112a2e >			  ## tasks.c:4442:9
  113026:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:4442:9
  113028:    c1 ff 98 1c 03 00 	r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:4442:9
  11302e:    66 e8 03 10       	[r1+0x0] &= ~(1 << r0)			  ## tasks.c:4442:9
  113032:    bf ea fc fc       	call -0x608 <local_irq_enable : 112a2e >			  ## tasks.c:4446:5
  113036:    f4 f8 0c fe       	if (r4 != -0x1) goto 0x18 <prvAddCurrentTaskToDelayedList+0x6E : 113052 >			  ## tasks.c:4446:5
  11303a:    05 4b             	if (r5 == 0) goto 0x16 <prvAddCurrentTaskToDelayedList+0x6E : 113052 >
  11303c:    bf ea f0 fc       	call -0x620 <os_code_begin : 112a20 >			  ## tasks.c:4453:51
  113040:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4453:51
  113042:    bf ea f4 fc       	call -0x618 <local_irq_enable : 112a2e >			  ## tasks.c:4453:51
  113046:    29 94             	r1 = r2 + 0x14			  ## tasks.c:4453:65
  113048:    c0 ff dc 1d 03 00 	r0 = 0x31ddc <xSuspendedTaskList : 31ddc >			  ## tasks.c:4453:13
  11304e:    37 04             	{rets, r7-r4} = [sp++]			  ## tasks.c:4453:13
  113050:    a6 9c             	goto -0x548 <vListInsertEnd : 112b0a >			  ## tasks.c:4453:13
  113052:    74 18             	r4 += r7
  113054:    bf ea e4 fc       	call -0x638 <os_code_begin : 112a20 >			  ## tasks.c:4461:13
  113058:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:4461:13
  11305a:    bf ea e8 fc       	call -0x630 <local_irq_enable : 112a2e >			  ## tasks.c:4461:13
  11305e:    a4 65             	[r2+0x14] = r4			  ## tasks.c:4461:13
  113060:    40 21             	r0 = 0x1			  ## tasks.c:4461:13
  113062:    14 e9 00 07       	if (r4 >= r7) {			  ## tasks.c:4461:13
  113066:    40 20             		r0 = 0x0
                               	}			  ## tasks.c:4461:13
  113068:    80 f8 0d 02       	if (r0 != 0x1) goto 0x1a <prvAddCurrentTaskToDelayedList+0xA2 : 113086 >			  ## tasks.c:4461:13
  11306c:    c0 ff f4 1d 03 00 	r0 = 0x31df4 <pxOverflowDelayedTaskList : 31df4 >			  ## tasks.c:4466:29
  113072:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:4466:29
  113074:    bf ea d4 fc       	call -0x658 <os_code_begin : 112a20 >			  ## tasks.c:4466:58
  113078:    63 60             	r3 = [r6+0x0] 			  ## tasks.c:4466:58
  11307a:    bf ea d8 fc       	call -0x650 <local_irq_enable : 112a2e >			  ## tasks.c:4466:58
  11307e:    39 94             	r1 = r3 + 0x14			  ## tasks.c:4466:72
  113080:    20 16             	r0 = r2			  ## tasks.c:4466:17
  113082:    37 04             	{rets, r7-r4} = [sp++]			  ## tasks.c:4466:17
  113084:    c7 9a             	goto -0xcc <vListInsert : 112fba >			  ## tasks.c:4466:17
  113086:    c0 ff f0 1d 03 00 	r0 = 0x31df0 <pxDelayedTaskList : 31df0 >			  ## tasks.c:4470:29
  11308c:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:4470:29
  11308e:    bf ea c7 fc       	call -0x672 <os_code_begin : 112a20 >			  ## tasks.c:4470:50
  113092:    63 60             	r3 = [r6+0x0] 			  ## tasks.c:4470:50
  113094:    bf ea cb fc       	call -0x66a <local_irq_enable : 112a2e >			  ## tasks.c:4470:50
  113098:    39 94             	r1 = r3 + 0x14			  ## tasks.c:4470:64
  11309a:    20 16             	r0 = r2			  ## tasks.c:4470:17
  11309c:    41 8e             	call -0xe4 <vListInsert : 112fba >			  ## tasks.c:4470:17
  11309e:    c0 ff a4 1c 03 00 	r0 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >
  1130a4:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:4475:35
  1130a6:    94 e9 00 01       	if (r4 < r1) {			  ## tasks.c:4475:35
  1130aa:    84 60             		[r0+0x0] = r4
                               	}			  ## tasks.c:4476:42
  1130ac:    57 04             	{pc, r7-r4} = [sp++]			  ## tasks.c:4514:1


vTaskPlaceOnEventList:
  1130ae:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2715:0
  1130b0:    14 16             	r4 = r1			  ## tasks.c:2715:0
  1130b2:    05 16             	r5 = r0			  ## tasks.c:2715:0
  1130b4:    85 4d             	if (r5 != 0) goto 0x1a <vTaskPlaceOnEventList+0x22 : 1130d0 >			  ## tasks.c:2715:0
  1130b6:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  1130bc:    42 f0 9c 0a       	r2 = 0xa9c  #			  ## FreeRTOSConfig.h:181:5
  1130c0:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1130c2:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  1130c8:    c1 ff 09 4a 11 00 	r1 = 0x114a09 <vTickISR+0x224 : 114a08 >			  ## FreeRTOSConfig.h:181:5
  1130ce:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1130d0:    bf ea a6 fc       	call -0x6b4 <os_code_begin : 112a20 >			  ## tasks.c:2725:32
  1130d4:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2725:32
  1130da:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2725:32
  1130dc:    bf ea a7 fc       	call -0x6b2 <local_irq_enable : 112a2e >			  ## tasks.c:2725:32
  1130e0:    01 e1 28 20       	r1 = r2 + 0x28			  ## tasks.c:2725:46
  1130e4:    50 16             	r0 = r5			  ## tasks.c:2725:5
  1130e6:    bf ea 68 ff       	call -0x130 <vListInsert : 112fba >			  ## tasks.c:2725:5
  1130ea:    41 21             	r1 = 0x1			  ## tasks.c:2727:5
  1130ec:    40 16             	r0 = r4			  ## tasks.c:2727:5
  1130ee:    35 04             	{rets, r5, r4} = [sp++]			  ## tasks.c:2727:5
  1130f0:    b7 99             	goto -0x10e <prvAddCurrentTaskToDelayedList : 112fe4 >			  ## tasks.c:2727:5


prvUnlockQueue:
  1130f2:    77 04             	[--sp] = {rets, r7-r4}			  ## queue.c:1601:0
  1130f4:    04 16             	r4 = r0			  ## queue.c:1601:0
  1130f6:    bf ea 93 fc       	call -0x6da <os_code_begin : 112a20 >			  ## queue.c:1608:5
  1130fa:    05 e1 44 40       	r5 = r4 + 0x44			  ## queue.c:1608:5
  1130fe:    5f 41             	r7 = b[r5+0x1] (u)			  ## queue.c:1610:35
  113100:    c6 ff ac 1c 03 00 	r6 = 0x31cac <xYieldPending : 31cac >			  ## queue.c:1610:35
  113106:    04 8b             	goto 0x16 <prvUnlockQueue+0x2C : 11311e >			  ## queue.c:1610:35
  113108:    40 16             	r0 = r4			  ## queue.c:1648:21
  11310a:    d0 ec 06 12       	r1 = [++r0=0x24]			  ## queue.c:1648:21
  11310e:    01 4a             	if (r1 == 0) goto 0x14 <prvUnlockQueue+0x32 : 113124 >			  ## queue.c:1648:21
  113110:    bf ea 17 fd       	call -0x5d2 <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:1649:25
  113114:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1649:25
  113118:    40 ea 01 60       		[r6+0x0] = 0x1
                               	}			  ## tasks.c:2955:19
  11311c:    ff 3f             	r7 += -0x1			  ## queue.c:1662:13
  11311e:    78 17             	r0 = r7.b0 (s)			  ## queue.c:1613:24
  113120:    00 fd f2 03       	ifs (r0 >= 0x1) goto -0x1c <prvUnlockQueue+0x16 : 113108 >			  ## queue.c:1613:24
  113124:    78 3f             	r0 = 0xff			  ## queue.c:1665:26
  113126:    d8 41             	b[r5+0x1] = r0			  ## queue.c:1665:26
  113128:    bf ea 81 fc       	call -0x6fe <local_irq_enable : 112a2e >			  ## queue.c:1667:5
  11312c:    bf ea 78 fc       	call -0x710 <os_code_begin : 112a20 >			  ## queue.c:1670:5
  113130:    5f 40             	r7 = b[r5+0x0] (u)			  ## queue.c:1672:35
  113132:    04 8b             	goto 0x16 <prvUnlockQueue+0x58 : 11314a >			  ## queue.c:1672:35
  113134:    40 16             	r0 = r4			  ## queue.c:1675:17
  113136:    d0 ec 02 11       	r1 = [++r0=0x10]			  ## queue.c:1675:17
  11313a:    01 4a             	if (r1 == 0) goto 0x14 <prvUnlockQueue+0x5E : 113150 >			  ## queue.c:1675:17
  11313c:    bf ea 01 fd       	call -0x5fe <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:1676:21
  113140:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1676:21
  113144:    40 ea 01 60       		[r6+0x0] = 0x1
                               	}			  ## tasks.c:2955:19
  113148:    ff 3f             	r7 += -0x1			  ## queue.c:1682:17
  11314a:    78 17             	r0 = r7.b0 (s)			  ## queue.c:1674:24
  11314c:    00 fd f2 03       	ifs (r0 >= 0x1) goto -0x1c <prvUnlockQueue+0x42 : 113134 >			  ## queue.c:1674:24
  113150:    78 3f             	r0 = 0xff			  ## queue.c:1688:26
  113152:    d8 40             	b[r5+0x0] = r0			  ## queue.c:1688:26
  113154:    37 04             	{rets, r7-r4} = [sp++]			  ## queue.c:1690:5
  113156:    36 8b             	goto -0x72a <local_irq_enable : 112a2e >			  ## queue.c:1690:5


xTaskIncrementTick:
  113158:    7c 04             	[--sp] = {rets, r12-r4}			  ## tasks.c:2362:0
  11315a:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:2370:9
  113160:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2370:9
  113162:    00 47             	if (r0 == 0) goto 0xe <xTaskIncrementTick+0x1A : 113172 >			  ## tasks.c:2370:9
  113164:    c0 ff b0 1c 03 00 	r0 = 0x31cb0 <uxPendedTicks : 31cb0 >			  ## tasks.c:2491:9
  11316a:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:2491:9
  11316e:    40 20             	r0 = 0x0			  ## tasks.c:2491:9
  113170:    34 95             	goto 0xea <xTaskIncrementTick+0x104 : 11325c >			  ## tasks.c:2491:9
  113172:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:2373:44
  113178:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:2373:44
  11317a:    1d 81             	r5 = r1 + 0x1			  ## tasks.c:2373:55
  11317c:    85 60             	[r0+0x0] = r5			  ## tasks.c:2377:20
  11317e:    c6 ff f0 1d 03 00 	r6 = 0x31df0 <pxDelayedTaskList : 31df0 >			  ## tasks.c:2377:20
  113184:    85 5e             	if (r5 != 0) goto 0x3c <xTaskIncrementTick+0x6A : 1131c2 >			  ## tasks.c:2377:20
  113186:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2380:13
  113188:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2380:13
  11318a:    00 4d             	if (r0 == 0) goto 0x1a <xTaskIncrementTick+0x4E : 1131a6 >			  ## tasks.c:2380:13
  11318c:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113192:    42 f0 4c 09       	r2 = 0x94c  #			  ## FreeRTOSConfig.h:181:5
  113196:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113198:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  11319e:    c1 ff 90 49 11 00 	r1 = 0x114990 <vTickISR+0x1AC : 114990 >			  ## FreeRTOSConfig.h:181:5
  1131a4:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1131a6:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2380:13
  1131a8:    c1 ff f4 1d 03 00 	r1 = 0x31df4 <pxOverflowDelayedTaskList : 31df4 >			  ## tasks.c:2380:13
  1131ae:    12 60             	r2 = [r1+0x0] 			  ## tasks.c:2380:13
  1131b0:    e2 60             	[r6+0x0] = r2			  ## tasks.c:2380:13
  1131b2:    90 60             	[r1+0x0] = r0			  ## tasks.c:2380:13
  1131b4:    c0 ff b4 1c 03 00 	r0 = 0x31cb4 <xNumOfOverflows : 31cb4 >			  ## tasks.c:2380:13
  1131ba:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:2380:13
  1131be:    bf ea af fc       	call -0x6a2 <prvResetNextTaskUnblockTime : 112b20 >			  ## tasks.c:2380:13
  1131c2:    ca ff a4 1c 03 00 	r10 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >
  1131c8:    d0 ec a0 00       	r0 = [r10+0x0]			  ## tasks.c:2390:32
  1131cc:    c3 14             	r11 = 0			  ## tasks.c:2390:32
  1131ce:    c8 ff ec 1c 03 00 	r8 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:2390:32
  1131d4:    c9 ff 8c 1c 03 00 	r9 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2390:32
  1131da:    80 e9 30 50       	if (r5 < r0) goto 0x60 <xTaskIncrementTick+0xE6 : 11323e >			  ## tasks.c:2390:32
  1131de:    bf ea 1f fc       	call -0x7c2 <os_code_begin : 112a20 >			  ## tasks.c:2391:13
  1131e2:    cc ff 98 1c 03 00 	r12 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:2391:13
  1131e8:    14 82             	goto 0x44 <xTaskIncrementTick+0xD6 : 11322e >			  ## tasks.c:2391:13
  1131ea:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2406:39
  1131ec:    00 63             	r0 = [r0+0xc] 			  ## tasks.c:2406:39
  1131ee:    07 63             	r7 = [r0+0xc] 			  ## tasks.c:2406:39
  1131f0:    70 65             	r0 = [r7+0x14] 			  ## tasks.c:2407:34
  1131f2:    80 e9 20 50       	if (r5 < r0) goto 0x40 <xTaskIncrementTick+0xDE : 113236 >
  1131f6:    7c 94             	r4 = r7 + 0x14			  ## tasks.c:2407:34
  1131f8:    40 16             	r0 = r4			  ## tasks.c:2422:28
  1131fa:    bf ea 72 fc       	call -0x71c <uxListRemove : 112ae2 >			  ## tasks.c:2422:28
  1131fe:    70 6e             	r0 = [r7+0x38] 			  ## tasks.c:2426:25
  113200:    b0 e8 00 40       	if (r0 != 0x0) {			  ## tasks.c:2426:25
  113204:    00 e1 28 70       		r0 = r7 + 0x28			  ## tasks.c:2426:25
  113208:    bf ea 6b fc       		call -0x72a
                               	} <uxListRemove : 112ae2 >			  ## tasks.c:2427:32
  11320c:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:2434:21
  11320e:    66 e8 00 c0       	[r12+0x0] |= 1 << r0			  ## tasks.c:2434:21
  113212:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2434:21
  113216:    80 18             	r0 += r8			  ## tasks.c:2434:21
  113218:    41 16             	r1 = r4			  ## tasks.c:2434:21
  11321a:    bf ea 76 fc       	call -0x714 <vListInsertEnd : 112b0a >			  ## tasks.c:2434:21
  11321e:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:2446:37
  113220:    d0 ec 90 10       	r1 = [r9+0x0]			  ## tasks.c:2446:51
  113224:    11 6f             	r1 = [r1+0x3c] 			  ## tasks.c:2446:66
  113226:    10 e9 00 01       	if (r0 >= r1) {
  11322a:    4b e0 01 00       		r11 = 0x1
                               	}			  ## tasks.c:2434:21
  11322e:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:2393:21
  113230:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2393:21
  113232:    e0 5b             	if (r0 != 0) goto -0x4a <xTaskIncrementTick+0x92 : 1131ea >			  ## tasks.c:2393:21
  113234:    10 3f             	r0 = -0x1
  113236:    d0 ec a1 00       	[r10+0x0] = r0
  11323a:    bf ea f8 fb       	call -0x810 <local_irq_enable : 112a2e >			  ## tasks.c:2463:13
  11323e:    bf ea ef fb       	call -0x822 <os_code_begin : 112a20 >			  ## tasks.c:2471:17
  113242:    d0 ec 90 20       	r2 = [r9+0x0]			  ## tasks.c:2471:17
  113246:    bf ea f2 fb       	call -0x81c <local_irq_enable : 112a2e >			  ## tasks.c:2471:17
  11324a:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:2471:17
  11324c:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:2471:17
  113250:    d8 ec 02 18       	r1 = [r0+r8]			  ## tasks.c:2471:17
  113254:    40 21             	r0 = 0x1			  ## tasks.c:2471:91
  113256:    b1 ec 01 00       	if (r1 <= 0x1) {			  ## tasks.c:2471:91
  11325a:    b0 16             		r0 = r11
                               	}			  ## tasks.c:2471:17
  11325c:    c1 ff ac 1c 03 00 	r1 = 0x31cac <xYieldPending : 31cac >			  ## tasks.c:2503:13
  113262:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:2503:13
  113264:    b1 e8 00 00       	if (r1 != 0x0) {			  ## tasks.c:2503:13
  113268:    40 21             		r0 = 0x1
                               	}			  ## tasks.c:2503:13
  11326a:    5c 04             	{pc, r12-r4} = [sp++]			  ## tasks.c:2511:5


xTaskResumeAll:
  11326c:    7a 04             	[--sp] = {rets, r10-r4}			  ## tasks.c:1924:0
  11326e:    c4 ff a0 1c 03 00 	r4 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:1924:0
  113274:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:1930:5
  113276:    80 4d             	if (r0 != 0) goto 0x1a <xTaskResumeAll+0x26 : 113292 >			  ## tasks.c:1930:5
  113278:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  11327e:    42 f0 8a 07       	r2 = 0x78a  #			  ## FreeRTOSConfig.h:181:5
  113282:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113284:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  11328a:    c1 ff 81 49 11 00 	r1 = 0x114981 <vTickISR+0x19C : 114980 >			  ## FreeRTOSConfig.h:181:5
  113290:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113292:    c0 eb ff 4f       	[r4+0x0] += -0x1			  ## tasks.c:1940:9
  113296:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:1942:13
  113298:    42 20             	r2 = 0x0			  ## tasks.c:1942:13
  11329a:    00 44             	if (r0 == 0) goto 0x8 <xTaskResumeAll+0x38 : 1132a4 >			  ## tasks.c:1942:13
  11329c:    bf ea c7 fb       	call -0x872 <local_irq_enable : 112a2e >			  ## tasks.c:2015:5
  1132a0:    20 16             	r0 = r2			  ## tasks.c:2017:5
  1132a2:    5a 04             	{pc, r10-r4} = [sp++]			  ## tasks.c:2017:5
  1132a4:    c0 ff 88 1c 03 00 	r0 = 0x31c88 <uxCurrentNumberOfTasks : 31c88 >			  ## tasks.c:1943:17
  1132aa:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1943:17
  1132ac:    70 57             	if (r0 == 0) goto -0x12 <xTaskResumeAll+0x30 : 11329c >			  ## tasks.c:1943:17
  1132ae:    47 20             	r7 = 0x0
  1132b0:    c6 ff b4 1d 03 00 	r6 = 0x31db4 <xPendingReadyList : 31db4 >
  1132b6:    c8 ff ac 1c 03 00 	r8 = 0x31cac <xYieldPending : 31cac >
  1132bc:    c9 ff 98 1c 03 00 	r9 = 0x31c98 <uxTopReadyPriority : 31c98 >
  1132c2:    ca ff ec 1c 03 00 	r10 = 0x31cec <pxReadyTasksLists : 31cec >
  1132c8:    c5 ff 8c 1c 03 00 	r5 = 0x31c8c <CurrentTCB : 31c8c >
  1132ce:    04 9a             	goto 0x34 <xTaskResumeAll+0x98 : 113304 >
  1132d0:    60 63             	r0 = [r6+0xc] 			  ## tasks.c:1947:39
  1132d2:    07 63             	r7 = [r0+0xc] 			  ## tasks.c:1947:39
  1132d4:    00 e1 28 70       	r0 = r7 + 0x28			  ## tasks.c:1948:50
  1132d8:    bf ea 03 fc       	call -0x7fa <uxListRemove : 112ae2 >			  ## tasks.c:1948:28
  1132dc:    7c 94             	r4 = r7 + 0x14			  ## tasks.c:1949:50
  1132de:    40 16             	r0 = r4			  ## tasks.c:1949:28
  1132e0:    bf ea ff fb       	call -0x802 <uxListRemove : 112ae2 >			  ## tasks.c:1949:28
  1132e4:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:1950:21
  1132e6:    66 e8 00 90       	[r9+0x0] |= 1 << r0			  ## tasks.c:1950:21
  1132ea:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:1950:21
  1132ee:    a0 18             	r0 += r10			  ## tasks.c:1950:21
  1132f0:    41 16             	r1 = r4			  ## tasks.c:1950:21
  1132f2:    bf ea 0a fc       	call -0x7ec <vListInsertEnd : 112b0a >			  ## tasks.c:1950:21
  1132f6:    70 6f             	r0 = [r7+0x3c] 			  ## tasks.c:1955:33
  1132f8:    51 60             	r1 = [r5+0x0] 			  ## tasks.c:1955:47
  1132fa:    11 6f             	r1 = [r1+0x3c] 			  ## tasks.c:1955:62
  1132fc:    10 e9 00 01       	if (r0 >= r1) {			  ## tasks.c:1955:62
  113300:    40 ea 01 80       		[r8+0x0] = 0x1
                               	}			  ## tasks.c:1960:39
  113304:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1946:24
  113306:    f0 44             	if (r0 != 0) goto -0x38 <xTaskResumeAll+0x64 : 1132d0 >			  ## tasks.c:1946:24
  113308:    b7 e8 00 00       	if (r7 != 0x0) {
  11330c:    bf ea 08 fc       		call -0x7f0
                               	} <prvResetNextTaskUnblockTime : 112b20 >			  ## tasks.c:1973:21
  113310:    c4 ff b0 1c 03 00 	r4 = 0x31cb0 <uxPendedTicks : 31cb0 >			  ## tasks.c:1973:21
  113316:    45 60             	r5 = [r4+0x0] 			  ## tasks.c:1981:50
  113318:    05 4a             	if (r5 == 0) goto 0x14 <xTaskResumeAll+0xC2 : 11332e >
  11331a:    bf ea 1d ff       	call -0x1c6 <xTaskIncrementTick : 113158 >			  ## tasks.c:1985:33
  11331e:    b0 e8 00 00       	if (r0 != 0x0) {			  ## tasks.c:1985:33
  113322:    40 ea 01 80       		[r8+0x0] = 0x1
                               	}			  ## tasks.c:1986:47
  113326:    fd 3f             	r5 += -0x1			  ## tasks.c:1990:29
  113328:    f5 58             	if (r5 != 0) goto -0x10 <xTaskResumeAll+0xAE : 11331a >
  11332a:    40 ea 00 40       	[r4+0x0] = 0x0			  ## tasks.c:1993:39
  11332e:    d0 ec 80 00       	r0 = [r8+0x0]			  ## tasks.c:1999:21
  113332:    00 44             	if (r0 == 0) goto 0x8 <xTaskResumeAll+0xD0 : 11333c >			  ## tasks.c:1999:21
  113334:    bf ea 92 fc       	call -0x6dc <vPortYield : 112c5c >			  ## tasks.c:2005:21
  113338:    42 21             	r2 = 0x1			  ## tasks.c:2005:21
  11333a:    d7 90             	goto -0xa0 <xTaskResumeAll+0x30 : 11329c >			  ## tasks.c:2005:21
  11333c:    42 20             	r2 = 0x0
  11333e:    d7 8e             	goto -0xa4 <xTaskResumeAll+0x30 : 11329c >


xQueueGenericSend:
  113340:    7d 04             	[--sp] = {rets, r13-r4}			  ## queue.c:699:0
  113342:    e2 9d             	sp += -0xc			  ## queue.c:699:0
  113344:    27 16             	r7 = r2			  ## queue.c:699:0
  113346:    18 16             	r8 = r1			  ## queue.c:699:0
  113348:    04 16             	r4 = r0			  ## queue.c:699:0
  11334a:    35 d6             	r5 = r3  #			  ## queue.c:699:0
  11334c:    87 22             		 [sp+8] = r7			  ## queue.c:699:0
  11334e:    cb ff e0 1c 03 00 	r11 = 0x31ce0 <mask_log_e : 31ce0 >			  ## queue.c:699:0
  113354:    c9 ff 17 48 11 00 	r9 = 0x114817 <vTickISR+0x32 : 114816 >			  ## queue.c:699:0
  11335a:    ca ff 38 48 11 00 	r10 = 0x114838 <vTickISR+0x54 : 114838 >			  ## queue.c:699:0
  113360:    84 47             	if (r4 != 0) goto 0xe <xQueueGenericSend+0x30 : 113370 >			  ## queue.c:699:0
  113362:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  113366:    42 e0 c0 02       	r2 = 0x2c0			  ## FreeRTOSConfig.h:181:5
  11336a:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  11336c:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  11336e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113370:    06 e1 40 40       	r6 = r4 + 0x40
  113374:    88 f8 09 00       	if (r8 != 0x0) goto 0x12 <xQueueGenericSend+0x4A : 11338a >
  113378:    60 60             	r0 = [r6+0x0] 			  ## queue.c:705:5
  11337a:    00 47             	if (r0 == 0) goto 0xe <xQueueGenericSend+0x4A : 11338a >			  ## queue.c:705:5
  11337c:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  113380:    42 e0 c1 02       	r2 = 0x2c1			  ## FreeRTOSConfig.h:181:5
  113384:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  113386:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  113388:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  11338a:    85 f8 0a 04       	if (r5 != 0x2) goto 0x14 <xQueueGenericSend+0x62 : 1133a2 >
  11338e:    40 6f             	r0 = [r4+0x3c] 			  ## queue.c:706:5
  113390:    00 f8 07 02       	if (r0 == 0x1) goto 0xe <xQueueGenericSend+0x62 : 1133a2 >			  ## queue.c:706:5
  113394:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  113398:    42 e0 c2 02       	r2 = 0x2c2			  ## FreeRTOSConfig.h:181:5
  11339c:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  11339e:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  1133a0:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1133a2:    c0 ff 90 1c 03 00 	r0 = 0x31c90 <xSchedulerRunning : 31c90 >			  ## tasks.c:3522:9
  1133a8:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3522:9
  1133aa:    00 4d             	if (r0 == 0) goto 0x1a <xQueueGenericSend+0x86 : 1133c6 >			  ## tasks.c:3522:9
  1133ac:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:3525:13
  1133b2:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3525:13
  1133b4:    00 48             	if (r0 == 0) goto 0x10 <xQueueGenericSend+0x86 : 1133c6 >			  ## tasks.c:3525:13
  1133b6:    07 47             	if (r7 == 0) goto 0xe <xQueueGenericSend+0x86 : 1133c6 >
  1133b8:    d0 ec b0 30       	r3 = [r11+0x0]			  ## FreeRTOSConfig.h:181:5
  1133bc:    42 e0 c5 02       	r2 = 0x2c5			  ## FreeRTOSConfig.h:181:5
  1133c0:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1133c2:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  1133c4:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1133c6:    f8 e8 00 90       	r9 = sp + 0
  1133ca:    0d e1 10 40       	r13 = r4 + 0x10
  1133ce:    c2 14             	r10 = 0
  1133d0:    cb ff b4 1c 03 00 	r11 = 0x31cb4 <xNumOfOverflows : 31cb4 >
  1133d6:    cc ff a8 1c 03 00 	r12 = 0x31ca8 <xTickCount : 31ca8 >
  1133dc:    47 20             	r7 = 0x0
  1133de:    14 9a             	goto 0x74 <xQueueGenericSend+0x114 : 113454 >
  1133e0:    87 48             	if (r7 != 0) goto 0x10 <xQueueGenericSend+0xB2 : 1133f2 >
  1133e2:    d0 ec b0 00       	r0 = [r11+0x0]			  ## tasks.c:2896:33
  1133e6:    80 20             	[sp] = r0			  ## tasks.c:2896:31
  1133e8:    d0 ec c0 00       	r0 = [r12+0x0]			  ## tasks.c:2897:34
  1133ec:    d0 ec 95 00       	[r9+0x4] = r0			  ## tasks.c:2897:32
  1133f0:    47 21             	r7 = 0x1
  1133f2:    bf ea 1c fb       	call -0x9c8 <local_irq_enable : 112a2e >			  ## queue.c:812:9
  1133f6:    bf ea 6d fd       	call -0x526 <vTaskSuspendAll : 112ed4 >			  ## queue.c:817:9
  1133fa:    bf ea 11 fb       	call -0x9de <os_code_begin : 112a20 >			  ## queue.c:818:9
  1133fe:    68 44             	r0 = b[r6+0x4] (u)			  ## queue.c:818:9
  113400:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:818:9
  113404:    52 ee 64 a0       		b[r6+0x4] = r10
                               	}			  ## queue.c:818:9
  113408:    68 45             	r0 = b[r6+0x5] (u)			  ## queue.c:818:9
  11340a:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:818:9
  11340e:    52 ee 65 a0       		b[r6+0x5] = r10
                               	}			  ## queue.c:818:9
  113412:    bf ea 0c fb       	call -0x9e8 <local_irq_enable : 112a2e >			  ## queue.c:818:9
  113416:    88 80             	r0 = sp + 0			  ## queue.c:818:9
  113418:    89 88             	r1 = sp + 8
  11341a:    bf ea 7f fd       	call -0x502 <xTaskCheckForTimeOut : 112f1c >			  ## queue.c:821:13
  11341e:    90 47             	if (r0 != 0) goto 0x4e <xQueueGenericSend+0x12E : 11346e >			  ## queue.c:821:13
  113420:    bf ea fe fa       	call -0xa04 <os_code_begin : 112a20 >			  ## queue.c:1731:5
  113424:    50 ec 48 23       	r3_r2 = d[r4+0x38]			  ## queue.c:1733:22
  113428:    bf ea 01 fb       	call -0x9fe <local_irq_enable : 112a2e >			  ## queue.c:1739:5
  11342c:    83 e8 0d 20       	if (r2 != r3) goto 0x1a <xQueueGenericSend+0x10A : 11344a >			  ## queue.c:822:17
  113430:    d0 d6             	r0 = r13  #			  ## queue.c:824:17
  113432:    01 22             		 r1 = [sp+8]			  ## queue.c:824:72
  113434:    bf ea 3b fe       	call -0x38a <vTaskPlaceOnEventList : 1130ae >			  ## queue.c:824:17
  113438:    40 16             	r0 = r4			  ## queue.c:831:17
  11343a:    bf ea 5a fe       	call -0x34c <prvUnlockQueue : 1130f2 >			  ## queue.c:831:17
  11343e:    bf ea 15 ff       	call -0x1d6 <xTaskResumeAll : 11326c >			  ## queue.c:838:21
  113442:    80 48             	if (r0 != 0) goto 0x10 <xQueueGenericSend+0x114 : 113454 >			  ## queue.c:838:21
  113444:    bf ea 0a fc       	call -0x7ec <vPortYield : 112c5c >			  ## queue.c:839:21
  113448:    04 85             	goto 0xa <xQueueGenericSend+0x114 : 113454 >			  ## queue.c:839:21
  11344a:    40 16             	r0 = r4			  ## queue.c:843:17
  11344c:    bf ea 51 fe       	call -0x35e <prvUnlockQueue : 1130f2 >			  ## queue.c:843:17
  113450:    bf ea 0c ff       	call -0x1e8 <xTaskResumeAll : 11326c >			  ## queue.c:844:24
  113454:    bf ea e4 fa       	call -0xa38 <os_code_begin : 112a20 >			  ## queue.c:718:9
  113458:    40 6e             	r0 = [r4+0x38] 			  ## queue.c:724:27
  11345a:    05 f8 0f 04       	if (r5 == 0x2) goto 0x1e <xQueueGenericSend+0x13C : 11347c >			  ## queue.c:724:27
  11345e:    41 6f             	r1 = [r4+0x3c] 			  ## queue.c:724:56
  113460:    81 e9 0c 00       	if (r0 < r1) goto 0x18 <xQueueGenericSend+0x13C : 11347c >			  ## queue.c:724:56
  113464:    00 22             	r0 = [sp+8]			  ## queue.c:792:21
  113466:    d0 5c             	if (r0 != 0) goto -0x88 <xQueueGenericSend+0xA0 : 1133e0 >			  ## queue.c:792:21
  113468:    bf ea e1 fa       	call -0xa3e <local_irq_enable : 112a2e >			  ## queue.c:795:21
  11346c:    04 85             	goto 0xa <xQueueGenericSend+0x138 : 113478 >
  11346e:    40 16             	r0 = r4			  ## queue.c:848:13
  113470:    bf ea 3f fe       	call -0x382 <prvUnlockQueue : 1130f2 >			  ## queue.c:848:13
  113474:    bf ea fa fe       	call -0x20c <xTaskResumeAll : 11326c >			  ## queue.c:849:20
  113478:    40 20             	r0 = 0x0
  11347a:    04 93             	goto 0x26 <xQueueGenericSend+0x162 : 1134a2 >
  11347c:    40 16             	r0 = r4			  ## queue.c:726:34
  11347e:    81 16             	r1 = r8			  ## queue.c:726:34
  113480:    52 16             	r2 = r5			  ## queue.c:726:34
  113482:    bf ea 97 fc       	call -0x6d2 <prvCopyDataToQueue : 112db4 >			  ## queue.c:726:34
  113486:    d0 ec 46 12       	r1 = [++r4=0x24]			  ## queue.c:767:25
  11348a:    b1 e8 00 40       	if (r1 != 0x0) {
  11348e:    40 16             		r0 = r4			  ## queue.c:768:29
  113490:    bf ea 57 fb       		call -0x952
                               	} <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:768:29
  113494:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:768:29
  113498:    bf ea e0 fb       		call -0x840
                               	} <vPortYield : 112c5c >			  ## queue.c:768:29
  11349c:    bf ea c7 fa       	call -0xa72 <local_irq_enable : 112a2e >			  ## queue.c:789:17
  1134a0:    40 21             	r0 = 0x1			  ## queue.c:789:17
  1134a2:    02 83             	sp += 0xc
  1134a4:    5d 04             	{pc, r13-r4} = [sp++]			  ## queue.c:855:1


prvCopyDataFromQueue:
  1134a6:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1587:0
  1134a8:    d0 ec 00 24       	r2 = [r0+0x40]			  ## queue.c:1588:18
  1134ac:    02 4c             	if (r2 == 0) goto 0x18 <prvCopyDataFromQueue+0x20 : 1134c6 >			  ## queue.c:1588:18
  1134ae:    03 63             	r3 = [r0+0xc] 			  ## queue.c:1589:31
  1134b0:    23 18             	r3 += r2			  ## queue.c:1589:31
  1134b2:    83 63             	[r0+0xc] = r3			  ## queue.c:1589:31
  1134b4:    04 61             	r4 = [r0+0x4] 			  ## queue.c:1590:47
  1134b6:    13 e9 00 44       	if (r3 >= r4) {			  ## queue.c:1590:47
  1134ba:    03 60             		r3 = [r0+0x0] 			  ## queue.c:1591:46
  1134bc:    83 63             		[r0+0xc] = r3
                               	}			  ## queue.c:1591:35
  1134be:    10 16             	r0 = r1			  ## queue.c:1595:16
  1134c0:    31 16             	r1 = r3			  ## queue.c:1595:16
  1134c2:    bf ea e9 ee       	call -0x222e <memmove : 111298 >			  ## queue.c:1595:16
  1134c6:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1597:1


prvIsQueueEmpty:
  1134c8:    10 04             	[--sp] = rets			  ## queue.c:1695:0
  1134ca:    01 16             	r1 = r0			  ## queue.c:1695:0
  1134cc:    bf ea a8 fa       	call -0xab0 <os_code_begin : 112a20 >			  ## queue.c:1698:5
  1134d0:    10 6e             	r0 = [r1+0x38] 			  ## queue.c:1700:22
  1134d2:    42 21             	r2 = 0x1			  ## queue.c:1700:40
  1134d4:    b0 e8 00 00       	if (r0 != 0x0) {			  ## queue.c:1700:40
  1134d8:    42 20             		r2 = 0x0
                               	}			  ## queue.c:1700:40
  1134da:    bf ea a8 fa       	call -0xab0 <local_irq_enable : 112a2e >			  ## queue.c:1706:5
  1134de:    20 16             	r0 = r2			  ## queue.c:1708:5
  1134e0:    00 04             	pc = [sp++]			  ## queue.c:1708:5


xQueueGenericReceive:
  1134e2:    7f 04             	[--sp] = {rets, r15-r4}			  ## queue.c:1125:0
  1134e4:    e2 9d             	sp += -0xc			  ## queue.c:1125:0
  1134e6:    3b d6             	r11 = r3  #			  ## queue.c:1125:0
  1134e8:    82 22             		 [sp+8] = r2			  ## queue.c:1125:0
  1134ea:    1a 16             	r10 = r1			  ## queue.c:1125:0
  1134ec:    04 16             	r4 = r0			  ## queue.c:1125:0
  1134ee:    c5 ff e0 1c 03 00 	r5 = 0x31ce0 <mask_log_e : 31ce0 >			  ## queue.c:1125:0
  1134f4:    c9 ff 17 48 11 00 	r9 = 0x114817 <vTickISR+0x32 : 114816 >			  ## queue.c:1125:0
  1134fa:    c7 ff 7c 48 11 00 	r7 = 0x11487c <vTickISR+0x98 : 11487c >			  ## queue.c:1125:0
  113500:    84 46             	if (r4 != 0) goto 0xc <xQueueGenericReceive+0x2C : 11350e >			  ## queue.c:1125:0
  113502:    42 f0 6b 04       	r2 = 0x46b  #			  ## FreeRTOSConfig.h:181:5
  113506:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  113508:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  11350a:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  11350c:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  11350e:    06 e1 40 40       	r6 = r4 + 0x40
  113512:    8a f8 08 00       	if (r10 != 0x0) goto 0x10 <xQueueGenericReceive+0x44 : 113526 >
  113516:    60 60             	r0 = [r6+0x0] 			  ## queue.c:1132:5
  113518:    00 46             	if (r0 == 0) goto 0xc <xQueueGenericReceive+0x44 : 113526 >			  ## queue.c:1132:5
  11351a:    42 f0 6c 04       	r2 = 0x46c  #			  ## FreeRTOSConfig.h:181:5
  11351e:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  113520:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  113522:    71 16             	r1 = r7			  ## FreeRTOSConfig.h:181:5
  113524:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113526:    8d 80             	r5 = sp + 0
  113528:    0c e1 24 40       	r12 = r4 + 0x24
  11352c:    c0 14             	r8 = 0
  11352e:    cd ff b4 1c 03 00 	r13 = 0x31cb4 <xNumOfOverflows : 31cb4 >
  113534:    ce ff a8 1c 03 00 	r14 = 0x31ca8 <xTickCount : 31ca8 >
  11353a:    c7 14             	r15 = 0
  11353c:    54 91             	goto 0x162 <xQueueGenericReceive+0x1BE : 1136a0 >
  11353e:    00 22             	r0 = [sp+8]			  ## queue.c:1210:21
  113540:    00 f8 bf 00       	if (r0 == 0x0) goto 0x17e <xQueueGenericReceive+0x1E0 : 1136c2 >
  113544:    8f f8 08 00       	if (r15 != 0x0) goto 0x10 <xQueueGenericReceive+0x76 : 113558 >
  113548:    d0 ec d0 00       	r0 = [r13+0x0]			  ## tasks.c:2896:33
  11354c:    80 20             	[sp] = r0			  ## tasks.c:2896:31
  11354e:    d0 ec e0 00       	r0 = [r14+0x0]			  ## tasks.c:2897:34
  113552:    4f f0 01 00       	r15 = 0x1  #			  ## tasks.c:2897:34
  113556:    d0 61             		 [r5+0x4] = r0			  ## tasks.c:2897:32
  113558:    bf ea 69 fa       	call -0xb2e <local_irq_enable : 112a2e >			  ## queue.c:1227:9
  11355c:    bf ea ba fc       	call -0x68c <vTaskSuspendAll : 112ed4 >			  ## queue.c:1232:9
  113560:    bf ea 5e fa       	call -0xb44 <os_code_begin : 112a20 >			  ## queue.c:1233:9
  113564:    68 44             	r0 = b[r6+0x4] (u)			  ## queue.c:1233:9
  113566:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:1233:9
  11356a:    52 ee 64 80       		b[r6+0x4] = r8
                               	}			  ## queue.c:1233:9
  11356e:    68 45             	r0 = b[r6+0x5] (u)			  ## queue.c:1233:9
  113570:    30 e8 ff 00       	if (r0 == 0xff) {			  ## queue.c:1233:9
  113574:    52 ee 65 80       		b[r6+0x5] = r8
                               	}			  ## queue.c:1233:9
  113578:    bf ea 59 fa       	call -0xb4e <local_irq_enable : 112a2e >			  ## queue.c:1233:9
  11357c:    88 80             	r0 = sp + 0			  ## queue.c:1233:9
  11357e:    89 88             	r1 = sp + 8
  113580:    bf ea cc fc       	call -0x668 <xTaskCheckForTimeOut : 112f1c >			  ## queue.c:1236:13
  113584:    00 4a             	if (r0 == 0) goto 0x14 <xQueueGenericReceive+0xB8 : 11359a >
  113586:    40 16             	r0 = r4			  ## queue.c:1267:13
  113588:    bf ea b3 fd       	call -0x49a <prvUnlockQueue : 1130f2 >			  ## queue.c:1267:13
  11358c:    bf ea 6e fe       	call -0x324 <xTaskResumeAll : 11326c >			  ## queue.c:1268:20
  113590:    40 16             	r0 = r4			  ## queue.c:1270:17
  113592:    41 9a             	call -0xcc <prvIsQueueEmpty : 1134c8 >			  ## queue.c:1270:17
  113594:    00 f8 84 00       	if (r0 == 0x0) goto 0x108 <xQueueGenericReceive+0x1BE : 1136a0 >			  ## queue.c:1270:17
  113598:    44 96             	goto 0x12c <xQueueGenericReceive+0x1E4 : 1136c6 >			  ## queue.c:1270:17
  11359a:    40 16             	r0 = r4			  ## queue.c:1237:17
  11359c:    41 95             	call -0xd6 <prvIsQueueEmpty : 1134c8 >			  ## queue.c:1237:17
  11359e:    10 5b             	if (r0 == 0) goto 0x76 <xQueueGenericReceive+0x134 : 113616 >			  ## queue.c:1237:17
  1135a0:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1242:34
  1135a2:    b0 52             	if (r0 != 0) goto 0xe4 <xQueueGenericReceive+0x1A6 : 113688 >			  ## queue.c:1242:34
  1135a4:    d0 ec 44 90       	r9 = [r4+0x4]			  ## queue.c:1245:68
  1135a8:    bf ea 3a fa       	call -0xb8c <os_code_begin : 112a20 >			  ## tasks.c:3542:5
  1135ac:    09 f8 6a 00       	if (r9 == 0x0) goto 0xd4 <xQueueGenericReceive+0x1A2 : 113684 >			  ## tasks.c:3542:5
  1135b0:    d0 ec 9c 23       	r2 = [r9+0x3c]			  ## tasks.c:3551:20
  1135b4:    bf ea 34 fa       	call -0xb98 <os_code_begin : 112a20 >			  ## tasks.c:3551:33
  1135b8:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3551:33
  1135be:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:3551:33
  1135c0:    bf ea 35 fa       	call -0xb96 <local_irq_enable : 112a2e >			  ## tasks.c:3551:33
  1135c4:    30 6f             	r0 = [r3+0x3c] 			  ## tasks.c:3551:47
  1135c6:    00 e9 5d 20       	if (r2 >= r0) goto 0xba <xQueueGenericReceive+0x1A2 : 113684 >			  ## tasks.c:3551:47
  1135ca:    d0 ec 98 02       	r0 = [r9+0x28]			  ## tasks.c:3555:18
  1135ce:    c3 ff 8c 1c 03 00 	r3 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3555:18
  1135d4:    80 fd 0a 00       	ifs (r0 < 0x0) goto 0x14 <xQueueGenericReceive+0x10A : 1135ec >			  ## tasks.c:3555:18
  1135d8:    bf ea 22 fa       	call -0xbbc <os_code_begin : 112a20 >			  ## tasks.c:3556:17
  1135dc:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3556:17
  1135de:    bf ea 26 fa       	call -0xbb4 <local_irq_enable : 112a2e >			  ## tasks.c:3556:17
  1135e2:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3556:17
  1135e4:    a0 e0 08 00       	r0 = 0x8 - r0			  ## tasks.c:3556:17
  1135e8:    d0 ec 99 02       	[r9+0x28] = r0			  ## tasks.c:3556:17
  1135ec:    d0 ec 9c 03       	r0 = [r9+0x3c]			  ## tasks.c:3563:17
  1135f0:    d0 ec 94 12       	r1 = [r9+0x24]			  ## tasks.c:3563:17
  1135f4:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3563:17
  1135f8:    c2 ff ec 1c 03 00 	r2 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:3563:17
  1135fe:    20 18             	r0 += r2			  ## tasks.c:3563:17
  113600:    00 e8 0f 10       	if (r1 == r0) goto 0x1e <xQueueGenericReceive+0x140 : 113622 >			  ## tasks.c:3563:17
  113604:    bf ea 0c fa       	call -0xbe8 <os_code_begin : 112a20 >			  ## tasks.c:3575:37
  113608:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3575:37
  11360a:    bf ea 10 fa       	call -0xbe0 <local_irq_enable : 112a2e >			  ## tasks.c:3575:37
  11360e:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3575:51
  113610:    d0 ec 9d 03       	[r9+0x3c] = r0			  ## tasks.c:3575:35
  113614:    14 97             	goto 0x6e <xQueueGenericReceive+0x1A2 : 113684 >			  ## tasks.c:3575:35
  113616:    40 16             	r0 = r4			  ## queue.c:1263:17
  113618:    bf ea 6b fd       	call -0x52a <prvUnlockQueue : 1130f2 >			  ## queue.c:1263:17
  11361c:    bf ea 26 fe       	call -0x3b4 <xTaskResumeAll : 11326c >			  ## queue.c:1264:24
  113620:    14 9f             	goto 0x7e <xQueueGenericReceive+0x1BE : 1136a0 >			  ## queue.c:1264:24
  113622:    b7 16             	r7 = r11
  113624:    0b e1 14 90       	r11 = r9 + 0x14			  ## tasks.c:3563:17
  113628:    b0 16             	r0 = r11			  ## tasks.c:3564:21
  11362a:    bf ea 5a fa       	call -0xb4c <uxListRemove : 112ae2 >			  ## tasks.c:3564:21
  11362e:    80 50             	if (r0 != 0) goto 0x20 <xQueueGenericReceive+0x16E : 113650 >			  ## tasks.c:3564:21
  113630:    d0 ec 9c 03       	r0 = [r9+0x3c]			  ## tasks.c:3565:21
  113634:    e1 e1 14 00       	r1 = r0 * 0x14			  ## tasks.c:3565:21
  113638:    c2 ff ec 1c 03 00 	r2 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:3565:21
  11363e:    d8 ec 12 12       	r1 = [r1+r2]			  ## tasks.c:3565:21
  113642:    31 e8 00 40       	if (r1 == 0x0) {			  ## tasks.c:3565:21
  113646:    c1 ff 98 1c 03 00 		r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:3565:21
  11364c:    66 e8 03 10       		[r1+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:3565:21
  113650:    bf ea e6 f9       	call -0xc34 <os_code_begin : 112a20 >			  ## tasks.c:3571:37
  113654:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3571:37
  11365a:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3571:37
  11365c:    bf ea e7 f9       	call -0xc32 <local_irq_enable : 112a2e >			  ## tasks.c:3571:37
  113660:    20 6f             	r0 = [r2+0x3c] 			  ## tasks.c:3571:51
  113662:    d0 ec 9d 03       	[r9+0x3c] = r0			  ## tasks.c:3571:35
  113666:    c1 ff 98 1c 03 00 	r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:3572:17
  11366c:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:3572:17
  113670:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:3572:17
  113674:    c1 ff ec 1c 03 00 	r1 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:3572:17
  11367a:    10 18             	r0 += r1			  ## tasks.c:3572:17
  11367c:    b1 16             	r1 = r11			  ## tasks.c:3572:17
  11367e:    bf ea 44 fa       	call -0xb78 <vListInsertEnd : 112b0a >			  ## tasks.c:3572:17
  113682:    7b 16             	r11 = r7
  113684:    bf ea d3 f9       	call -0xc5a <local_irq_enable : 112a2e >			  ## tasks.c:3585:5
  113688:    c0 d6             	r0 = r12  #			  ## queue.c:1254:17
  11368a:    01 22             		 r1 = [sp+8]			  ## queue.c:1254:75
  11368c:    bf ea 0f fd       	call -0x5e2 <vTaskPlaceOnEventList : 1130ae >			  ## queue.c:1254:17
  113690:    40 16             	r0 = r4			  ## queue.c:1255:17
  113692:    bf ea 2e fd       	call -0x5a4 <prvUnlockQueue : 1130f2 >			  ## queue.c:1255:17
  113696:    bf ea e9 fd       	call -0x42e <xTaskResumeAll : 11326c >			  ## queue.c:1256:21
  11369a:    80 42             	if (r0 != 0) goto 0x4 <xQueueGenericReceive+0x1BE : 1136a0 >			  ## queue.c:1256:21
  11369c:    bf ea de fa       	call -0xa44 <vPortYield : 112c5c >			  ## queue.c:1257:21
  1136a0:    bf ea be f9       	call -0xc84 <os_code_begin : 112a20 >			  ## queue.c:1146:9
  1136a4:    47 6e             	r7 = [r4+0x38] 			  ## queue.c:1148:60
  1136a6:    07 f8 4a 01       	if (r7 == 0x0) goto -0x16c <xQueueGenericReceive+0x5C : 11353e >			  ## queue.c:1152:17
  1136aa:    40 d6             	r0 = r4  #			  ## queue.c:1157:17
  1136ac:    45 63             		 r5 = [r4+0xc] 			  ## queue.c:1155:53
  1136ae:    a1 16             	r1 = r10			  ## queue.c:1157:17
  1136b0:    bf ea f9 fe       	call -0x20e <prvCopyDataFromQueue : 1134a6 >			  ## queue.c:1157:17
  1136b4:    0b f8 09 00       	if (r11 == 0x0) goto 0x12 <xQueueGenericReceive+0x1E8 : 1136ca >			  ## queue.c:1157:17
  1136b8:    c5 63             	[r4+0xc] = r5			  ## queue.c:1191:43
  1136ba:    40 69             	r0 = [r4+0x24] 			  ## queue.c:1195:25
  1136bc:    10 4b             	if (r0 == 0) goto 0x56 <xQueueGenericReceive+0x232 : 113714 >			  ## queue.c:1195:25
  1136be:    c0 16             	r0 = r12			  ## queue.c:1196:29
  1136c0:    14 83             	goto 0x46 <xQueueGenericReceive+0x226 : 113708 >			  ## queue.c:1196:29
  1136c2:    bf ea b4 f9       	call -0xc98 <local_irq_enable : 112a2e >			  ## queue.c:1213:21
  1136c6:    40 20             	r0 = 0x0
  1136c8:    14 88             	goto 0x50 <xQueueGenericReceive+0x238 : 11371a >
  1136ca:    30 e1 ff 7f       	r0 = r7 + -0x1			  ## queue.c:1163:68
  1136ce:    c0 6e             	[r4+0x38] = r0			  ## queue.c:1163:48
  1136d0:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1167:38
  1136d2:    80 56             	if (r0 != 0) goto 0x2c <xQueueGenericReceive+0x21E : 113700 >			  ## queue.c:1167:38
  1136d4:    bf ea a4 f9       	call -0xcb8 <os_code_begin : 112a20 >			  ## tasks.c:3967:9
  1136d8:    c3 ff 8c 1c 03 00 	r3 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3967:9
  1136de:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3967:9
  1136e0:    bf ea a5 f9       	call -0xcb6 <local_irq_enable : 112a2e >			  ## tasks.c:3967:9
  1136e4:    02 47             	if (r2 == 0) goto 0xe <xQueueGenericReceive+0x212 : 1136f4 >			  ## tasks.c:3967:9
  1136e6:    bf ea 9b f9       	call -0xcca <os_code_begin : 112a20 >			  ## tasks.c:3968:10
  1136ea:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3968:10
  1136ec:    bf ea 9f f9       	call -0xcc2 <local_irq_enable : 112a2e >			  ## tasks.c:3968:10
  1136f0:    d4 eb 01 20       	[r2+0x50] += 0x1			  ## tasks.c:3968:38
  1136f4:    bf ea 94 f9       	call -0xcd8 <os_code_begin : 112a20 >			  ## tasks.c:3971:12
  1136f8:    32 60             	r2 = [r3+0x0] 			  ## tasks.c:3971:12
  1136fa:    bf ea 98 f9       	call -0xcd0 <local_irq_enable : 112a2e >			  ## tasks.c:3971:12
  1136fe:    c2 61             	[r4+0x4] = r2			  ## queue.c:1170:52
  113700:    d0 ec 42 01       	r0 = [++r4=0x10]			  ## queue.c:1177:25
  113704:    00 47             	if (r0 == 0) goto 0xe <xQueueGenericReceive+0x232 : 113714 >
  113706:    40 16             	r0 = r4			  ## queue.c:1178:29
  113708:    bf ea 1b fa       	call -0xbca <xTaskRemoveFromEventList : 112b42 >
  11370c:    b0 e8 00 00       	if (r0 != 0x0) {
  113710:    bf ea a4 fa       		call -0xab8
                               	} <vPortYield : 112c5c >
  113714:    bf ea 8b f9       	call -0xcea <local_irq_enable : 112a2e >			  ## queue.c:1207:17
  113718:    40 21             	r0 = 0x1			  ## queue.c:1207:17
  11371a:    02 83             	sp += 0xc
  11371c:    5f 04             	{pc, r15-r4} = [sp++]			  ## queue.c:1278:1


xQueueGenericSendFromISR:
  11371e:    7b 04             	[--sp] = {rets, r11-r4}			  ## queue.c:859:0
  113720:    36 16             	r6 = r3			  ## queue.c:859:0
  113722:    28 16             	r8 = r2			  ## queue.c:859:0
  113724:    17 16             	r7 = r1			  ## queue.c:859:0
  113726:    05 16             	r5 = r0			  ## queue.c:859:0
  113728:    c4 ff e0 1c 03 00 	r4 = 0x31ce0 <mask_log_e : 31ce0 >			  ## queue.c:859:0
  11372e:    c9 ff 17 48 11 00 	r9 = 0x114817 <vTickISR+0x32 : 114816 >			  ## queue.c:859:0
  113734:    cb ff b5 48 11 00 	r11 = 0x1148b5 <vTickISR+0xD0 : 1148b4 >			  ## queue.c:859:0
  11373a:    85 46             	if (r5 != 0) goto 0xc <xQueueGenericSendFromISR+0x2A : 113748 >			  ## queue.c:859:0
  11373c:    42 f0 60 03       	r2 = 0x360  #			  ## FreeRTOSConfig.h:181:5
  113740:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  113742:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  113744:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  113746:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113748:    0a e1 40 50       	r10 = r5 + 0x40
  11374c:    87 49             	if (r7 != 0) goto 0x12 <xQueueGenericSendFromISR+0x42 : 113760 >
  11374e:    d0 ec a0 00       	r0 = [r10+0x0]			  ## queue.c:865:5
  113752:    00 46             	if (r0 == 0) goto 0xc <xQueueGenericSendFromISR+0x42 : 113760 >			  ## queue.c:865:5
  113754:    42 f0 61 03       	r2 = 0x361  #			  ## FreeRTOSConfig.h:181:5
  113758:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  11375a:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  11375c:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  11375e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113760:    86 f8 09 04       	if (r6 != 0x2) goto 0x12 <xQueueGenericSendFromISR+0x58 : 113776 >
  113764:    50 6f             	r0 = [r5+0x3c] 			  ## queue.c:866:5
  113766:    00 f8 06 02       	if (r0 == 0x1) goto 0xc <xQueueGenericSendFromISR+0x58 : 113776 >			  ## queue.c:866:5
  11376a:    42 f0 62 03       	r2 = 0x362  #			  ## FreeRTOSConfig.h:181:5
  11376e:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  113770:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  113772:    b1 16             	r1 = r11			  ## FreeRTOSConfig.h:181:5
  113774:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113776:    bf ea 53 f9       	call -0xd5a <os_code_begin : 112a20 >			  ## queue.c:889:5
  11377a:    50 6e             	r0 = [r5+0x38] 			  ## queue.c:893:23
  11377c:    06 f8 04 04       	if (r6 == 0x2) goto 0x8 <xQueueGenericSendFromISR+0x6A : 113788 >			  ## queue.c:893:23
  113780:    51 6f             	r1 = [r5+0x3c] 			  ## queue.c:893:52
  113782:    44 20             	r4 = 0x0			  ## queue.c:893:52
  113784:    01 e9 1b 00       	if (r0 >= r1) goto 0x36 <xQueueGenericSendFromISR+0xA0 : 1137be >			  ## queue.c:893:52
  113788:    50 ee a5 40       	r4 = b[r10+0x5] (u)			  ## queue.c:894:45
  11378c:    50 16             	r0 = r5			  ## queue.c:903:20
  11378e:    71 16             	r1 = r7			  ## queue.c:903:20
  113790:    62 16             	r2 = r6			  ## queue.c:903:20
  113792:    bf ea 0f fb       	call -0x9e2 <prvCopyDataToQueue : 112db4 >			  ## queue.c:903:20
  113796:    14 f8 05 fe       	if (r4 == 0xff) goto 0xa <xQueueGenericSendFromISR+0x86 : 1137a4 >			  ## queue.c:903:20
  11379a:    48 81             	r0 = r4 + 0x1			  ## queue.c:967:53
  11379c:    52 ee a5 00       	b[r10+0x5] = r0			  ## queue.c:967:34
  1137a0:    44 21             	r4 = 0x1			  ## queue.c:967:34
  1137a2:    04 8d             	goto 0x1a <xQueueGenericSendFromISR+0xA0 : 1137be >			  ## queue.c:967:34
  1137a4:    d0 ec 56 02       	r0 = [++r5=0x24]			  ## queue.c:945:25
  1137a8:    44 21             	r4 = 0x1
  1137aa:    00 49             	if (r0 == 0) goto 0x12 <xQueueGenericSendFromISR+0xA0 : 1137be >
  1137ac:    50 16             	r0 = r5			  ## queue.c:947:29
  1137ae:    bf ea c8 f9       	call -0xc70 <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:947:29
  1137b2:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <xQueueGenericSendFromISR+0xA0 : 1137be >			  ## queue.c:947:29
  1137b6:    b0 e8 00 00       	if (r0 != 0x0) {
  1137ba:    d0 ec 81 40       		[r8+0x0] = r4
                               	}			  ## queue.c:951:60
  1137be:    bf ea 36 f9       	call -0xd94 <local_irq_enable : 112a2e >			  ## queue.c:978:5
  1137c2:    40 16             	r0 = r4			  ## queue.c:980:5
  1137c4:    5b 04             	{pc, r11-r4} = [sp++]			  ## queue.c:980:5


xQueueReceiveFromISR:
  1137c6:    7b 04             	[--sp] = {rets, r11-r4}			  ## queue.c:1282:0
  1137c8:    28 16             	r8 = r2			  ## queue.c:1282:0
  1137ca:    1b 16             	r11 = r1			  ## queue.c:1282:0
  1137cc:    05 16             	r5 = r0			  ## queue.c:1282:0
  1137ce:    c4 ff e0 1c 03 00 	r4 = 0x31ce0 <mask_log_e : 31ce0 >			  ## queue.c:1282:0
  1137d4:    c9 ff 17 48 11 00 	r9 = 0x114817 <vTickISR+0x32 : 114816 >			  ## queue.c:1282:0
  1137da:    ca ff e0 48 11 00 	r10 = 0x1148e0 <vTickISR+0xFC : 1148e0 >			  ## queue.c:1282:0
  1137e0:    85 46             	if (r5 != 0) goto 0xc <xQueueReceiveFromISR+0x28 : 1137ee >			  ## queue.c:1282:0
  1137e2:    42 f0 07 05       	r2 = 0x507  #			  ## FreeRTOSConfig.h:181:5
  1137e6:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  1137e8:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  1137ea:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  1137ec:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1137ee:    07 e1 40 50       	r7 = r5 + 0x40
  1137f2:    8b f8 08 00       	if (r11 != 0x0) goto 0x10 <xQueueReceiveFromISR+0x40 : 113806 >
  1137f6:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1288:5
  1137f8:    00 46             	if (r0 == 0) goto 0xc <xQueueReceiveFromISR+0x40 : 113806 >			  ## queue.c:1288:5
  1137fa:    42 f0 08 05       	r2 = 0x508  #			  ## FreeRTOSConfig.h:181:5
  1137fe:    43 60             		 r3 = [r4+0x0] 			  ## FreeRTOSConfig.h:181:5
  113800:    90 16             	r0 = r9			  ## FreeRTOSConfig.h:181:5
  113802:    a1 16             	r1 = r10			  ## FreeRTOSConfig.h:181:5
  113804:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113806:    56 6e             	r6 = [r5+0x38] 			  ## queue.c:1308:56
  113808:    06 4e             	if (r6 == 0) goto 0x1c <xQueueReceiveFromISR+0x60 : 113826 >
  11380a:    50 d6             	r0 = r5  #			  ## queue.c:1316:13
  11380c:    7c 44             		 r4 = b[r7+0x4] (u)			  ## queue.c:1312:45
  11380e:    b1 16             	r1 = r11			  ## queue.c:1316:13
  113810:    bf ea 49 fe       	call -0x36e <prvCopyDataFromQueue : 1134a6 >			  ## queue.c:1316:13
  113814:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## queue.c:1317:60
  113818:    d0 6e             	[r5+0x38] = r0			  ## queue.c:1317:40
  11381a:    14 f8 06 fe       	if (r4 == 0xff) goto 0xc <xQueueReceiveFromISR+0x64 : 11382a >			  ## queue.c:1317:40
  11381e:    48 81             	r0 = r4 + 0x1			  ## queue.c:1342:53
  113820:    f8 44             	b[r7+0x4] = r0			  ## queue.c:1342:34
  113822:    44 21             	r4 = 0x1			  ## queue.c:1342:34
  113824:    04 8f             	goto 0x1e <xQueueReceiveFromISR+0x7E : 113844 >			  ## queue.c:1342:34
  113826:    44 20             	r4 = 0x0
  113828:    04 8d             	goto 0x1a <xQueueReceiveFromISR+0x7E : 113844 >
  11382a:    d0 ec 52 01       	r0 = [++r5=0x10]			  ## queue.c:1324:21
  11382e:    44 21             	r4 = 0x1
  113830:    00 49             	if (r0 == 0) goto 0x12 <xQueueReceiveFromISR+0x7E : 113844 >
  113832:    50 16             	r0 = r5			  ## queue.c:1325:25
  113834:    bf ea 85 f9       	call -0xcf6 <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:1325:25
  113838:    08 f8 04 00       	if (r8 == 0x0) goto 0x8 <xQueueReceiveFromISR+0x7E : 113844 >			  ## queue.c:1325:25
  11383c:    b0 e8 00 00       	if (r0 != 0x0) {
  113840:    d0 ec 81 40       		[r8+0x0] = r4
                               	}			  ## queue.c:1329:56
  113844:    40 16             	r0 = r4			  ## queue.c:1353:5
  113846:    5b 04             	{pc, r11-r4} = [sp++]			  ## queue.c:1353:5


uxQueueMessagesWaiting:
  113848:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1409:0
  11384a:    04 16             	r4 = r0			  ## queue.c:1409:0
  11384c:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueMessagesWaiting+0x20 : 113868 >			  ## queue.c:1409:0
  11384e:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113854:    42 f0 84 05       	r2 = 0x584  #			  ## FreeRTOSConfig.h:181:5
  113858:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  11385a:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  113860:    c1 ff f5 48 11 00 	r1 = 0x1148f5 <vTickISR+0x110 : 1148f4 >			  ## FreeRTOSConfig.h:181:5
  113866:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113868:    bf ea da f8       	call -0xe4c <os_code_begin : 112a20 >			  ## queue.c:1414:5
  11386c:    42 6e             	r2 = [r4+0x38] 			  ## queue.c:1416:42
  11386e:    bf ea de f8       	call -0xe44 <local_irq_enable : 112a2e >			  ## queue.c:1418:5
  113872:    20 16             	r0 = r2			  ## queue.c:1420:5
  113874:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1420:5


uxQueueSpacesAvailable:
  113876:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1425:0
  113878:    04 16             	r4 = r0			  ## queue.c:1425:0
  11387a:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueSpacesAvailable+0x20 : 113896 >			  ## queue.c:1425:0
  11387c:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113882:    42 f0 96 05       	r2 = 0x596  #			  ## FreeRTOSConfig.h:181:5
  113886:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113888:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  11388e:    c1 ff 0c 49 11 00 	r1 = 0x11490c <vTickISR+0x128 : 11490c >			  ## FreeRTOSConfig.h:181:5
  113894:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113896:    bf ea c3 f8       	call -0xe7a <os_code_begin : 112a20 >			  ## queue.c:1432:5
  11389a:    40 6f             	r0 = [r4+0x3c] 			  ## queue.c:1434:29
  11389c:    41 6e             	r1 = [r4+0x38] 			  ## queue.c:1434:49
  11389e:    0a 1e             	r2 = r0 - r1			  ## queue.c:1434:38
  1138a0:    bf ea c5 f8       	call -0xe76 <local_irq_enable : 112a2e >			  ## queue.c:1436:5
  1138a4:    20 16             	r0 = r2			  ## queue.c:1438:5
  1138a6:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1438:5


uxQueueMessagesWaitingFromISR:
  1138a8:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1443:0
  1138aa:    04 16             	r4 = r0			  ## queue.c:1443:0
  1138ac:    84 4d             	if (r4 != 0) goto 0x1a <uxQueueMessagesWaitingFromISR+0x20 : 1138c8 >			  ## queue.c:1443:0
  1138ae:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  1138b4:    42 f0 a6 05       	r2 = 0x5a6  #			  ## FreeRTOSConfig.h:181:5
  1138b8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1138ba:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  1138c0:    c1 ff 23 49 11 00 	r1 = 0x114923 <vTickISR+0x13E : 114922 >			  ## FreeRTOSConfig.h:181:5
  1138c6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1138c8:    40 6e             	r0 = [r4+0x38] 			  ## queue.c:1448:38
  1138ca:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1450:5


vQueueDelete:
  1138cc:    74 04             	[--sp] = {rets, r4}			  ## queue.c:1455:0
  1138ce:    04 16             	r4 = r0			  ## queue.c:1455:0
  1138d0:    84 4d             	if (r4 != 0) goto 0x1a <vQueueDelete+0x20 : 1138ec >			  ## queue.c:1455:0
  1138d2:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  1138d8:    42 f0 b2 05       	r2 = 0x5b2  #			  ## FreeRTOSConfig.h:181:5
  1138dc:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1138de:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  1138e4:    c1 ff 41 49 11 00 	r1 = 0x114941 <vTickISR+0x15C : 114940 >			  ## FreeRTOSConfig.h:181:5
  1138ea:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1138ec:    40 20             	r0 = 0x0			  ## queue.c:1461:26
  1138ee:    52 ee 4c 04       	b[r4+0x4c] = r0			  ## queue.c:1461:26
  1138f2:    50 ee 46 04       	r0 = b[r4+0x46] (u)			  ## queue.c:1479:22
  1138f6:    80 46             	if (r0 != 0) goto 0xc <vQueueDelete+0x38 : 113904 >			  ## queue.c:1479:22
  1138f8:    c0 ff c4 1c 03 00 	r0 = 0x31cc4 <mask_free : 31cc4 >			  ## mask_export.c:23:5
  1138fe:    40 d6             	r0 = r4  #			  ## mask_export.c:23:5
  113900:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:23:5
  113902:    c1 00             	call r1			  ## mask_export.c:23:5
  113904:    54 04             	{pc, r4} = [sp++]			  ## queue.c:1492:1


xTaskCreate:
  113906:    7c 04             	[--sp] = {rets, r12-r4}			  ## tasks.c:720:0
  113908:    c4 ff cc 1c 03 00 	r4 = 0x31ccc <mask_stack_malloc : 31ccc >			  ## mask_export.c:32:12
  11390e:    39 d6             	r9 = r3  #			  ## mask_export.c:32:12
  113910:    44 60             		 r4 = [r4+0x0] 			  ## mask_export.c:32:12
  113912:    2b 16             	r11 = r2
  113914:    15 16             	r5 = r1
  113916:    08 16             	r8 = r0
  113918:    26 a2             	r6 = r2 << 0x2			  ## tasks.c:752:78
  11391a:    60 16             	r0 = r6			  ## mask_export.c:32:12
  11391c:    c4 00             	call r4			  ## mask_export.c:32:12
  11391e:    07 16             	r7 = r0			  ## mask_export.c:32:12
  113920:    4a e0 ff ff       	r10 = -0x1
  113924:    07 f8 c2 00       	if (r7 == 0x0) goto 0x184 <xTaskCreate+0x1A6 : 113aac >
  113928:    c0 ff c8 1c 03 00 	r0 = 0x31cc8 <mask_malloc : 31cc8 >			  ## mask_export.c:27:12
  11392e:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:27:12
  113930:    50 3c             	r0 = 0x5c			  ## mask_export.c:27:12
  113932:    c1 00             	call r1			  ## mask_export.c:27:12
  113934:    04 16             	r4 = r0			  ## mask_export.c:27:12
  113936:    24 5e             	if (r4 == 0) goto 0xbc <xTaskCreate+0xEE : 1139f4 >			  ## tasks.c:758:17
  113938:    d4 e9 2c c0       	r12 = [sp+44]
  11393c:    0a f1 10 40       	r10 = r4 + 0x10  #
  113940:    03 2a             		 r3 = [sp+40]
  113942:    d0 ec a1 73       	[r10+0x30] = r7			  ## tasks.c:760:35
  113946:    42 20             	r2 = 0x0			  ## tasks.c:760:35
  113948:    01 e1 50 40       	r1 = r4 + 0x50			  ## tasks.c:760:35
  11394c:    76 d8             	r6 += r7  #			  ## tasks.c:760:35
  11394e:    9a 48             		 b[r1+0x8] = r2			  ## tasks.c:777:45
  113950:    d0 ec 45 b0       	[r4+0x4] = r11			  ## tasks.c:830:30
  113954:    fe 3c             	r6 += -0x4			  ## tasks.c:831:42
  113956:    76 e1 03 60       	r6 = r6 & 0xFFFFFFFC			  ## tasks.c:832:79
  11395a:    02 fc 08 16       	if (r2 > 0xb) goto 0x10 <xTaskCreate+0x68 : 11396e >
  11395e:    d8 ee 50 72       	r7 = b[r5+r2] (u)			  ## tasks.c:852:37
  113962:    c0 1c             	r0 = r4 + r2			  ## tasks.c:852:35
  113964:    8f 48             	b[r0+0x8] = r7			  ## tasks.c:852:35
  113966:    d8 ee 50 02       	r0 = b[r5+r2] (u)			  ## tasks.c:857:13
  11396a:    c2 21             	r2 += 0x1			  ## tasks.c:851:75
  11396c:    f0 56             	if (r0 != 0) goto -0x14 <xTaskCreate+0x54 : 11395a >
  11396e:    45 20             	r5 = 0x0
  113970:    52 ee a3 50       	b[r10+0x3] = r5			  ## tasks.c:865:57
  113974:    33 e9 07 00       	if (r3 >= 0x7) {
  113978:    43 27             		r3 = 0x7
                               	}			  ## tasks.c:869:9
  11397a:    a0 f0 08 30       	r0 = 0x8 - r3  #			  ## tasks.c:891:5
  11397e:    c3 6f             		 [r4+0x3c] = r3			  ## tasks.c:875:26
  113980:    d0 ec ad 33       	[r10+0x3c] = r3			  ## tasks.c:878:34
  113984:    95 60             	[r1+0x0] = r5			  ## tasks.c:879:33
  113986:    c5 69             	[r4+0x24] = r5			  ## list.c:114:25
  113988:    c5 6e             	[r4+0x38] = r5			  ## list.c:114:25
  11398a:    c4 68             	[r4+0x20] = r4			  ## tasks.c:888:5
  11398c:    30 f1 b4 6f       	r0 = r6 + -0x4c  #			  ## tasks.c:888:5
  113990:    c0 6a             		 [r4+0x28] = r0			  ## tasks.c:891:5
  113992:    c4 6d             	[r4+0x34] = r4			  ## tasks.c:892:5
  113994:    95 61             	[r1+0x4] = r5			  ## tasks.c:902:29
  113996:    9d 49             	b[r1+0x9] = r5			  ## tasks.c:947:34
  113998:    d0 ec 0d 90       	[r0+0xc] = r9			  ## port.c:156:12
  11399c:    85 62             	[r0+0x8] = r5			  ## port.c:158:12
  11399e:    85 61             	[r0+0x4] = r5			  ## port.c:159:12
  1139a0:    d0 ec 01 80       	[r0+0x0] = r8			  ## port.c:162:12
  1139a4:    c0 60             	[r4+0x0] = r0			  ## tasks.c:961:32
  1139a6:    bc e8 00 00       	if (r12 != 0x0) {
  1139aa:    d0 ec c1 40       		[r12+0x0] = r4
                               	}			  ## tasks.c:968:24
  1139ae:    bf ea 37 f8       	call -0xf92 <os_code_begin : 112a20 >			  ## tasks.c:979:5
  1139b2:    c2 ff 88 1c 03 00 	r2 = 0x31c88 <uxCurrentNumberOfTasks : 31c88 >
  1139b8:    c0 eb 01 20       	[r2+0x0] += 0x1			  ## tasks.c:981:31
  1139bc:    bf ea 30 f8       	call -0xfa0 <os_code_begin : 112a20 >			  ## tasks.c:982:13
  1139c0:    c6 ff 8c 1c 03 00 	r6 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:982:13
  1139c6:    63 60             	r3 = [r6+0x0] 			  ## tasks.c:982:13
  1139c8:    bf ea 31 f8       	call -0xf9e <local_irq_enable : 112a2e >			  ## tasks.c:982:13
  1139cc:    c5 ff ec 1c 03 00 	r5 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:982:13
  1139d2:    c7 ff 90 1c 03 00 	r7 = 0x31c90 <xSchedulerRunning : 31c90 >			  ## tasks.c:982:13
  1139d8:    03 54             	if (r3 == 0) goto 0x28 <xTaskCreate+0xFC : 113a02 >			  ## tasks.c:982:13
  1139da:    70 60             	r0 = [r7+0x0] 			  ## tasks.c:999:17
  1139dc:    a0 42             	if (r0 != 0) goto 0x84 <xTaskCreate+0x15C : 113a62 >			  ## tasks.c:999:17
  1139de:    bf ea 1f f8       	call -0xfc2 <os_code_begin : 112a20 >			  ## tasks.c:1000:21
  1139e2:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:1000:21
  1139e4:    bf ea 23 f8       	call -0xfba <local_irq_enable : 112a2e >			  ## tasks.c:1000:21
  1139e8:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1000:59
  1139ea:    21 6f             	r1 = [r2+0x3c] 			  ## tasks.c:1000:35
  1139ec:    91 ec 00 00       	if (r1 <= r0) {			  ## tasks.c:1000:35
  1139f0:    e4 60             		[r6+0x0] = r4
                               	}			  ## tasks.c:1001:43
  1139f2:    14 97             	goto 0x6e <xTaskCreate+0x15C : 113a62 >			  ## tasks.c:1001:43
  1139f4:    c0 ff d0 1c 03 00 	r0 = 0x31cd0 <mask_stack_free : 31cd0 >			  ## mask_export.c:36:5
  1139fa:    70 d6             	r0 = r7  #			  ## mask_export.c:36:5
  1139fc:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:36:5
  1139fe:    c1 00             	call r1			  ## mask_export.c:36:5
  113a00:    24 95             	goto 0xaa <xTaskCreate+0x1A6 : 113aac >			  ## mask_export.c:36:5
  113a02:    e4 60             	[r6+0x0] = r4			  ## tasks.c:985:35
  113a04:    20 60             	r0 = [r2+0x0] 			  ## tasks.c:987:17
  113a06:    80 f8 2c 02       	if (r0 != 0x1) goto 0x58 <xTaskCreate+0x15C : 113a62 >			  ## tasks.c:987:17
  113a0a:    42 20             	r2 = 0x0
  113a0c:    04 84             	goto 0x8 <xTaskCreate+0x110 : 113a16 >
  113a0e:    28 1d             	r0 = r2 + r5			  ## tasks.c:3200:9
  113a10:    bf ea 41 f9       	call -0xd7e <vListInitialise : 112c96 >			  ## tasks.c:3200:9
  113a14:    c2 34             	r2 += 0x14			  ## tasks.c:3199:5
  113a16:    92 f8 fa 41       	if (r2 != 0xa0) goto -0xc <xTaskCreate+0x108 : 113a0e >
  113a1a:    c8 ff 8c 1d 03 00 	r8 = 0x31d8c <xDelayedTaskList1 : 31d8c >			  ## tasks.c:3203:5
  113a20:    80 16             	r0 = r8			  ## tasks.c:3203:5
  113a22:    bf ea 38 f9       	call -0xd90 <vListInitialise : 112c96 >			  ## tasks.c:3203:5
  113a26:    c3 ff a0 1d 03 00 	r3 = 0x31da0 <xDelayedTaskList2 : 31da0 >			  ## tasks.c:3204:5
  113a2c:    30 16             	r0 = r3			  ## tasks.c:3204:5
  113a2e:    bf ea 32 f9       	call -0xd9c <vListInitialise : 112c96 >			  ## tasks.c:3204:5
  113a32:    c0 ff b4 1d 03 00 	r0 = 0x31db4 <xPendingReadyList : 31db4 >			  ## tasks.c:3205:5
  113a38:    bf ea 2d f9       	call -0xda6 <vListInitialise : 112c96 >			  ## tasks.c:3205:5
  113a3c:    c0 ff c8 1d 03 00 	r0 = 0x31dc8 <xTasksWaitingTermination : 31dc8 >			  ## tasks.c:3209:9
  113a42:    bf ea 28 f9       	call -0xdb0 <vListInitialise : 112c96 >			  ## tasks.c:3209:9
  113a46:    c0 ff dc 1d 03 00 	r0 = 0x31ddc <xSuspendedTaskList : 31ddc >			  ## tasks.c:3215:9
  113a4c:    bf ea 23 f9       	call -0xdba <vListInitialise : 112c96 >			  ## tasks.c:3215:9
  113a50:    c0 ff f0 1d 03 00 	r0 = 0x31df0 <pxDelayedTaskList : 31df0 >			  ## tasks.c:3221:23
  113a56:    d0 ec 01 80       	[r0+0x0] = r8			  ## tasks.c:3221:23
  113a5a:    c0 ff f4 1d 03 00 	r0 = 0x31df4 <pxOverflowDelayedTaskList : 31df4 >			  ## tasks.c:3222:31
  113a60:    83 60             	[r0+0x0] = r3			  ## tasks.c:3222:31
  113a62:    c0 ff 94 1c 03 00 	r0 = 0x31c94 <uxTaskNumber : 31c94 >			  ## tasks.c:1010:21
  113a68:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:1010:21
  113a6a:    c1 21             	r1 += 0x1			  ## tasks.c:1010:21
  113a6c:    81 60             	[r0+0x0] = r1			  ## tasks.c:1010:21
  113a6e:    d0 ec a5 13       	[r10+0x34] = r1			  ## tasks.c:1015:35
  113a72:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1020:9
  113a74:    c1 ff 98 1c 03 00 	r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:1020:9
  113a7a:    66 e8 00 10       	[r1+0x0] |= 1 << r0			  ## tasks.c:1020:9
  113a7e:    e0 e1 14 00       	r0 = r0 * 0x14			  ## tasks.c:1020:9
  113a82:    50 18             	r0 += r5			  ## tasks.c:1020:9
  113a84:    49 94             	r1 = r4 + 0x14			  ## tasks.c:1020:9
  113a86:    bf ea 40 f8       	call -0xf80 <vListInsertEnd : 112b0a >			  ## tasks.c:1020:9
  113a8a:    bf ea d0 f7       	call -0x1060 <local_irq_enable : 112a2e >			  ## tasks.c:1028:5
  113a8e:    4a f0 01 00       	r10 = 0x1  #			  ## tasks.c:1028:5
  113a92:    70 60             		 r0 = [r7+0x0] 			  ## tasks.c:1032:9
  113a94:    00 4b             	if (r0 == 0) goto 0x16 <xTaskCreate+0x1A6 : 113aac >			  ## tasks.c:1032:9
  113a96:    bf ea c3 f7       	call -0x107a <os_code_begin : 112a20 >			  ## tasks.c:1035:13
  113a9a:    62 60             	r2 = [r6+0x0] 			  ## tasks.c:1035:13
  113a9c:    bf ea c7 f7       	call -0x1072 <local_irq_enable : 112a2e >			  ## tasks.c:1035:13
  113aa0:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1035:50
  113aa2:    21 6f             	r1 = [r2+0x3c] 			  ## tasks.c:1035:27
  113aa4:    00 e9 02 10       	if (r1 >= r0) goto 0x4 <xTaskCreate+0x1A6 : 113aac >			  ## tasks.c:1035:27
  113aa8:    bf ea d8 f8       	call -0xe50 <vPortYield : 112c5c >			  ## tasks.c:1036:13
  113aac:    a0 16             	r0 = r10			  ## tasks.c:787:5
  113aae:    5c 04             	{pc, r12-r4} = [sp++]			  ## tasks.c:787:5


prvDeleteTCB:
  113ab0:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:3431:0
  113ab2:    04 16             	r4 = r0			  ## tasks.c:3431:0
  113ab4:    50 ee 48 05       	r0 = b[r4+0x58] (u)			  ## tasks.c:3456:20
  113ab8:    00 f8 1e 04       	if (r0 == 0x2) goto 0x3c <prvDeleteTCB+0x48 : 113af8 >			  ## tasks.c:3456:20
  113abc:    c5 ff c4 1c 03 00 	r5 = 0x31cc4 <mask_free : 31cc4 >
  113ac2:    00 f8 08 02       	if (r0 == 0x1) goto 0x10 <prvDeleteTCB+0x26 : 113ad6 >
  113ac6:    80 4b             	if (r0 != 0) goto 0x16 <prvDeleteTCB+0x2E : 113ade >
  113ac8:    c0 ff d0 1c 03 00 	r0 = 0x31cd0 <mask_stack_free : 31cd0 >			  ## mask_export.c:36:5
  113ace:    01 60             	r1 = [r0+0x0] 			  ## mask_export.c:36:5
  113ad0:    d0 ec 40 04       	r0 = [r4+0x40]			  ## tasks.c:3459:35
  113ad4:    c1 00             	call r1			  ## mask_export.c:36:5
  113ad6:    40 d6             	r0 = r4  #
  113ad8:    51 60             		 r1 = [r5+0x0] 
  113ada:    35 04             	{rets, r5, r4} = [sp++]
  113adc:    d1 00             	goto r1
  113ade:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113ae4:    42 f0 8c 0d       	r2 = 0xd8c  #			  ## FreeRTOSConfig.h:181:5
  113ae8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113aea:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113af0:    c1 ff 74 49 11 00 	r1 = 0x114974 <vTickISR+0x190 : 114974 >			  ## FreeRTOSConfig.h:181:5
  113af6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113af8:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:3473:1


vTaskDelete:
  113afa:    76 04             	[--sp] = {rets, r6-r4}			  ## tasks.c:1050:0
  113afc:    04 16             	r4 = r0			  ## tasks.c:1050:0
  113afe:    bf ea 8f f7       	call -0x10e2 <os_code_begin : 112a20 >			  ## tasks.c:1053:5
  113b02:    c6 ff 8c 1c 03 00 	r6 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:1053:5
  113b08:    84 45             	if (r4 != 0) goto 0xa <vTaskDelete+0x1A : 113b14 >			  ## tasks.c:1053:5
  113b0a:    bf ea 89 f7       	call -0x10ee <os_code_begin : 112a20 >			  ## tasks.c:1057:17
  113b0e:    64 60             	r4 = [r6+0x0] 			  ## tasks.c:1057:17
  113b10:    bf ea 8d f7       	call -0x10e6 <local_irq_enable : 112a2e >			  ## tasks.c:1057:17
  113b14:    4d 94             	r5 = r4 + 0x14			  ## tasks.c:1068:35
  113b16:    50 16             	r0 = r5			  ## tasks.c:1068:13
  113b18:    bf ea e3 f7       	call -0x103a <uxListRemove : 112ae2 >			  ## tasks.c:1068:13
  113b1c:    80 4f             	if (r0 != 0) goto 0x1e <vTaskDelete+0x42 : 113b3c >			  ## tasks.c:1068:13
  113b1e:    40 6f             	r0 = [r4+0x3c] 			  ## tasks.c:1069:13
  113b20:    e1 e1 14 00       	r1 = r0 * 0x14			  ## tasks.c:1069:13
  113b24:    c2 ff ec 1c 03 00 	r2 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:1069:13
  113b2a:    d8 ec 12 12       	r1 = [r1+r2]			  ## tasks.c:1069:13
  113b2e:    31 e8 00 40       	if (r1 == 0x0) {			  ## tasks.c:1069:13
  113b32:    c1 ff 98 1c 03 00 		r1 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:1069:13
  113b38:    66 e8 03 10       		[r1+0x0] &= ~(1 << r0)
                               	}			  ## tasks.c:1069:13
  113b3c:    40 6e             	r0 = [r4+0x38] 			  ## tasks.c:1074:13
  113b3e:    b0 e8 00 40       	if (r0 != 0x0) {			  ## tasks.c:1074:13
  113b42:    00 e1 28 40       		r0 = r4 + 0x28			  ## tasks.c:1074:13
  113b46:    bf ea cc f7       		call -0x1068
                               	} <uxListRemove : 112ae2 >			  ## tasks.c:1075:20
  113b4a:    c0 ff 94 1c 03 00 	r0 = 0x31c94 <uxTaskNumber : 31c94 >			  ## tasks.c:1084:21
  113b50:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1084:21
  113b54:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1088:22
  113b56:    00 e8 0a 40       	if (r4 == r0) goto 0x14 <vTaskDelete+0x74 : 113b6e >			  ## tasks.c:1088:22
  113b5a:    c0 ff 88 1c 03 00 	r0 = 0x31c88 <uxCurrentNumberOfTasks : 31c88 >			  ## tasks.c:1112:13
  113b60:    c0 eb ff 0f       	[r0+0x0] += -0x1			  ## tasks.c:1112:13
  113b64:    40 16             	r0 = r4			  ## tasks.c:1113:13
  113b66:    51 84             	call -0xb8 <prvDeleteTCB : 113ab0 >			  ## tasks.c:1113:13
  113b68:    bf ea da f7       	call -0x104c <prvResetNextTaskUnblockTime : 112b20 >			  ## tasks.c:1117:13
  113b6c:    04 8b             	goto 0x16 <vTaskDelete+0x8A : 113b84 >			  ## tasks.c:1117:13
  113b6e:    c0 ff c8 1d 03 00 	r0 = 0x31dc8 <xTasksWaitingTermination : 31dc8 >			  ## tasks.c:1098:13
  113b74:    51 16             	r1 = r5			  ## tasks.c:1098:13
  113b76:    bf ea c8 f7       	call -0x1070 <vListInsertEnd : 112b0a >			  ## tasks.c:1098:13
  113b7a:    c0 ff 9c 1c 03 00 	r0 = 0x31c9c <uxDeletedTasksWaitingCleanUp : 31c9c >			  ## tasks.c:1103:13
  113b80:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## tasks.c:1103:13
  113b84:    c0 ff 90 1c 03 00 	r0 = 0x31c90 <xSchedulerRunning : 31c90 >			  ## tasks.c:1125:9
  113b8a:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1125:9
  113b8c:    00 57             	if (r0 == 0) goto 0x2e <vTaskDelete+0xC2 : 113bbc >			  ## tasks.c:1125:9
  113b8e:    60 60             	r0 = [r6+0x0] 			  ## tasks.c:1127:22
  113b90:    80 e8 14 40       	if (r4 != r0) goto 0x28 <vTaskDelete+0xC2 : 113bbc >			  ## tasks.c:1127:22
  113b94:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:1132:13
  113b9a:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1132:13
  113b9c:    00 4d             	if (r0 == 0) goto 0x1a <vTaskDelete+0xBE : 113bb8 >			  ## tasks.c:1132:13
  113b9e:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113ba4:    42 f0 6c 04       	r2 = 0x46c  #			  ## FreeRTOSConfig.h:181:5
  113ba8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113baa:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113bb0:    c1 ff 68 49 11 00 	r1 = 0x114968 <vTickISR+0x184 : 114968 >			  ## FreeRTOSConfig.h:181:5
  113bb6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113bb8:    bf ea 50 f8       	call -0xf60 <vPortYield : 112c5c >			  ## tasks.c:1133:13
  113bbc:    36 04             	{rets, r6-r4} = [sp++]			  ## tasks.c:1138:5
  113bbe:    ff ea 36 f7       	goto -0x1194 <local_irq_enable : 112a2e >			  ## tasks.c:1138:5


prvGetExpectedIdleTime:
  113bc2:    10 04             	[--sp] = rets			  ## tasks.c:1872:0
  113bc4:    c0 ff 98 1c 03 00 	r0 = 0x31c98 <uxTopReadyPriority : 31c98 >			  ## tasks.c:1895:13
  113bca:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:1895:13
  113bcc:    bf ea 28 f7       	call -0x11b0 <os_code_begin : 112a20 >			  ## tasks.c:1901:9
  113bd0:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:1901:9
  113bd6:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:1901:9
  113bd8:    bf ea 29 f7       	call -0x11ae <local_irq_enable : 112a2e >			  ## tasks.c:1901:9
  113bdc:    c0 ff ec 1c 03 00 	r0 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:1903:16
  113be2:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1903:16
  113be4:    20 d9             	r0 |= r2  #			  ## tasks.c:1901:9
  113be6:    31 6f             		 r1 = [r3+0x3c] 			  ## tasks.c:1901:23
  113be8:    b8 20             	r0 &= 0xfffffffe			  ## tasks.c:1901:9
  113bea:    01 19             	r1 |= r0			  ## tasks.c:1901:9
  113bec:    40 20             	r0 = 0x0			  ## tasks.c:1901:9
  113bee:    81 49             	if (r1 != 0) goto 0x12 <prvGetExpectedIdleTime+0x40 : 113c02 >			  ## tasks.c:1901:9
  113bf0:    c0 ff a4 1c 03 00 	r0 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >			  ## tasks.c:1914:19
  113bf6:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:1914:19
  113bf8:    c1 ff a8 1c 03 00 	r1 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:1914:42
  113bfe:    11 60             	r1 = [r1+0x0] 			  ## tasks.c:1914:42
  113c00:    08 1e             	r0 = r0 - r1			  ## tasks.c:1914:40
  113c02:    00 04             	pc = [sp++]			  ## tasks.c:1917:5


prvIdleTask:
  113c04:    c7 ff 9c 1c 03 00 	r7 = 0x31c9c <uxDeletedTasksWaitingCleanUp : 31c9c >			  ## tasks.c:3005:0
  113c0a:    ce ff ec 1c 03 00 	r14 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:3005:0
  113c10:    cf ff e8 1c 03 00 	r15 = 0x31ce8 <idle_hook : 31ce8 >			  ## tasks.c:3005:0
  113c16:    ca ff a4 1c 03 00 	r10 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >			  ## tasks.c:3005:0
  113c1c:    cb ff a8 1c 03 00 	r11 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:3005:0
  113c22:    cc ff e0 1c 03 00 	r12 = 0x31ce0 <mask_log_e : 31ce0 >			  ## tasks.c:3005:0
  113c28:    c8 ff 61 49 11 00 	r8 = 0x114961 <vTickISR+0x17C : 114960 >			  ## tasks.c:3005:0
  113c2e:    c9 ff d2 49 11 00 	r9 = 0x1149d2 <vTickISR+0x1EE : 1149d2 >			  ## tasks.c:3005:0
  113c34:    cd ff d8 1c 03 00 	r13 = 0x31cd8 <mask_portSUPPRESS_TICKS_AND_SLEEP : 31cd8 >			  ## tasks.c:3005:0
  113c3a:    c4 ff c8 1d 03 00 	r4 = 0x31dc8 <xTasksWaitingTermination : 31dc8 >			  ## tasks.c:3005:0
  113c40:    c5 ff 88 1c 03 00 	r5 = 0x31c88 <uxCurrentNumberOfTasks : 31c88 >			  ## tasks.c:3005:0
  113c46:    70 60             	r0 = [r7+0x0] 			  ## tasks.c:3239:16
  113c48:    00 57             	if (r0 == 0) goto 0x2e <prvIdleTask+0x74 : 113c78 >			  ## tasks.c:3239:9
  113c4a:    bf ea 43 f9       	call -0xd7a <vTaskSuspendAll : 112ed4 >			  ## tasks.c:3240:13
  113c4e:    40 60             	r0 = [r4+0x0] 			  ## tasks.c:3242:32
  113c50:    00 50             	if (r0 == 0) goto 0x20 <prvIdleTask+0x6E : 113c72 >			  ## tasks.c:3242:32
  113c52:    bf ea e5 f6       	call -0x1236 <os_code_begin : 112a20 >			  ## tasks.c:3249:17
  113c56:    40 63             	r0 = [r4+0xc] 			  ## tasks.c:3251:39
  113c58:    06 63             	r6 = [r0+0xc] 			  ## tasks.c:3251:39
  113c5a:    68 94             	r0 = r6 + 0x14			  ## tasks.c:3253:50
  113c5c:    bf ea 41 f7       	call -0x117e <uxListRemove : 112ae2 >			  ## tasks.c:3253:28
  113c60:    c0 eb ff 5f       	[r5+0x0] += -0x1			  ## tasks.c:3254:21
  113c64:    c0 eb ff 7f       	[r7+0x0] += -0x1			  ## tasks.c:3255:21
  113c68:    bf ea e1 f6       	call -0x123e <local_irq_enable : 112a2e >			  ## tasks.c:3257:17
  113c6c:    60 16             	r0 = r6			  ## tasks.c:3259:17
  113c6e:    bf ea 1f ff       	call -0x1c2 <prvDeleteTCB : 113ab0 >			  ## tasks.c:3259:17
  113c72:    bf ea fb fa       	call -0xa0a <xTaskResumeAll : 11326c >
  113c76:    f7 87             	goto -0x32 <prvIdleTask+0x42 : 113c46 >
  113c78:    d0 ec e0 00       	r0 = [r14+0x0]			  ## tasks.c:3050:17
  113c7c:    30 e9 02 00       	if (r0 >= 0x2) {			  ## tasks.c:3050:17
  113c80:    bf ea ec f7       		call -0x1028
                               	} <vPortYield : 112c5c >			  ## tasks.c:3051:17
  113c84:    d0 ec f0 00       	r0 = [r15+0x0]			  ## main.c:252:9
  113c88:    b0 e8 00 00       	if (r0 != 0x0) {			  ## main.c:252:9
  113c8c:    c0 00             		call r0
                               	}			  ## main.c:253:9
  113c8e:    01 00             	idle			  ## main.c:255:5
  113c90:    41 98             	call -0xd0 <prvGetExpectedIdleTime : 113bc2 >			  ## tasks.c:3083:33
  113c92:    80 f9 d8 05       	if (r0 < 0x2) goto -0x50 <prvIdleTask+0x42 : 113c46 >
  113c96:    bf ea 1d f9       	call -0xdc6 <vTaskSuspendAll : 112ed4 >			  ## tasks.c:3086:17
  113c9a:    d0 ec a0 00       	r0 = [r10+0x0]			  ## tasks.c:3091:21
  113c9e:    d0 ec b0 10       	r1 = [r11+0x0]			  ## tasks.c:3091:21
  113ca2:    90 e9 00 c1       	if (r0 < r1) {			  ## tasks.c:3091:21
  113ca6:    d0 ec c0 30       		r3 = [r12+0x0]			  ## FreeRTOSConfig.h:181:5
  113caa:    42 e0 13 0c       		r2 = 0xc13			  ## FreeRTOSConfig.h:181:5
  113cae:    80 15             		r1_r0 = r9_r8			  ## FreeRTOSConfig.h:181:5
  113cb0:    c3 00             		call r3
                               	}			  ## FreeRTOSConfig.h:181:5
  113cb2:    41 87             	call -0xf2 <prvGetExpectedIdleTime : 113bc2 >			  ## tasks.c:3092:41
  113cb4:    80 f9 dd 05       	if (r0 < 0x2) goto -0x46 <prvIdleTask+0x6E : 113c72 >
  113cb8:    d0 ec d0 10       	r1 = [r13+0x0]			  ## tasks.c:3096:25
  113cbc:    c1 00             	call r1			  ## tasks.c:3096:25
  113cbe:    e7 99             	goto -0x4e <prvIdleTask+0x6E : 113c72 >


xTaskGetTickCount:
  113cc0:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:2022:0
  113cc6:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2028:18
  113cc8:    80 00             	rts			  ## tasks.c:2032:5


pcTaskGetName:
  113cca:    74 04             	[--sp] = {rets, r4}			  ## tasks.c:2076:0
  113ccc:    04 16             	r4 = r0			  ## tasks.c:2076:0
  113cce:    84 48             	if (r4 != 0) goto 0x10 <pcTaskGetName+0x16 : 113ce0 >			  ## tasks.c:2076:0
  113cd0:    bf ea a6 f6       	call -0x12b4 <os_code_begin : 112a20 >			  ## tasks.c:2081:13
  113cd4:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2081:13
  113cda:    04 60             	r4 = [r0+0x0] 			  ## tasks.c:2081:13
  113cdc:    bf ea a7 f6       	call -0x12b2 <local_irq_enable : 112a2e >			  ## tasks.c:2081:13
  113ce0:    84 4d             	if (r4 != 0) goto 0x1a <pcTaskGetName+0x32 : 113cfc >
  113ce2:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113ce8:    42 f0 22 08       	r2 = 0x822  #			  ## FreeRTOSConfig.h:181:5
  113cec:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113cee:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113cf4:    c1 ff de 49 11 00 	r1 = 0x1149de <vTickISR+0x1FA : 1149de >			  ## FreeRTOSConfig.h:181:5
  113cfa:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113cfc:    48 88             	r0 = r4 + 0x8			  ## tasks.c:2083:14
  113cfe:    54 04             	{pc, r4} = [sp++]			  ## tasks.c:2083:5


prvSearchForNameWithinSingleList:
  113d00:    79 04             	[--sp] = {rets, r9-r4}			  ## tasks.c:2090:0
  113d02:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2097:9
  113d04:    12 42             	if (r2 == 0) goto 0x44 <prvSearchForNameWithinSingleList+0x4A : 113d4a >			  ## tasks.c:2097:9
  113d06:    02 61             	r2 = [r0+0x4] 			  ## tasks.c:2098:9
  113d08:    23 61             	r3 = [r2+0x4] 			  ## tasks.c:2098:9
  113d0a:    0c 88             	r4 = r0 + 0x8			  ## tasks.c:2098:9
  113d0c:    08 f1 04 00       	r8 = r0 + 0x4  #			  ## tasks.c:2098:9
  113d10:    83 61             		 [r0+0x4] = r3			  ## tasks.c:2098:9
  113d12:    13 e8 00 44       	if (r3 == r4) {			  ## tasks.c:2098:9
  113d16:    33 61             		r3 = [r3+0x4] 			  ## tasks.c:2098:9
  113d18:    83 61             		[r0+0x4] = r3
                               	}			  ## tasks.c:2098:9
  113d1a:    d0 ec 3c 90       	r9 = [r3+0xc]			  ## tasks.c:2098:9
  113d1e:    33 61             	r3 = [r3+0x4] 			  ## tasks.c:2101:13
  113d20:    83 61             	[r0+0x4] = r3			  ## tasks.c:2101:13
  113d22:    13 e8 00 44       	if (r3 == r4) {			  ## tasks.c:2101:13
  113d26:    03 63             		r3 = [r0+0xc] 			  ## tasks.c:2101:13
  113d28:    d0 ec 81 30       		[r8+0x0] = r3
                               	}			  ## tasks.c:2101:13
  113d2c:    32 63             	r2 = [r3+0xc] 			  ## tasks.c:2101:13
  113d2e:    47 20             	r7 = 0x0
  113d30:    07 fc 09 16       	if (r7 > 0xb) goto 0x12 <prvSearchForNameWithinSingleList+0x46 : 113d46 >
  113d34:    d8 ee 10 67       	r6 = b[r1+r7] (u)			  ## tasks.c:2108:34
  113d38:    ad 1d             	r5 = r2 + r7			  ## tasks.c:2106:29
  113d3a:    5d 48             	r5 = b[r5+0x8] (u)			  ## tasks.c:2106:29
  113d3c:    86 e8 03 50       	if (r5 != r6) goto 0x6 <prvSearchForNameWithinSingleList+0x46 : 113d46 >			  ## tasks.c:2106:29
  113d40:    c7 21             	r7 += 0x1			  ## tasks.c:2105:83
  113d42:    f5 56             	if (r5 != 0) goto -0x14 <prvSearchForNameWithinSingleList+0x30 : 113d30 >
  113d44:    04 83             	goto 0x6 <prvSearchForNameWithinSingleList+0x4C : 113d4c >
  113d46:    89 e8 ea 21       	if (r2 != r9) goto -0x2c <prvSearchForNameWithinSingleList+0x1E : 113d1e >
  113d4a:    42 20             	r2 = 0x0
  113d4c:    20 16             	r0 = r2			  ## tasks.c:2131:5
  113d4e:    59 04             	{pc, r9-r4} = [sp++]			  ## tasks.c:2131:5


xTaskGetHandle:
  113d50:    77 04             	[--sp] = {rets, r7-r4}			  ## tasks.c:2140:0
  113d52:    04 16             	r4 = r0			  ## tasks.c:2140:0
  113d54:    bf ea ce eb       	call -0x2864 <strlen : 1114f4 >			  ## tasks.c:2145:5
  113d58:    80 f9 0d 18       	if (r0 < 0xc) goto 0x1a <xTaskGetHandle+0x26 : 113d76 >			  ## tasks.c:2145:5
  113d5c:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113d62:    42 f0 61 08       	r2 = 0x861  #			  ## FreeRTOSConfig.h:181:5
  113d66:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113d68:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113d6e:    c1 ff ec 49 11 00 	r1 = 0x1149ec <vTickISR+0x208 : 1149ec >			  ## FreeRTOSConfig.h:181:5
  113d74:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113d76:    bf ea ad f8       	call -0xea6 <vTaskSuspendAll : 112ed4 >			  ## tasks.c:2147:5
  113d7a:    60 2c             	r0 = 0x8c			  ## tasks.c:2147:5
  113d7c:    c6 ff ec 1c 03 00 	r6 = 0x31cec <pxReadyTasksLists : 31cec >			  ## tasks.c:2147:5
  113d82:    07 16             	r7 = r0
  113d84:    f0 1d             	r0 = r7 + r6			  ## tasks.c:2152:21
  113d86:    41 16             	r1 = r4			  ## tasks.c:2152:21
  113d88:    51 9b             	call -0x8a <prvSearchForNameWithinSingleList : 113d00 >			  ## tasks.c:2152:21
  113d8a:    05 16             	r5 = r0			  ## tasks.c:2152:21
  113d8c:    85 43             	if (r5 != 0) goto 0x6 <xTaskGetHandle+0x44 : 113d94 >
  113d8e:    30 e1 ec 7f       	r0 = r7 + -0x14			  ## tasks.c:2154:17
  113d92:    f7 57             	if (r7 != 0) goto -0x12 <xTaskGetHandle+0x32 : 113d82 >			  ## tasks.c:2154:17
  113d94:    85 59             	if (r5 != 0) goto 0x32 <xTaskGetHandle+0x78 : 113dc8 >
  113d96:    c0 ff f0 1d 03 00 	r0 = 0x31df0 <pxDelayedTaskList : 31df0 >			  ## tasks.c:2163:65
  113d9c:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2163:65
  113d9e:    51 90             	call -0xa0 <prvSearchForNameWithinSingleList : 113d00 >			  ## tasks.c:2163:21
  113da0:    05 16             	r5 = r0			  ## tasks.c:2163:21
  113da2:    85 52             	if (r5 != 0) goto 0x24 <xTaskGetHandle+0x78 : 113dc8 >
  113da4:    c0 ff f4 1d 03 00 	r0 = 0x31df4 <pxOverflowDelayedTaskList : 31df4 >			  ## tasks.c:2167:65
  113daa:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2167:65
  113dac:    51 89             	call -0xae <prvSearchForNameWithinSingleList : 113d00 >			  ## tasks.c:2167:21
  113dae:    05 16             	r5 = r0			  ## tasks.c:2167:21
  113db0:    85 4b             	if (r5 != 0) goto 0x16 <xTaskGetHandle+0x78 : 113dc8 >
  113db2:    c0 ff dc 1d 03 00 	r0 = 0x31ddc <xSuspendedTaskList : 31ddc >			  ## tasks.c:2174:25
  113db8:    51 83             	call -0xba <prvSearchForNameWithinSingleList : 113d00 >			  ## tasks.c:2174:25
  113dba:    05 16             	r5 = r0			  ## tasks.c:2174:25
  113dbc:    85 45             	if (r5 != 0) goto 0xa <xTaskGetHandle+0x78 : 113dc8 >
  113dbe:    c0 ff c8 1d 03 00 	r0 = 0x31dc8 <xTasksWaitingTermination : 31dc8 >			  ## tasks.c:2183:25
  113dc4:    41 9d             	call -0xc6 <prvSearchForNameWithinSingleList : 113d00 >			  ## tasks.c:2183:25
  113dc6:    05 16             	r5 = r0			  ## tasks.c:2183:25
  113dc8:    bf ea 50 fa       	call -0xb60 <xTaskResumeAll : 11326c >			  ## tasks.c:2188:12
  113dcc:    50 16             	r0 = r5			  ## tasks.c:2190:5
  113dce:    57 04             	{pc, r7-r4} = [sp++]			  ## tasks.c:2190:5


vTaskStepTick:
  113dd0:    75 04             	[--sp] = {rets, r5, r4}			  ## tasks.c:2284:0
  113dd2:    c5 ff a8 1c 03 00 	r5 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:2284:0
  113dd8:    51 60             	r1 = [r5+0x0] 			  ## tasks.c:2288:5
  113dda:    c2 ff a4 1c 03 00 	r2 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >			  ## tasks.c:2288:5
  113de0:    04 d6             	r4 = r0  #			  ## tasks.c:2288:5
  113de2:    22 60             		 r2 = [r2+0x0] 			  ## tasks.c:2288:5
  113de4:    10 1d             	r0 = r1 + r4			  ## tasks.c:2288:5
  113de6:    82 ec 0d 00       	if (r0 <= r2) goto 0x1a <vTaskStepTick+0x34 : 113e04 >			  ## tasks.c:2288:5
  113dea:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113df0:    42 f0 f0 08       	r2 = 0x8f0  #			  ## FreeRTOSConfig.h:181:5
  113df4:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113df6:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113dfc:    c1 ff fb 49 11 00 	r1 = 0x1149fb <vTickISR+0x216 : 1149fa >			  ## FreeRTOSConfig.h:181:5
  113e02:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113e04:    68 e8 00 54       	[r5+0x0] += r4			  ## tasks.c:2289:16
  113e08:    55 04             	{pc, r5, r4} = [sp++]			  ## tasks.c:2291:1


vTaskSetApplicationTaskTag:
  113e0a:    10 04             	[--sp] = rets			  ## tasks.c:2518:0
  113e0c:    12 16             	r2 = r1			  ## tasks.c:2518:0
  113e0e:    03 16             	r3 = r0			  ## tasks.c:2518:0
  113e10:    83 48             	if (r3 != 0) goto 0x10 <vTaskSetApplicationTaskTag+0x18 : 113e22 >			  ## tasks.c:2518:0
  113e12:    bf ea 05 f6       	call -0x13f6 <os_code_begin : 112a20 >			  ## tasks.c:2524:26
  113e16:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2524:26
  113e1c:    03 60             	r3 = [r0+0x0] 			  ## tasks.c:2524:26
  113e1e:    bf ea 06 f6       	call -0x13f4 <local_irq_enable : 112a2e >			  ## tasks.c:2524:26
  113e22:    bf ea fd f5       	call -0x1406 <os_code_begin : 112a20 >			  ## tasks.c:2531:5
  113e26:    d0 ec 35 25       	[r3+0x54] = r2			  ## tasks.c:2532:21
  113e2a:    88 04             	{rets} = [sp++]			  ## tasks.c:2533:5
  113e2c:    ff ea ff f5       	goto -0x1402 <local_irq_enable : 112a2e >			  ## tasks.c:2533:5


xTaskGetApplicationTaskTag:
  113e30:    10 04             	[--sp] = rets			  ## tasks.c:2542:0
  113e32:    02 16             	r2 = r0			  ## tasks.c:2542:0
  113e34:    82 48             	if (r2 != 0) goto 0x10 <xTaskGetApplicationTaskTag+0x16 : 113e46 >			  ## tasks.c:2542:0
  113e36:    bf ea f3 f5       	call -0x141a <os_code_begin : 112a20 >			  ## tasks.c:2548:26
  113e3a:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:2548:26
  113e40:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:2548:26
  113e42:    bf ea f4 f5       	call -0x1418 <local_irq_enable : 112a2e >			  ## tasks.c:2548:26
  113e46:    bf ea eb f5       	call -0x142a <os_code_begin : 112a20 >			  ## tasks.c:2555:5
  113e4a:    d0 ec 24 25       	r2 = [r2+0x54]			  ## tasks.c:2557:25
  113e4e:    bf ea ee f5       	call -0x1424 <local_irq_enable : 112a2e >			  ## tasks.c:2559:5
  113e52:    20 16             	r0 = r2			  ## tasks.c:2561:5
  113e54:    00 04             	pc = [sp++]			  ## tasks.c:2561:5


eTaskConfirmSleepModeStatus:
  113e56:    c0 ff b4 1d 03 00 	r0 = 0x31db4 <xPendingReadyList : 31db4 >			  ## tasks.c:3115:0
  113e5c:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3120:9
  113e5e:    80 45             	if (r0 != 0) goto 0xa <eTaskConfirmSleepModeStatus+0x14 : 113e6a >			  ## tasks.c:3120:9
  113e60:    c0 ff ac 1c 03 00 	r0 = 0x31cac <xYieldPending : 31cac >			  ## tasks.c:3123:16
  113e66:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3123:16
  113e68:    00 42             	if (r0 == 0) goto 0x4 <eTaskConfirmSleepModeStatus+0x18 : 113e6e >			  ## tasks.c:3123:16
  113e6a:    40 20             	r0 = 0x0			  ## tasks.c:3138:5
  113e6c:    80 00             	rts			  ## tasks.c:3138:5
  113e6e:    c0 ff dc 1d 03 00 	r0 = 0x31ddc <xSuspendedTaskList : 31ddc >			  ## tasks.c:3131:13
  113e74:    01 60             	r1 = [r0+0x0] 			  ## tasks.c:3131:13
  113e76:    c0 ff 88 1c 03 00 	r0 = 0x31c88 <uxCurrentNumberOfTasks : 31c88 >			  ## tasks.c:3131:62
  113e7c:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:3131:62
  113e7e:    32 e1 ff 0f       	r2 = r0 + -0x1			  ## tasks.c:3131:85
  113e82:    40 22             	r0 = 0x2			  ## tasks.c:3131:13
  113e84:    91 e8 00 02       	if (r1 != r2) {
  113e88:    40 21             		r0 = 0x1
                               	}			  ## tasks.c:3131:13
  113e8a:    80 00             	rts			  ## tasks.c:3131:13


xTaskGetCurrentTaskHandle:
  113e8c:    10 04             	[--sp] = rets			  ## tasks.c:3502:0
  113e8e:    bf ea c7 f5       	call -0x1472 <os_code_begin : 112a20 >			  ## tasks.c:3508:15
  113e92:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## tasks.c:3508:15
  113e98:    02 60             	r2 = [r0+0x0] 			  ## tasks.c:3508:15
  113e9a:    bf ea c8 f5       	call -0x1470 <local_irq_enable : 112a2e >			  ## tasks.c:3508:15
  113e9e:    20 16             	r0 = r2			  ## tasks.c:3510:5
  113ea0:    00 04             	pc = [sp++]			  ## tasks.c:3510:5


os_init:
  113ea2:    c0 ff f8 1d 03 00 	r0 = 0x31df8 <head : 31df8 >			  ## os_api.c:125:0
  113ea8:    80 60             	[r0+0x0] = r0			  ## list.h:188:16
  113eaa:    80 61             	[r0+0x4] = r0			  ## list.h:189:16
  113eac:    80 00             	rts			  ## os_api.c:128:5


os_get_curr_tcb_var:
  113eae:    c2 ff 8c 1c 03 00 	r2 = 0x31c8c <CurrentTCB : 31c8c >			  ## os_api.c:132:0
  113eb4:    82 60             	[r0+0x0] = r2			  ## os_api.c:136:17
  113eb6:    c0 ff b8 1c 03 00 	r0 = 0x31cb8 <highCurrentTCB : 31cb8 >			  ## os_api.c:137:14
  113ebc:    90 60             	[r1+0x0] = r0			  ## os_api.c:137:14
  113ebe:    80 00             	rts			  ## os_api.c:138:1


xPortStartScheduler:
  113ec0:    10 04             	[--sp] = rets			  ## port.c:267:0
  113ec2:    c0 ff 8c 1c 03 00 	r0 = 0x31c8c <CurrentTCB : 31c8c >			  ## port.c:272:9
  113ec8:    00 60             	r0 = [r0+0x0] 			  ## port.c:272:9
  113eca:    00 4a             	if (r0 == 0) goto 0x14 <xPortStartScheduler+0x20 : 113ee0 >			  ## port.c:272:9
  113ecc:    c0 ff c0 1c 03 00 	r0 = 0x31cc0 <uxCriticalNesting : 31cc0 >			  ## port.c:283:31
  113ed2:    40 ea 00 00       	[r0+0x0] = 0x0			  ## port.c:283:31
  113ed6:    c0 ff d4 1c 03 00 	r0 = 0x31cd4 <vPortStartFirstTask : 31cd4 >			  ## port.c:287:9
  113edc:    00 60             	r0 = [r0+0x0] 			  ## port.c:287:9
  113ede:    c0 00             	call r0			  ## port.c:287:9
  113ee0:    40 20             	r0 = 0x0			  ## port.c:298:5
  113ee2:    00 04             	pc = [sp++]			  ## port.c:298:5


os_start:
  113ee4:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:141:0
  113ee6:    e2 9e             	sp += -0x8			  ## os_api.c:141:0
  113ee8:    c0 ff bc 1c 03 00 	r0 = 0x31cbc <xIdleTaskHandle : 31cbc >			  ## tasks.c:1776:23
  113eee:    42 f0 00 01       	r2 = 0x100  #			  ## tasks.c:1776:23
  113ef2:    80 21             		 [sp+4] = r0			  ## tasks.c:1776:23
  113ef4:    44 20             	r4 = 0x0			  ## tasks.c:1776:23
  113ef6:    c0 ff 04 3c 11 00 	r0 = 0x113c04 <prvIdleTask : 113c04 >			  ## tasks.c:1776:23
  113efc:    c1 ff b9 49 11 00 	r1 = 0x1149b9 <vTickISR+0x1D4 : 1149b8 >			  ## tasks.c:1776:23
  113f02:    43 20             	r3 = 0x0			  ## tasks.c:1776:23
  113f04:    84 20             	[sp] = r4			  ## tasks.c:1776:23
  113f06:    bf ea fe fc       	call -0x604 <xTaskCreate : 113906 >			  ## tasks.c:1776:23
  113f0a:    70 f8 17 fe       	if (r0 == -0x1) goto 0x2e <os_start+0x58 : 113f3c >			  ## tasks.c:1795:9
  113f0e:    80 f8 22 02       	if (r0 != 0x1) goto 0x44 <os_start+0x72 : 113f56 >
  113f12:    c0 ff a4 1c 03 00 	r0 = 0x31ca4 <xNextTaskUnblockTime : 31ca4 >			  ## tasks.c:1811:30
  113f18:    40 ea ff 03       	[r0+0x0] = 0xFFFFFFFF			  ## tasks.c:1811:30
  113f1c:    c0 ff 90 1c 03 00 	r0 = 0x31c90 <xSchedulerRunning : 31c90 >			  ## tasks.c:1812:27
  113f22:    40 ea 01 00       	[r0+0x0] = 0x1			  ## tasks.c:1812:27
  113f26:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## tasks.c:1813:20
  113f2c:    41 20             	r1 = 0x0			  ## tasks.c:1813:20
  113f2e:    81 60             	[r0+0x0] = r1			  ## tasks.c:1813:20
  113f30:    c0 ff a0 1c 03 00 	r0 = 0x31ca0 <uxSchedulerSuspended : 31ca0 >			  ## tasks.c:1814:30
  113f36:    81 60             	[r0+0x0] = r1			  ## tasks.c:1814:30
  113f38:    61 83             	call -0x7a <xPortStartScheduler : 113ec0 >			  ## tasks.c:1824:13
  113f3a:    04 8d             	goto 0x1a <os_start+0x72 : 113f56 >			  ## tasks.c:1824:13
  113f3c:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  113f42:    42 f0 2a 07       	r2 = 0x72a  #			  ## FreeRTOSConfig.h:181:5
  113f46:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  113f48:    c0 ff 61 49 11 00 	r0 = 0x114961 <vTickISR+0x17C : 114960 >			  ## FreeRTOSConfig.h:181:5
  113f4e:    c1 ff be 49 11 00 	r1 = 0x1149be <vTickISR+0x1DA : 1149be >			  ## FreeRTOSConfig.h:181:5
  113f54:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  113f56:    02 82             	sp += 0x8
  113f58:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:143:1


os_task_create:
  113f5a:    77 04             	[--sp] = {rets, r7-r4}			  ## os_api.c:151:0
  113f5c:    e2 9d             	sp += -0xc			  ## os_api.c:151:0
  113f5e:    14 d6             	r4 = r1  #			  ## os_api.c:151:0
  113f60:    01 29             		 r1 = [sp+36]			  ## os_api.c:151:0
  113f62:    8d 88             	r5 = sp + 8			  ## os_api.c:151:0
  113f64:    b3 d7             	r3 = r3.l (u)  #			  ## os_api.c:156:11
  113f66:    85 21             		 [sp+4] = r5			  ## os_api.c:156:11
  113f68:    32 d6             	r2 = r3  #			  ## os_api.c:156:11
  113f6a:    82 20             		 [sp] = r2			  ## os_api.c:156:11
  113f6c:    43 16             	r3 = r4			  ## os_api.c:156:11
  113f6e:    bf ea ca fc       	call -0x66c <xTaskCreate : 113906 >			  ## os_api.c:156:11
  113f72:    04 16             	r4 = r0			  ## os_api.c:156:11
  113f74:    84 f8 24 02       	if (r4 != 0x1) goto 0x48 <os_task_create+0x66 : 113fc0 >
  113f78:    06 28             	r6 = [sp+32]
  113f7a:    44 20             	r4 = 0x0
  113f7c:    16 41             	if (r6 == 0) goto 0x42 <os_task_create+0x66 : 113fc0 >
  113f7e:    c0 ff c8 1c 03 00 	r0 = 0x31cc8 <mask_malloc : 31cc8 >			  ## mask_export.c:27:12
  113f84:    00 f1 5c 60       	r0 = r6 + 0x5c  #			  ## os_api.c:162:66
  113f88:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:27:12
  113f8a:    c1 00             	call r1			  ## mask_export.c:27:12
  113f8c:    05 d6             	r5 = r0  #			  ## mask_export.c:27:12
  113f8e:    01 22             		 r1 = [sp+8]			  ## os_api.c:163:20
  113f90:    47 25             	r7 = 0x5			  ## os_api.c:164:9
  113f92:    40 24             	r0 = 0x4			  ## os_api.c:164:9
  113f94:    f4 f1 61 00       	r0 = r6 / r0 (s)  #			  ## os_api.c:164:9
  113f98:    d1 62             		 [r5+0x8] = r1			  ## os_api.c:163:18
  113f9a:    02 f1 5c 50       	r2 = r5 + 0x5c  #			  ## os_api.c:164:9
  113f9e:    87 20             		 [sp] = r7			  ## os_api.c:164:9
  113fa0:    5b 8c             	r3 = r5 + 0xc			  ## os_api.c:164:9
  113fa2:    41 24             	r1 = 0x4			  ## os_api.c:164:9
  113fa4:    bf ea b6 f6       	call -0x1294 <xQueueGenericCreateStatic : 112d14 >			  ## os_api.c:164:9
  113fa8:    bf ea 3a f5       	call -0x158c <os_code_begin : 112a20 >			  ## os_api.c:46:5
  113fac:    c0 ff f8 1d 03 00 	r0 = 0x31df8 <head : 31df8 >			  ## list.h:219:33
  113fb2:    01 60             	r1 = [r0+0x0] 			  ## list.h:219:33
  113fb4:    95 61             	[r1+0x4] = r5			  ## list.h:137:16
  113fb6:    d1 60             	[r5+0x0] = r1			  ## list.h:138:16
  113fb8:    d0 61             	[r5+0x4] = r0			  ## list.h:139:16
  113fba:    85 60             	[r0+0x0] = r5			  ## list.h:140:16
  113fbc:    bf ea 37 f5       	call -0x1592 <local_irq_enable : 112a2e >			  ## os_api.c:50:5
  113fc0:    40 16             	r0 = r4			  ## os_api.c:169:1
  113fc2:    02 83             	sp += 0xc			  ## os_api.c:169:1
  113fc4:    57 04             	{pc, r7-r4} = [sp++]			  ## os_api.c:169:1


os_current_task:
  113fc6:    10 04             	[--sp] = rets			  ## os_api.c:173:0
  113fc8:    bf ea 60 ff       	call -0x140 <xTaskGetCurrentTaskHandle : 113e8c >			  ## os_api.c:174:25
  113fcc:    bf ea 7d fe       	call -0x306 <pcTaskGetName : 113cca >			  ## os_api.c:175:24
  113fd0:    00 04             	pc = [sp++]			  ## os_api.c:177:5


os_time_dly:
  113fd2:    10 04             	[--sp] = rets			  ## os_api.c:182:0
  113fd4:    02 16             	r2 = r0			  ## os_api.c:182:0
  113fd6:    02 49             	if (r2 == 0) goto 0x12 <os_time_dly+0x18 : 113fea >			  ## os_api.c:182:0
  113fd8:    bf ea 7c f7       	call -0x1108 <vTaskSuspendAll : 112ed4 >			  ## tasks.c:1234:9
  113fdc:    41 20             	r1 = 0x0			  ## tasks.c:1245:13
  113fde:    20 16             	r0 = r2			  ## tasks.c:1245:13
  113fe0:    bf ea 00 f8       	call -0x1000 <prvAddCurrentTaskToDelayedList : 112fe4 >			  ## tasks.c:1245:13
  113fe4:    bf ea 42 f9       	call -0xd7c <xTaskResumeAll : 11326c >			  ## tasks.c:1247:27
  113fe8:    80 42             	if (r0 != 0) goto 0x4 <os_time_dly+0x1C : 113fee >
  113fea:    bf ea 37 f6       	call -0x1392 <vPortYield : 112c5c >			  ## tasks.c:1256:9
  113fee:    00 04             	pc = [sp++]			  ## os_api.c:184:1


os_time_get:
  113ff0:    c0 ff a8 1c 03 00 	r0 = 0x31ca8 <xTickCount : 31ca8 >			  ## os_api.c:188:0
  113ff6:    00 60             	r0 = [r0+0x0] 			  ## tasks.c:2028:18
  113ff8:    80 00             	rts			  ## os_api.c:190:5


get_taskq:
  113ffa:    10 04             	[--sp] = rets			  ## os_api.c:54:0
  113ffc:    01 16             	r1 = r0			  ## os_api.c:54:0
  113ffe:    bf ea 0f f5       	call -0x15e2 <os_code_begin : 112a20 >			  ## os_api.c:57:5
  114002:    c0 ff f8 1d 03 00 	r0 = 0x31df8 <head : 31df8 >			  ## os_api.c:57:5
  114008:    02 16             	r2 = r0			  ## os_api.c:57:5
  11400a:    22 60             	r2 = [r2+0x0] 
  11400c:    00 e8 07 20       	if (r2 == r0) goto 0xe <get_taskq+0x24 : 11401e >			  ## os_api.c:58:5
  114010:    23 62             	r3 = [r2+0x8] 			  ## os_api.c:59:16
  114012:    81 e8 fa 31       	if (r3 != r1) goto -0xc <get_taskq+0x10 : 11400a >			  ## os_api.c:59:16
  114016:    bf ea 0a f5       	call -0x15ec <local_irq_enable : 112a2e >			  ## os_api.c:60:13
  11401a:    28 8c             	r0 = r2 + 0xc			  ## os_api.c:61:32
  11401c:    00 04             	pc = [sp++]			  ## os_api.c:67:1
  11401e:    bf ea 06 f5       	call -0x15f4 <local_irq_enable : 112a2e >			  ## os_api.c:64:5
  114022:    40 20             	r0 = 0x0
  114024:    00 04             	pc = [sp++]			  ## os_api.c:67:1


free_taskq:
  114026:    10 04             	[--sp] = rets			  ## os_api.c:70:0
  114028:    01 16             	r1 = r0			  ## os_api.c:70:0
  11402a:    bf ea f9 f4       	call -0x160e <os_code_begin : 112a20 >			  ## os_api.c:73:5
  11402e:    c0 ff f8 1d 03 00 	r0 = 0x31df8 <head : 31df8 >			  ## os_api.c:73:5
  114034:    02 16             	r2 = r0			  ## os_api.c:73:5
  114036:    22 60             	r2 = [r2+0x0] 
  114038:    00 e8 12 20       	if (r2 == r0) goto 0x24 <free_taskq+0x3A : 114060 >			  ## os_api.c:74:5
  11403c:    23 62             	r3 = [r2+0x8] 			  ## os_api.c:75:16
  11403e:    81 e8 fa 31       	if (r3 != r1) goto -0xc <free_taskq+0x10 : 114036 >			  ## os_api.c:75:16
  114042:    50 ec 20 00       	r1_r0 = d[r2+0x0]			  ## list.h:171:36
  114046:    81 61             	[r0+0x4] = r1			  ## list.h:159:16
  114048:    90 60             	[r1+0x0] = r0			  ## list.h:160:16
  11404a:    a2 60             	[r2+0x0] = r2			  ## list.h:172:17
  11404c:    a2 61             	[r2+0x4] = r2			  ## list.h:173:17
  11404e:    bf ea ee f4       	call -0x1624 <local_irq_enable : 112a2e >			  ## os_api.c:77:13
  114052:    c0 ff c4 1c 03 00 	r0 = 0x31cc4 <mask_free : 31cc4 >			  ## mask_export.c:23:5
  114058:    20 d6             	r0 = r2  #			  ## mask_export.c:23:5
  11405a:    01 60             		 r1 = [r0+0x0] 			  ## mask_export.c:23:5
  11405c:    88 04             	{rets} = [sp++]			  ## mask_export.c:23:5
  11405e:    d1 00             	goto r1			  ## mask_export.c:23:5
  114060:    88 04             	{rets} = [sp++]			  ## os_api.c:82:5
  114062:    ff ea e4 f4       	goto -0x1638 <local_irq_enable : 112a2e >			  ## os_api.c:82:5


os_task_del_req:
  114066:    76 04             	[--sp] = {rets, r6-r4}			  ## os_api.c:194:0
  114068:    06 16             	r6 = r0			  ## os_api.c:194:0
  11406a:    06 f8 03 02       	if (r6 == 0x1) goto 0x6 <os_task_del_req+0xE : 114074 >			  ## os_api.c:194:0
  11406e:    bf ea 6f fe       	call -0x322 <xTaskGetHandle : 113d50 >			  ## os_api.c:203:16
  114072:    04 82             	goto 0x4 <os_task_del_req+0x12 : 114078 >			  ## os_api.c:203:16
  114074:    bf ea 0a ff       	call -0x1ec <xTaskGetCurrentTaskHandle : 113e8c >			  ## os_api.c:201:16
  114078:    04 16             	r4 = r0
  11407a:    04 4e             	if (r4 == 0) goto 0x1c <os_task_del_req+0x32 : 114098 >
  11407c:    bf ea d8 fe       	call -0x250 <xTaskGetApplicationTaskTag : 113e30 >			  ## os_api.c:206:15
  114080:    05 16             	r5 = r0			  ## os_api.c:206:15
  114082:    05 f8 0b 04       	if (r5 == 0x2) goto 0x16 <os_task_del_req+0x36 : 11409c >
  114086:    06 f8 14 02       	if (r6 == 0x1) goto 0x28 <os_task_del_req+0x4C : 1140b2 >
  11408a:    b5 e8 01 80       	if (r5 != 0x1) {
  11408e:    41 21             		r1 = 0x1			  ## os_api.c:219:13
  114090:    40 16             		r0 = r4			  ## os_api.c:219:13
  114092:    bf ea ba fe       		call -0x28c
                               	} <vTaskSetApplicationTaskTag : 113e0a >			  ## os_api.c:219:13
  114096:    04 8d             	goto 0x1a <os_task_del_req+0x4C : 1140b2 >			  ## os_api.c:219:13
  114098:    45 20             	r5 = 0x0
  11409a:    04 8b             	goto 0x16 <os_task_del_req+0x4C : 1140b2 >
  11409c:    40 16             	r0 = r4			  ## os_api.c:208:21
  11409e:    51 8d             	call -0xa6 <get_taskq : 113ffa >			  ## os_api.c:208:21
  1140a0:    00 44             	if (r0 == 0) goto 0x8 <os_task_del_req+0x44 : 1140aa >
  1140a2:    bf ea 13 fc       	call -0x7da <vQueueDelete : 1138cc >			  ## os_api.c:210:17
  1140a6:    40 16             	r0 = r4			  ## os_api.c:211:17
  1140a8:    51 9e             	call -0x84 <free_taskq : 114026 >			  ## os_api.c:211:17
  1140aa:    40 16             	r0 = r4			  ## os_api.c:214:13
  1140ac:    bf ea 25 fd       	call -0x5b6 <vTaskDelete : 113afa >			  ## os_api.c:214:13
  1140b0:    45 2e             	r5 = 0xe			  ## os_api.c:214:13
  1140b2:    50 16             	r0 = r5			  ## os_api.c:223:1
  1140b4:    56 04             	{pc, r6-r4} = [sp++]			  ## os_api.c:223:1


os_task_del_res:
  1140b6:    10 04             	[--sp] = rets			  ## os_api.c:226:0
  1140b8:    bf ea e8 fe       	call -0x230 <xTaskGetCurrentTaskHandle : 113e8c >			  ## os_api.c:231:12
  1140bc:    41 22             	r1 = 0x2			  ## os_api.c:232:5
  1140be:    bf ea a4 fe       	call -0x2b8 <vTaskSetApplicationTaskTag : 113e0a >			  ## os_api.c:232:5
  1140c2:    10 3f             	r0 = -0x1			  ## os_api.c:233:5
  1140c4:    41 86             	call -0xf4 <os_time_dly : 113fd2 >			  ## os_api.c:233:5
  1140c6:    40 20             	r0 = 0x0			  ## os_api.c:235:5
  1140c8:    00 04             	pc = [sp++]			  ## os_api.c:235:5


os_task_del:
  1140ca:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:239:0
  1140cc:    bf ea 40 fe       	call -0x380 <xTaskGetHandle : 113d50 >			  ## os_api.c:245:12
  1140d0:    04 16             	r4 = r0			  ## os_api.c:245:12
  1140d2:    04 4b             	if (r4 == 0) goto 0x16 <os_task_del+0x20 : 1140ea >
  1140d4:    41 92             	call -0xdc <get_taskq : 113ffa >			  ## os_api.c:247:17
  1140d6:    05 16             	r5 = r0			  ## os_api.c:247:17
  1140d8:    40 16             	r0 = r4			  ## os_api.c:248:9
  1140da:    bf ea 0e fd       	call -0x5e4 <vTaskDelete : 113afa >			  ## os_api.c:248:9
  1140de:    05 45             	if (r5 == 0) goto 0xa <os_task_del+0x20 : 1140ea >			  ## os_api.c:248:9
  1140e0:    50 16             	r0 = r5			  ## os_api.c:250:13
  1140e2:    bf ea f3 fb       	call -0x81a <vQueueDelete : 1138cc >			  ## os_api.c:250:13
  1140e6:    40 16             	r0 = r4			  ## os_api.c:251:13
  1140e8:    41 9e             	call -0xc4 <free_taskq : 114026 >			  ## os_api.c:251:13
  1140ea:    40 20             	r0 = 0x0			  ## os_api.c:254:5
  1140ec:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:254:5


os_sem_post:
  1140ee:    78 04             	[--sp] = {rets, r8-r4}			  ## os_api.c:571:0
  1140f0:    64 e0 00 1b       	r1 = icfg			  ## cpu.h:71:5
  1140f4:    04 16             	r4 = r0
  1140f6:    60 ff ff 10 34 00 	if ((r1 & 0xFF) == 0) goto 0x68 <os_sem_post+0x76 : 114164 >			  ## os_api.c:574:9
  1140fc:    c5 ff e0 1c 03 00 	r5 = 0x31ce0 <mask_log_e : 31ce0 >
  114102:    c8 ff 17 48 11 00 	r8 = 0x114817 <vTickISR+0x32 : 114816 >
  114108:    c6 ff ce 48 11 00 	r6 = 0x1148ce <vTickISR+0xEA : 1148ce >
  11410e:    84 46             	if (r4 != 0) goto 0xc <os_sem_post+0x2E : 11411c >
  114110:    42 f0 e4 03       	r2 = 0x3e4  #			  ## FreeRTOSConfig.h:181:5
  114114:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  114116:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  114118:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  11411a:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  11411c:    07 e1 40 40       	r7 = r4 + 0x40
  114120:    70 60             	r0 = [r7+0x0] 			  ## queue.c:1000:5
  114122:    00 46             	if (r0 == 0) goto 0xc <os_sem_post+0x42 : 114130 >			  ## queue.c:1000:5
  114124:    42 f0 e8 03       	r2 = 0x3e8  #			  ## FreeRTOSConfig.h:181:5
  114128:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  11412a:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  11412c:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  11412e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  114130:    40 60             	r0 = [r4+0x0] 			  ## queue.c:1005:5
  114132:    80 48             	if (r0 != 0) goto 0x10 <os_sem_post+0x56 : 114144 >			  ## queue.c:1005:5
  114134:    40 61             	r0 = [r4+0x4] 			  ## queue.c:1005:5
  114136:    00 46             	if (r0 == 0) goto 0xc <os_sem_post+0x56 : 114144 >			  ## queue.c:1005:5
  114138:    42 f0 ed 03       	r2 = 0x3ed  #			  ## FreeRTOSConfig.h:181:5
  11413c:    53 60             		 r3 = [r5+0x0] 			  ## FreeRTOSConfig.h:181:5
  11413e:    80 16             	r0 = r8			  ## FreeRTOSConfig.h:181:5
  114140:    61 16             	r1 = r6			  ## FreeRTOSConfig.h:181:5
  114142:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  114144:    bf ea 6c f4       	call -0x1728 <os_code_begin : 112a20 >			  ## queue.c:1023:5
  114148:    50 ec 48 03       	r1_r0 = d[r4+0x38]			  ## queue.c:1027:56
  11414c:    45 20             	r5 = 0x0
  11414e:    01 e9 16 00       	if (r0 >= r1) goto 0x2c <os_sem_post+0x90 : 11417e >
  114152:    79 45             	r1 = b[r7+0x5] (u)			  ## queue.c:1033:45
  114154:    c0 21             	r0 += 0x1			  ## queue.c:1043:60
  114156:    c0 6e             	[r4+0x38] = r0			  ## queue.c:1043:40
  114158:    11 f8 0a fe       	if (r1 == 0xff) goto 0x14 <os_sem_post+0x82 : 114170 >			  ## queue.c:1043:40
  11415c:    18 81             	r0 = r1 + 0x1			  ## queue.c:1107:53
  11415e:    f8 45             	b[r7+0x5] = r0			  ## queue.c:1107:34
  114160:    45 21             	r5 = 0x1			  ## queue.c:1107:34
  114162:    04 8d             	goto 0x1a <os_sem_post+0x90 : 11417e >			  ## queue.c:1107:34
  114164:    41 20             	r1 = 0x0			  ## os_api.c:578:15
  114166:    82 14             	r3_r2 = 0			  ## os_api.c:578:15
  114168:    bf ea ea f8       	call -0xe2c <xQueueGenericSend : 113340 >			  ## os_api.c:578:15
  11416c:    05 16             	r5 = r0			  ## os_api.c:578:15
  11416e:    04 8b             	goto 0x16 <os_sem_post+0x98 : 114186 >
  114170:    d0 ec 46 02       	r0 = [++r4=0x24]			  ## queue.c:1085:25
  114174:    45 21             	r5 = 0x1
  114176:    00 43             	if (r0 == 0) goto 0x6 <os_sem_post+0x90 : 11417e >
  114178:    40 16             	r0 = r4			  ## queue.c:1087:29
  11417a:    bf ea e2 f4       	call -0x163c <xTaskRemoveFromEventList : 112b42 >			  ## queue.c:1087:29
  11417e:    bf ea 56 f4       	call -0x1754 <local_irq_enable : 112a2e >			  ## queue.c:1118:5
  114182:    bf ea 6b f5       	call -0x152a <vPortYield : 112c5c >			  ## os_api.c:576:9
  114186:    40 20             	r0 = 0x0			  ## os_api.c:581:12
  114188:    b5 e8 01 00       	if (r5 != 0x1) {			  ## os_api.c:581:12
  11418c:    10 32             		r0 = -0xe
                               	}			  ## os_api.c:581:12
  11418e:    58 04             	{pc, r8-r4} = [sp++]			  ## os_api.c:581:5


__os_taskq_pend:
  114190:    7a 04             	[--sp] = {rets, r10-r4}			  ## os_api.c:263:0
  114192:    e2 9f             	sp += -0x4			  ## os_api.c:263:0
  114194:    29 16             	r9 = r2			  ## os_api.c:263:0
  114196:    05 16             	r5 = r0			  ## os_api.c:263:0
  114198:    bf ea 78 fe       	call -0x310 <xTaskGetCurrentTaskHandle : 113e8c >			  ## os_api.c:267:25
  11419c:    07 16             	r7 = r0			  ## os_api.c:267:25
  11419e:    04 83             	goto 0x6 <__os_taskq_pend+0x16 : 1141a6 >
  1141a0:    40 22             	r0 = 0x2			  ## os_api.c:273:9
  1141a2:    bf ea 16 ff       	call -0x1d4 <os_time_dly : 113fd2 >			  ## os_api.c:273:9
  1141a6:    70 16             	r0 = r7			  ## os_api.c:270:17
  1141a8:    bf ea 27 ff       	call -0x1b2 <get_taskq : 113ffa >			  ## os_api.c:270:17
  1141ac:    06 16             	r6 = r0			  ## os_api.c:270:17
  1141ae:    76 58             	if (r6 == 0) goto -0x10 <__os_taskq_pend+0x10 : 1141a0 >			  ## os_api.c:272:9
  1141b0:    0a e1 04 50       	r10 = r5 + 0x4
  1141b4:    08 e1 10 50       	r8 = r5 + 0x10
  1141b8:    34 80             	goto 0xc0 <__os_taskq_pend+0xEA : 11427a >
  1141ba:    bf ea 31 f4       	call -0x179e <os_code_begin : 112a20 >			  ## os_api.c:289:9
  1141be:    60 16             	r0 = r6			  ## os_api.c:291:13
  1141c0:    bf ea 42 fb       	call -0x97c <uxQueueMessagesWaiting : 113848 >			  ## os_api.c:291:13
  1141c4:    10 58             	if (r0 == 0) goto 0x70 <__os_taskq_pend+0xA6 : 114236 >			  ## os_api.c:291:13
  1141c6:    89 80             	r1 = sp + 0
  1141c8:    42 20             	r2 = 0x0			  ## os_api.c:296:15
  1141ca:    44 20             	r4 = 0x0			  ## os_api.c:296:15
  1141cc:    60 16             	r0 = r6			  ## os_api.c:296:15
  1141ce:    bf ea fa fa       	call -0xa0c <xQueueReceiveFromISR : 1137c6 >			  ## os_api.c:296:15
  1141d2:    a7 d6             	r7 = r10  #			  ## os_api.c:302:34
  1141d4:    00 20             		 r0 = [sp]			  ## os_api.c:300:24
  1141d6:    81 a8             	r1 = r0 >> 0x8			  ## os_api.c:300:24
  1141d8:    d1 60             	[r5+0x0] = r1			  ## os_api.c:300:17
  1141da:    04 88             	goto 0x10 <__os_taskq_pend+0x5C : 1141ec >			  ## os_api.c:300:17
  1141dc:    42 20             	r2 = 0x0			  ## os_api.c:303:19
  1141de:    60 15             	r1_r0 = r7_r6			  ## os_api.c:303:19
  1141e0:    bf ea f1 fa       	call -0xa1e <xQueueReceiveFromISR : 1137c6 >			  ## os_api.c:303:19
  1141e4:    dc e9 00 00       	r0 = b[sp] (u)			  ## os_api.c:303:19
  1141e8:    c7 24             	r7 += 0x4			  ## os_api.c:302:9
  1141ea:    c4 21             	r4 += 0x1			  ## os_api.c:302:41
  1141ec:    00 17             	r0 = r0.b0 (u)			  ## os_api.c:302:34
  1141ee:    80 ed f5 41       	ifs (r4 < r0) goto -0x16 <__os_taskq_pend+0x4C : 1141dc >			  ## os_api.c:302:9
  1141f2:    bf ea 1c f4       	call -0x17c8 <local_irq_enable : 112a2e >			  ## os_api.c:307:9
  1141f6:    50 60             	r0 = [r5+0x0] 			  ## os_api.c:309:14
  1141f8:    60 e1 70 08       	r0 = r0 & 0xF00000			  ## os_api.c:309:22
  1141fc:    21 ff 40 09 45 00 	if (r0 != 0x300000) goto 0x8a <__os_taskq_pend+0xFC : 11428c >			  ## os_api.c:309:22
  114202:    50 62             	r0 = [r5+0x8] 			  ## os_api.c:88:19
  114204:    04 17             	r4 = r0.b0 (u)			  ## os_api.c:88:27
  114206:    4f 81             	r7 = r4 + 0x1			  ## os_api.c:92:18
  114208:    41 16             	r1 = r4			  ## os_api.c:91:9
  11420a:    30 ea 80 0f       	if ((r0 & 0x100) != 0) {			  ## os_api.c:91:9
  11420e:    71 16             		r1 = r7
                               	}			  ## os_api.c:91:9
  114210:    dc e9 00 20       	r2 = b[sp] (u)			  ## os_api.c:312:32
  114214:    b3 e1 84 04       	r3 = uextra(r0, p:0x9, l:0x1)			  ## os_api.c:94:9
  114218:    33 21             	r3 |= 0x2			  ## os_api.c:94:9
  11421a:    31 18             	r1 += r3			  ## os_api.c:100:26
  11421c:    c2 21             	r2 += 0x1			  ## os_api.c:312:37
  11421e:    02 e9 2c 10       	if (r1 >= r2) goto 0x58 <__os_taskq_pend+0xEA : 11427a >			  ## os_api.c:312:37
  114222:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:101:13
  114224:    01 f8 0a 04       	if (r1 == 0x2) goto 0x14 <__os_taskq_pend+0xAC : 11423c >			  ## os_api.c:101:13
  114228:    81 f8 10 02       	if (r1 != 0x1) goto 0x20 <__os_taskq_pend+0xBC : 11424c >
  11422c:    50 63             	r0 = [r5+0xc] 			  ## os_api.c:102:43
  11422e:    d0 ec a0 10       	r1 = [r10+0x0]			  ## os_api.c:102:34
  114232:    c1 00             	call r1			  ## os_api.c:102:19
  114234:    04 92             	goto 0x24 <__os_taskq_pend+0xCA : 11425a >
  114236:    bf ea fa f3       	call -0x180c <local_irq_enable : 112a2e >			  ## os_api.c:292:13
  11423a:    04 9f             	goto 0x3e <__os_taskq_pend+0xEA : 11427a >			  ## os_api.c:292:13
  11423c:    50 e8 06 52       	if ((r0 & 0x400) != 0) goto 0xc <__os_taskq_pend+0xBC : 11424c >
  114240:    50 ec 5c 00       	r1_r0 = d[r5+0xc]			  ## os_api.c:104:57
  114244:    d0 ec a0 20       	r2 = [r10+0x0]			  ## os_api.c:104:39
  114248:    c2 00             	call r2			  ## os_api.c:104:19
  11424a:    04 87             	goto 0xe <__os_taskq_pend+0xCA : 11425a >
  11424c:    31 f1 ff 4f       	r1 = r4 + -0x1  #			  ## os_api.c:106:72
  114250:    50 63             		 r0 = [r5+0xc] 			  ## os_api.c:106:55
  114252:    d0 ec a0 30       	r3 = [r10+0x0]			  ## os_api.c:106:46
  114256:    82 16             	r2 = r8			  ## os_api.c:106:19
  114258:    c3 00             	call r3			  ## os_api.c:106:19
  11425a:    51 62             	r1 = [r5+0x8] 			  ## os_api.c:108:13
  11425c:    31 ea 80 df       	if ((r1 & 0x100) != 0) {			  ## os_api.c:108:13
  114260:    59 8c             		r1 = r5 + 0xc			  ## os_api.c:110:21
  114262:    d8 ec 1a 14       		r1 = [r1+r4<<2]			  ## os_api.c:110:21
  114266:    90 60             		[r1+0x0] = r0			  ## os_api.c:110:39
  114268:    51 62             		r1 = [r5+0x8] 
                               	} else {			  ## os_api.c:110:39
  11426a:    47 16             		r7 = r4
                               	}			  ## os_api.c:110:39
  11426c:    51 e8 05 48       	if ((r1 & 0x200) == 0) goto 0xa <__os_taskq_pend+0xEA : 11427a >			  ## os_api.c:110:39
  114270:    58 8c             	r0 = r5 + 0xc			  ## os_api.c:114:35
  114272:    d8 ec 0a 07       	r0 = [r0+r7<<2]			  ## os_api.c:114:35
  114276:    bf ea 3a ff       	call -0x18c <os_sem_post : 1140ee >			  ## os_api.c:114:13
  11427a:    89 80             	r1 = sp + 0
  11427c:    43 21             	r3 = 0x1			  ## os_api.c:284:15
  11427e:    60 16             	r0 = r6			  ## os_api.c:284:15
  114280:    92 16             	r2 = r9			  ## os_api.c:284:15
  114282:    bf ea 2e f9       	call -0xda4 <xQueueGenericReceive : 1134e2 >			  ## os_api.c:284:15
  114286:    c0 59             	if (r0 != 0) goto -0xce <__os_taskq_pend+0x2A : 1141ba >
  114288:    40 36             	r0 = 0x16
  11428a:    04 81             	goto 0x2 <__os_taskq_pend+0xFE : 11428e >
  11428c:    40 2d             	r0 = 0xd
  11428e:    02 81             	sp += 0x4
  114290:    5a 04             	{pc, r10-r4} = [sp++]			  ## os_api.c:316:1


os_taskq_pend:
  114292:    12 3f             	r2 = -0x1			  ## os_api.c:319:0
  114294:    10 16             	r0 = r1			  ## os_api.c:320:12
  114296:    b7 9c             	goto -0x108 <__os_taskq_pend : 114190 >			  ## os_api.c:320:12


os_task_pend:
  114298:    12 3f             	r2 = -0x1			  ## os_api.c:324:0
  11429a:    10 16             	r0 = r1			  ## os_api.c:325:12
  11429c:    b7 99             	goto -0x10e <__os_taskq_pend : 114190 >			  ## os_api.c:325:12


__os_taskq_post:
  11429e:    77 04             	[--sp] = {rets, r7-r4}			  ## os_api.c:329:0
  1142a0:    e2 9e             	sp += -0x8			  ## os_api.c:329:0
  1142a2:    34 16             	r4 = r3			  ## os_api.c:329:0
  1142a4:    25 16             	r5 = r2			  ## os_api.c:329:0
  1142a6:    17 16             	r7 = r1			  ## os_api.c:329:0
  1142a8:    bf ea 52 fd       	call -0x55c <xTaskGetHandle : 113d50 >			  ## os_api.c:336:12
  1142ac:    00 54             	if (r0 == 0) goto 0x28 <__os_taskq_post+0x38 : 1142d6 >
  1142ae:    bf ea a4 fe       	call -0x2b8 <get_taskq : 113ffa >			  ## os_api.c:342:13
  1142b2:    06 16             	r6 = r0			  ## os_api.c:342:13
  1142b4:    06 52             	if (r6 == 0) goto 0x24 <__os_taskq_post+0x3C : 1142da >
  1142b6:    50 17             	r0 = r5.b0 (u)			  ## os_api.c:346:15
  1142b8:    a0 e1 60 74       	r0 <= insert(r7, p:0x8, l:0x18)			  ## os_api.c:347:15
  1142bc:    80 21             	[sp+4] = r0			  ## os_api.c:347:15
  1142be:    bf ea af f3       	call -0x18a2 <os_code_begin : 112a20 >			  ## os_api.c:349:5
  1142c2:    60 16             	r0 = r6			  ## os_api.c:351:9
  1142c4:    bf ea d7 fa       	call -0xa52 <uxQueueSpacesAvailable : 113876 >			  ## os_api.c:351:9
  1142c8:    59 81             	r1 = r5 + 0x1			  ## os_api.c:351:46
  1142ca:    01 e9 08 00       	if (r0 >= r1) goto 0x10 <__os_taskq_post+0x40 : 1142de >			  ## os_api.c:351:9
  1142ce:    bf ea ae f3       	call -0x18a4 <local_irq_enable : 112a2e >			  ## os_api.c:352:9
  1142d2:    40 35             	r0 = 0x15			  ## os_api.c:352:9
  1142d4:    04 9b             	goto 0x36 <__os_taskq_post+0x6E : 11430c >			  ## os_api.c:352:9
  1142d6:    40 2e             	r0 = 0xe
  1142d8:    04 99             	goto 0x32 <__os_taskq_post+0x6E : 11430c >
  1142da:    40 24             	r0 = 0x4
  1142dc:    04 97             	goto 0x2e <__os_taskq_post+0x6E : 11430c >
  1142de:    89 84             	r1 = sp + 4
  1142e0:    8a 80             	r2 = sp + 0
  1142e2:    43 20             	r3 = 0x0			  ## os_api.c:357:11
  1142e4:    47 20             	r7 = 0x0			  ## os_api.c:357:11
  1142e6:    60 16             	r0 = r6			  ## os_api.c:357:11
  1142e8:    bf ea 19 fa       	call -0xbce <xQueueGenericSendFromISR : 11371e >			  ## os_api.c:357:11
  1142ec:    04 88             	goto 0x10 <__os_taskq_post+0x60 : 1142fe >
  1142ee:    8a 80             	r2 = sp + 0
  1142f0:    43 20             	r3 = 0x0			  ## os_api.c:359:15
  1142f2:    60 16             	r0 = r6			  ## os_api.c:359:15
  1142f4:    41 16             	r1 = r4			  ## os_api.c:359:15
  1142f6:    bf ea 12 fa       	call -0xbdc <xQueueGenericSendFromISR : 11371e >			  ## os_api.c:359:15
  1142fa:    c4 24             	r4 += 0x4			  ## os_api.c:358:5
  1142fc:    c7 21             	r7 += 0x1			  ## os_api.c:358:32
  1142fe:    85 ed f6 71       	ifs (r7 < r5) goto -0x14 <__os_taskq_post+0x50 : 1142ee >			  ## os_api.c:358:5
  114302:    bf ea 94 f3       	call -0x18d8 <local_irq_enable : 112a2e >			  ## os_api.c:362:5
  114306:    bf ea a9 f4       	call -0x16ae <vPortYield : 112c5c >			  ## os_api.c:364:5
  11430a:    40 20             	r0 = 0x0			  ## os_api.c:364:5
  11430c:    02 82             	sp += 0x8
  11430e:    57 04             	{pc, r7-r4} = [sp++]			  ## os_api.c:367:1


os_taskq_post:
  114310:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:370:0
  114312:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:370:0
  114314:    e2 97             	sp += -0x24			  ## os_api.c:370:0
  114316:    14 16             	r4 = r1			  ## os_api.c:370:0
  114318:    a9 8c             	r1 = sp + 44			  ## os_api.c:370:0
  11431a:    81 20             	[sp] = r1			  ## os_api.c:374:5
  11431c:    41 20             	r1 = 0x0
  11431e:    04 88             	goto 0x10 <os_taskq_post+0x20 : 114330 >
  114320:    02 20             	r2 = [sp]			  ## os_api.c:376:19
  114322:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:376:19
  114324:    83 20             	[sp] = r3			  ## os_api.c:376:19
  114326:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:376:19
  114328:    8b 84             	r3 = sp + 4			  ## os_api.c:376:19
  11432a:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:376:17
  11432e:    c1 21             	r1 += 0x1			  ## os_api.c:375:32
  114330:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post+0x10 : 114320 >			  ## os_api.c:375:5
  114334:    8b 84             	r3 = sp + 4
  114336:    60 e0 80 18       	r1 = 0x400000			  ## os_api.c:379:12
  11433a:    42 16             	r2 = r4			  ## os_api.c:379:12
  11433c:    51 90             	call -0xa0 <__os_taskq_post : 11429e >			  ## os_api.c:379:12
  11433e:    02 89             	sp += 0x24
  114340:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:379:5
  114342:    02 82             	sp += 0x8			  ## os_api.c:379:5
  114344:    80 00             	rts			  ## os_api.c:379:5


os_taskq_post_type:
  114346:    d7 8b             	goto -0xaa <__os_taskq_post : 11429e >			  ## os_api.c:383:0


os_taskq_flush:
  114348:    7b 04             	[--sp] = {rets, r11-r4}			  ## os_api.c:388:0
  11434a:    e2 93             	sp += -0x34			  ## os_api.c:388:0
  11434c:    bf ea 9e fd       	call -0x4c4 <xTaskGetCurrentTaskHandle : 113e8c >			  ## os_api.c:395:12
  114350:    20 56             	if (r0 == 0) goto 0xac <os_taskq_flush+0xB6 : 1143fe >
  114352:    bf ea 52 fe       	call -0x35c <get_taskq : 113ffa >			  ## os_api.c:399:13
  114356:    04 16             	r4 = r0			  ## os_api.c:399:13
  114358:    24 50             	if (r4 == 0) goto 0xa0 <os_taskq_flush+0xB2 : 1143fa >
  11435a:    bf ea 61 f3       	call -0x193e <os_code_begin : 112a20 >			  ## os_api.c:404:5
  11435e:    40 16             	r0 = r4			  ## os_api.c:406:20
  114360:    bf ea 72 fa       	call -0xb1c <uxQueueMessagesWaiting : 113848 >			  ## os_api.c:406:20
  114364:    05 16             	r5 = r0			  ## os_api.c:406:20
  114366:    f8 e8 04 b0       	r11 = sp + 4
  11436a:    49 e0 f2 ff       	r9 = -0xe
  11436e:    ca ff e0 1c 03 00 	r10 = 0x31ce0 <mask_log_e : 31ce0 >
  114374:    c8 ff 7a 4a 11 00 	r8 = 0x114a7a <vTickISR+0x296 : 114a7a >
  11437a:    14 9c             	goto 0x78 <os_taskq_flush+0xAC : 1143f4 >
  11437c:    89 80             	r1 = sp + 0
  11437e:    82 14             	r3_r2 = 0			  ## os_api.c:409:9
  114380:    46 20             	r6 = 0x0			  ## os_api.c:409:9
  114382:    40 16             	r0 = r4			  ## os_api.c:409:9
  114384:    bf ea ad f8       	call -0xea6 <xQueueGenericReceive : 1134e2 >			  ## os_api.c:409:9
  114388:    8f 84             	r7 = sp + 4
  11438a:    04 87             	goto 0xe <os_taskq_flush+0x52 : 11439a >
  11438c:    82 14             	r3_r2 = 0			  ## os_api.c:411:13
  11438e:    40 16             	r0 = r4			  ## os_api.c:411:13
  114390:    71 16             	r1 = r7			  ## os_api.c:411:13
  114392:    bf ea a6 f8       	call -0xeb4 <xQueueGenericReceive : 1134e2 >			  ## os_api.c:411:13
  114396:    c7 24             	r7 += 0x4			  ## os_api.c:410:9
  114398:    c6 21             	r6 += 0x1			  ## os_api.c:410:65
  11439a:    00 20             	r0 = [sp]			  ## os_api.c:410:34
  11439c:    02 17             	r2 = r0.b0 (u)			  ## os_api.c:410:34
  11439e:    06 fc 02 16       	if (r6 > 0xb) goto 0x4 <os_taskq_flush+0x5E : 1143a6 >			  ## os_api.c:410:34
  1143a2:    82 ed f3 61       	ifs (r6 < r2) goto -0x1a <os_taskq_flush+0x44 : 11438c >
  1143a6:    02 ee 06 50       	ifs (r5 > r2) goto 0xc <os_taskq_flush+0x6E : 1143b6 >
  1143aa:    d0 ec a0 30       	r3 = [r10+0x0]			  ## os_api.c:413:9
  1143ae:    80 16             	r0 = r8			  ## os_api.c:413:9
  1143b0:    51 16             	r1 = r5			  ## os_api.c:413:9
  1143b2:    c3 00             	call r3			  ## os_api.c:413:9
  1143b4:    00 20             	r0 = [sp]			  ## os_api.c:413:9
  1143b6:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:414:26
  1143b8:    32 e1 ff 5f       	r2 = r5 + -0x1			  ## os_api.c:414:31
  1143bc:    60 e1 70 04       	r0 = r0 & 0xF0000000			  ## os_api.c:416:24
  1143c0:    2d 1e             	r5 = r2 - r1			  ## os_api.c:414:18
  1143c2:    21 ff 40 05 16 00 	if (r0 != 0x30000000) goto 0x2c <os_taskq_flush+0xAC : 1143f4 >
  1143c8:    d0 ec b4 10       	r1 = [r11+0x4]			  ## os_api.c:417:27
  1143cc:    10 17             	r0 = r1.b0 (u)			  ## os_api.c:417:35
  1143ce:    51 e8 09 40       	if ((r1 & 0x100) == 0) goto 0x12 <os_taskq_flush+0x9C : 1143e4 >
  1143d2:    89 84             	r1 = sp + 4
  1143d4:    c1 28             	r1 += 0x8			  ## os_api.c:421:25
  1143d6:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## os_api.c:421:25
  1143da:    d0 ec 11 90       	[r1+0x0] = r9			  ## os_api.c:421:43
  1143de:    d0 ec b4 10       	r1 = [r11+0x4]			  ## os_api.c:421:43
  1143e2:    c0 21             	r0 += 0x1			  ## os_api.c:420:24
  1143e4:    51 e8 06 48       	if ((r1 & 0x200) == 0) goto 0xc <os_taskq_flush+0xAC : 1143f4 >
  1143e8:    89 84             	r1 = sp + 4
  1143ea:    c1 28             	r1 += 0x8			  ## os_api.c:425:39
  1143ec:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## os_api.c:425:39
  1143f0:    bf ea 7d fe       	call -0x306 <os_sem_post : 1140ee >			  ## os_api.c:425:17
  1143f4:    e5 43             	if (r5 != 0) goto -0x7a <os_taskq_flush+0x34 : 11437c >
  1143f6:    bf ea 1a f3       	call -0x19cc <local_irq_enable : 112a2e >			  ## os_api.c:430:5
  1143fa:    40 20             	r0 = 0x0
  1143fc:    04 81             	goto 0x2 <os_taskq_flush+0xB8 : 114400 >
  1143fe:    10 2a             	r0 = -0x16
  114400:    02 8d             	sp += 0x34
  114402:    5b 04             	{pc, r11-r4} = [sp++]			  ## os_api.c:433:1


task_queue_post_event:
  114404:    13 16             	r3 = r1			  ## os_api.c:440:0
  114406:    60 e0 00 19       	r1 = 0x200000			  ## os_api.c:441:12
  11440a:    a7 89             	goto -0x16e <__os_taskq_post : 11429e >			  ## os_api.c:441:12


os_taskq_post_msg:
  11440c:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:445:0
  11440e:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:445:0
  114410:    e2 97             	sp += -0x24			  ## os_api.c:445:0
  114412:    14 16             	r4 = r1			  ## os_api.c:445:0
  114414:    a9 8c             	r1 = sp + 44			  ## os_api.c:445:0
  114416:    81 20             	[sp] = r1			  ## os_api.c:449:5
  114418:    41 20             	r1 = 0x0
  11441a:    04 88             	goto 0x10 <os_taskq_post_msg+0x20 : 11442c >
  11441c:    02 20             	r2 = [sp]			  ## os_api.c:451:19
  11441e:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:451:19
  114420:    83 20             	[sp] = r3			  ## os_api.c:451:19
  114422:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:451:19
  114424:    8b 84             	r3 = sp + 4			  ## os_api.c:451:19
  114426:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:451:17
  11442a:    c1 21             	r1 += 0x1			  ## os_api.c:450:32
  11442c:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post_msg+0x10 : 11441c >			  ## os_api.c:450:5
  114430:    8b 84             	r3 = sp + 4
  114432:    60 e0 80 19       	r1 = 0x100000			  ## os_api.c:455:12
  114436:    42 16             	r2 = r4			  ## os_api.c:455:12
  114438:    bf ea 31 ff       	call -0x19e <__os_taskq_post : 11429e >			  ## os_api.c:455:12
  11443c:    02 89             	sp += 0x24
  11443e:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:455:5
  114440:    02 82             	sp += 0x8			  ## os_api.c:455:5
  114442:    80 00             	rts			  ## os_api.c:455:5


os_taskq_post_event:
  114444:    62 04             	[--sp] = {r3, r2}			  ## os_api.c:459:0
  114446:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:459:0
  114448:    e2 97             	sp += -0x24			  ## os_api.c:459:0
  11444a:    14 16             	r4 = r1			  ## os_api.c:459:0
  11444c:    a9 8c             	r1 = sp + 44			  ## os_api.c:459:0
  11444e:    81 20             	[sp] = r1			  ## os_api.c:463:5
  114450:    41 20             	r1 = 0x0
  114452:    04 88             	goto 0x10 <os_taskq_post_event+0x20 : 114464 >
  114454:    02 20             	r2 = [sp]			  ## os_api.c:465:19
  114456:    2b 84             	r3 = r2 + 0x4			  ## os_api.c:465:19
  114458:    83 20             	[sp] = r3			  ## os_api.c:465:19
  11445a:    22 60             	r2 = [r2+0x0] 			  ## os_api.c:465:19
  11445c:    8b 84             	r3 = sp + 4			  ## os_api.c:465:19
  11445e:    d8 ec 3b 21       	[r3+r1<<2] = r2			  ## os_api.c:465:17
  114462:    c1 21             	r1 += 0x1			  ## os_api.c:464:32
  114464:    84 ed f6 11       	ifs (r1 < r4) goto -0x14 <os_taskq_post_event+0x10 : 114454 >			  ## os_api.c:464:5
  114468:    8b 84             	r3 = sp + 4
  11446a:    60 e0 00 19       	r1 = 0x200000			  ## os_api.c:469:12
  11446e:    42 16             	r2 = r4			  ## os_api.c:469:12
  114470:    bf ea 15 ff       	call -0x1d6 <__os_taskq_post : 11429e >			  ## os_api.c:469:12
  114474:    02 89             	sp += 0x24
  114476:    34 04             	{rets, r4} = [sp++]			  ## os_api.c:469:5
  114478:    02 82             	sp += 0x8			  ## os_api.c:469:5
  11447a:    80 00             	rts			  ## os_api.c:469:5


os_taskq_accept:
  11447c:    42 20             	r2 = 0x0			  ## os_api.c:473:0
  11447e:    10 16             	r0 = r1			  ## os_api.c:474:12
  114480:    47 87             	goto -0x2f2 <__os_taskq_pend : 114190 >			  ## os_api.c:474:12


os_taskq_del:
  114482:    7c 04             	[--sp] = {rets, r12-r4}			  ## os_api.c:479:0
  114484:    e2 93             	sp += -0x34			  ## os_api.c:479:0
  114486:    1c 16             	r12 = r1			  ## os_api.c:479:0
  114488:    bf ea 62 fc       	call -0x73c <xTaskGetHandle : 113d50 >			  ## os_api.c:488:12
  11448c:    bf ea b5 fd       	call -0x496 <get_taskq : 113ffa >			  ## os_api.c:490:13
  114490:    05 16             	r5 = r0			  ## os_api.c:490:13
  114492:    25 5c             	if (r5 == 0) goto 0xb8 <os_taskq_del+0xCA : 11454c >
  114494:    bf ea c4 f2       	call -0x1a78 <os_code_begin : 112a20 >			  ## os_api.c:495:5
  114498:    50 16             	r0 = r5			  ## os_api.c:497:20
  11449a:    bf ea d5 f9       	call -0xc56 <uxQueueMessagesWaiting : 113848 >			  ## os_api.c:497:20
  11449e:    07 16             	r7 = r0			  ## os_api.c:497:20
  1144a0:    69 e1 70 c8       	r9 = r12 & 0xF00000
  1144a4:    f8 e8 04 a0       	r10 = sp + 4
  1144a8:    48 e0 17 00       	r8 = 0x17
  1144ac:    4b e0 f2 ff       	r11 = -0xe
  1144b0:    24 89             	goto 0x92 <os_taskq_del+0xC2 : 114544 >
  1144b2:    89 80             	r1 = sp + 0
  1144b4:    82 14             	r3_r2 = 0			  ## os_api.c:502:9
  1144b6:    44 20             	r4 = 0x0			  ## os_api.c:502:9
  1144b8:    50 16             	r0 = r5			  ## os_api.c:502:9
  1144ba:    bf ea 12 f8       	call -0xfdc <xQueueGenericReceive : 1134e2 >			  ## os_api.c:502:9
  1144be:    8e 84             	r6 = sp + 4
  1144c0:    04 87             	goto 0xe <os_taskq_del+0x4E : 1144d0 >
  1144c2:    82 14             	r3_r2 = 0			  ## os_api.c:504:13
  1144c4:    50 16             	r0 = r5			  ## os_api.c:504:13
  1144c6:    61 16             	r1 = r6			  ## os_api.c:504:13
  1144c8:    bf ea 0b f8       	call -0xfea <xQueueGenericReceive : 1134e2 >			  ## os_api.c:504:13
  1144cc:    c6 24             	r6 += 0x4			  ## os_api.c:503:9
  1144ce:    c4 21             	r4 += 0x1			  ## os_api.c:503:65
  1144d0:    00 20             	r0 = [sp]			  ## os_api.c:503:34
  1144d2:    01 17             	r1 = r0.b0 (u)			  ## os_api.c:503:34
  1144d4:    04 fc 02 16       	if (r4 > 0xb) goto 0x4 <os_taskq_del+0x5A : 1144dc >			  ## os_api.c:503:34
  1144d8:    81 ed f3 41       	ifs (r4 < r1) goto -0x1a <os_taskq_del+0x40 : 1144c2 >
  1144dc:    32 e1 ff 7f       	r2 = r7 + -0x1			  ## os_api.c:506:31
  1144e0:    80 a8             	r0 = r0 >> 0x8			  ## os_api.c:508:18
  1144e2:    2f 1e             	r7 = r2 - r1			  ## os_api.c:506:18
  1144e4:    0c e8 14 00       	if (r0 == r12) goto 0x28 <os_taskq_del+0x8E : 114510 >
  1144e8:    89 80             	r1 = sp + 0
  1144ea:    82 14             	r3_r2 = 0			  ## os_api.c:523:13
  1144ec:    44 20             	r4 = 0x0			  ## os_api.c:523:13
  1144ee:    50 16             	r0 = r5			  ## os_api.c:523:13
  1144f0:    bf ea 26 f7       	call -0x11b4 <xQueueGenericSend : 113340 >			  ## os_api.c:523:13
  1144f4:    8e 84             	r6 = sp + 4
  1144f6:    04 87             	goto 0xe <os_taskq_del+0x84 : 114506 >
  1144f8:    82 14             	r3_r2 = 0			  ## os_api.c:525:17
  1144fa:    50 16             	r0 = r5			  ## os_api.c:525:17
  1144fc:    61 16             	r1 = r6			  ## os_api.c:525:17
  1144fe:    bf ea 1f f7       	call -0x11c2 <xQueueGenericSend : 113340 >			  ## os_api.c:525:17
  114502:    c6 24             	r6 += 0x4			  ## os_api.c:524:13
  114504:    c4 21             	r4 += 0x1			  ## os_api.c:524:45
  114506:    dc e9 00 00       	r0 = b[sp] (u)			  ## os_api.c:524:38
  11450a:    80 ed f5 41       	ifs (r4 < r0) goto -0x16 <os_taskq_del+0x76 : 1144f8 >			  ## os_api.c:524:38
  11450e:    04 9a             	goto 0x34 <os_taskq_del+0xC2 : 114544 >			  ## os_api.c:524:38
  114510:    c0 14             	r8 = 0
  114512:    21 ff 40 99 16 00 	if (r9 != 0x300000) goto 0x2c <os_taskq_del+0xC2 : 114544 >
  114518:    d0 ec a4 10       	r1 = [r10+0x4]			  ## os_api.c:510:31
  11451c:    10 17             	r0 = r1.b0 (u)			  ## os_api.c:510:39
  11451e:    51 e8 09 40       	if ((r1 & 0x100) == 0) goto 0x12 <os_taskq_del+0xB2 : 114534 >
  114522:    89 84             	r1 = sp + 4
  114524:    c1 28             	r1 += 0x8			  ## os_api.c:514:29
  114526:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## os_api.c:514:29
  11452a:    d0 ec 11 b0       	[r1+0x0] = r11			  ## os_api.c:514:47
  11452e:    d0 ec a4 10       	r1 = [r10+0x4]			  ## os_api.c:514:47
  114532:    c0 21             	r0 += 0x1			  ## os_api.c:513:28
  114534:    51 e8 06 48       	if ((r1 & 0x200) == 0) goto 0xc <os_taskq_del+0xC2 : 114544 >
  114538:    89 84             	r1 = sp + 4
  11453a:    c1 28             	r1 += 0x8			  ## os_api.c:518:43
  11453c:    d8 ec 1a 00       	r0 = [r1+r0<<2]			  ## os_api.c:518:43
  114540:    bf ea d5 fd       	call -0x456 <os_sem_post : 1140ee >			  ## os_api.c:518:21
  114544:    d7 56             	if (r7 != 0) goto -0x94 <os_taskq_del+0x30 : 1144b2 >
  114546:    bf ea 72 f2       	call -0x1b1c <local_irq_enable : 112a2e >			  ## os_api.c:531:5
  11454a:    04 82             	goto 0x4 <os_taskq_del+0xCE : 114550 >			  ## os_api.c:531:5
  11454c:    48 e0 18 00       	r8 = 0x18
  114550:    80 16             	r0 = r8			  ## os_api.c:534:1
  114552:    02 8d             	sp += 0x34			  ## os_api.c:534:1
  114554:    5c 04             	{pc, r12-r4} = [sp++]			  ## os_api.c:534:1


os_taskq_del_type:
  114556:    c7 95             	goto -0xd6 <os_taskq_del : 114482 >			  ## os_api.c:537:0


os_sem_create:
  114558:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:542:0
  11455a:    e2 9f             	sp += -0x4			  ## os_api.c:542:0
  11455c:    14 16             	r4 = r1			  ## os_api.c:542:0
  11455e:    05 16             	r5 = r0			  ## os_api.c:542:0
  114560:    a4 f9 0d 00       	if (r4 < 0x100) goto 0x1a <os_sem_create+0x26 : 11457e >			  ## os_api.c:542:0
  114564:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  11456a:    42 f0 8f 02       	r2 = 0x28f  #			  ## FreeRTOSConfig.h:181:5
  11456e:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  114570:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  114576:    c1 ff 91 48 11 00 	r1 = 0x114891 <vTickISR+0xAC : 114890 >			  ## FreeRTOSConfig.h:181:5
  11457c:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  11457e:    43 22             	r3 = 0x2			  ## queue.c:657:15
  114580:    78 3f             	r0 = 0xff			  ## queue.c:657:15
  114582:    41 20             	r1 = 0x0			  ## queue.c:657:15
  114584:    42 20             	r2 = 0x0			  ## queue.c:657:15
  114586:    53 d6             	r3 = r5  #			  ## queue.c:657:15
  114588:    83 20             		 [sp] = r3			  ## queue.c:657:15
  11458a:    bf ea c3 f3       	call -0x187a <xQueueGenericCreateStatic : 112d14 >			  ## queue.c:657:15
  11458e:    b0 e8 00 00       	if (r0 != 0x0) {
  114592:    84 6e             		[r0+0x38] = r4
                               	}			  ## queue.c:660:50
  114594:    40 20             	r0 = 0x0			  ## os_api.c:545:5
  114596:    02 81             	sp += 0x4
  114598:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:545:5


os_sem_del:
  11459a:    10 04             	[--sp] = rets			  ## os_api.c:549:0
  11459c:    bf ea 96 f9       	call -0xcd4 <vQueueDelete : 1138cc >			  ## os_api.c:550:5
  1145a0:    40 20             	r0 = 0x0			  ## os_api.c:552:5
  1145a2:    00 04             	pc = [sp++]			  ## os_api.c:552:5


os_sem_pend:
  1145a4:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:556:0
  1145a6:    64 e0 00 2b       	r2 = icfg			  ## cpu.h:71:5
  1145aa:    44 23             	r4 = 0x3
  1145ac:    61 ff ff 20 0c 00 	if ((r2 & 0xFF) != 0) goto 0x18 <os_sem_pend+0x26 : 1145ca >
  1145b2:    12 3f             	r2 = -0x1			  ## os_api.c:562:9
  1145b4:    b1 e8 00 00       	if (r1 != 0x0) {
  1145b8:    12 16             		r2 = r1
                               	}			  ## os_api.c:562:9
  1145ba:    41 20             	r1 = 0x0			  ## os_api.c:565:11
  1145bc:    43 20             	r3 = 0x0			  ## os_api.c:565:11
  1145be:    44 20             	r4 = 0x0			  ## os_api.c:565:11
  1145c0:    bf ea 8f f7       	call -0x10e2 <xQueueGenericReceive : 1134e2 >			  ## os_api.c:565:11
  1145c4:    b0 e8 01 00       	if (r0 != 0x1) {
  1145c8:    44 2b             		r4 = 0xb
                               	}			  ## os_api.c:567:12
  1145ca:    40 16             	r0 = r4			  ## os_api.c:568:1
  1145cc:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:568:1


os_sem_set:
  1145ce:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:585:0
  1145d0:    14 16             	r4 = r1			  ## os_api.c:585:0
  1145d2:    05 16             	r5 = r0			  ## os_api.c:585:0
  1145d4:    85 4d             	if (r5 != 0) goto 0x1a <os_sem_set+0x22 : 1145f0 >			  ## os_api.c:585:0
  1145d6:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  1145dc:    42 f0 b9 08       	r2 = 0x8b9  #			  ## FreeRTOSConfig.h:181:5
  1145e0:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1145e2:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  1145e8:    c1 ff 4e 49 11 00 	r1 = 0x11494e <vTickISR+0x16A : 11494e >			  ## FreeRTOSConfig.h:181:5
  1145ee:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1145f0:    bf ea 16 f2       	call -0x1bd4 <os_code_begin : 112a20 >			  ## queue.c:2235:5
  1145f4:    d4 6e             	[r5+0x38] = r4			  ## queue.c:2237:49
  1145f6:    bf ea 1a f2       	call -0x1bcc <local_irq_enable : 112a2e >			  ## queue.c:2239:5
  1145fa:    40 20             	r0 = 0x0			  ## os_api.c:590:5
  1145fc:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:590:5


os_sem_valid:
  1145fe:    50 ee 0c 14       	r1 = b[r0+0x4c] (u)			  ## os_api.c:594:0
  114602:    40 21             	r0 = 0x1			  ## os_api.c:597:17
  114604:    b1 e8 02 00       	if (r1 != 0x2) {
  114608:    40 20             		r0 = 0x0
                               	}			  ## os_api.c:597:17
  11460a:    80 00             	rts			  ## os_api.c:597:5


os_sem_query:
  11460c:    10 04             	[--sp] = rets			  ## os_api.c:601:0
  11460e:    64 e0 00 1b       	r1 = icfg			  ## cpu.h:71:5
  114612:    60 ff ff 10 03 00 	if ((r1 & 0xFF) == 0) goto 0x6 <os_sem_query+0x12 : 11461e >			  ## os_api.c:603:9
  114618:    bf ea 46 f9       	call -0xd74 <uxQueueMessagesWaitingFromISR : 1138a8 >			  ## os_api.c:604:15
  11461c:    00 04             	pc = [sp++]			  ## os_api.c:608:5
  11461e:    bf ea 13 f9       	call -0xdda <uxQueueMessagesWaiting : 113848 >			  ## os_api.c:606:15
  114622:    00 04             	pc = [sp++]			  ## os_api.c:608:5


os_mutex_create:
  114624:    74 04             	[--sp] = {rets, r4}			  ## os_api.c:612:0
  114626:    e2 9f             	sp += -0x4			  ## os_api.c:612:0
  114628:    03 16             	r3 = r0			  ## os_api.c:612:0
  11462a:    40 21             	r0 = 0x1			  ## queue.c:515:30
  11462c:    80 20             	[sp] = r0			  ## queue.c:515:30
  11462e:    41 20             	r1 = 0x0			  ## queue.c:515:30
  114630:    42 20             	r2 = 0x0			  ## queue.c:515:30
  114632:    44 20             	r4 = 0x0			  ## queue.c:515:30
  114634:    bf ea 6e f3       	call -0x1924 <xQueueGenericCreateStatic : 112d14 >			  ## queue.c:515:30
  114638:    00 48             	if (r0 == 0) goto 0x10 <os_mutex_create+0x26 : 11464a >
  11463a:    42 20             	r2 = 0x0			  ## queue.c:471:33
  11463c:    43 20             	r3 = 0x0			  ## queue.c:471:33
  11463e:    50 ec 01 20       	d[r0+0x0] = r3_r2			  ## queue.c:471:33
  114642:    84 63             	[r0+0xc] = r4			  ## queue.c:474:44
  114644:    41 20             	r1 = 0x0			  ## queue.c:479:16
  114646:    bf ea 7b f6       	call -0x130a <xQueueGenericSend : 113340 >			  ## queue.c:479:16
  11464a:    40 20             	r0 = 0x0			  ## os_api.c:615:5
  11464c:    02 81             	sp += 0x4			  ## os_api.c:615:5
  11464e:    54 04             	{pc, r4} = [sp++]			  ## os_api.c:615:5


os_mutex_del:
  114650:    10 04             	[--sp] = rets			  ## os_api.c:619:0
  114652:    bf ea 3b f9       	call -0xd8a <vQueueDelete : 1138cc >			  ## os_api.c:620:5
  114656:    40 20             	r0 = 0x0			  ## os_api.c:622:5
  114658:    00 04             	pc = [sp++]			  ## os_api.c:622:5


cpu_irq_disabled:
  11465a:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:76:0
  11465e:    61 e1 40 0f       	r1 = r0 & 0x300			  ## cpu.h:79:18
  114662:    40 21             	r0 = 0x1			  ## cpu.h:79:27
  114664:    31 e8 00 03       	if (r1 == 0x300) {
  114668:    40 20             		r0 = 0x0
                               	}			  ## cpu.h:79:27
  11466a:    80 00             	rts			  ## cpu.h:79:5


os_mutex_pend:
  11466c:    76 04             	[--sp] = {rets, r6-r4}			  ## os_api.c:626:0
  11466e:    13 16             	r3 = r1			  ## os_api.c:626:0
  114670:    04 16             	r4 = r0			  ## os_api.c:626:0
  114672:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:71:5
  114676:    42 23             	r2 = 0x3
  114678:    61 ff ff 00 33 00 	if ((r0 & 0xFF) != 0) goto 0x66 <os_mutex_pend+0x78 : 1146e4 >
  11467e:    71 8d             	call -0x26 <cpu_irq_disabled : 11465a >			  ## os_api.c:629:25
  114680:    90 51             	if (r0 != 0) goto 0x62 <os_mutex_pend+0x78 : 1146e4 >			  ## os_api.c:629:25
  114682:    15 3f             	r5 = -0x1			  ## os_api.c:633:9
  114684:    b3 e8 00 00       	if (r3 != 0x0) {
  114688:    35 16             		r5 = r3
                               	}			  ## os_api.c:633:9
  11468a:    84 4d             	if (r4 != 0) goto 0x1a <os_mutex_pend+0x3A : 1146a6 >
  11468c:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  114692:    42 f0 65 02       	r2 = 0x265  #			  ## FreeRTOSConfig.h:181:5
  114696:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  114698:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  11469e:    c1 ff 63 48 11 00 	r1 = 0x114863 <vTickISR+0x7E : 114862 >			  ## FreeRTOSConfig.h:181:5
  1146a4:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1146a6:    bf ea bb f1       	call -0x1c8a <os_code_begin : 112a20 >			  ## queue.c:620:5
  1146aa:    43 61             	r3 = [r4+0x4] 			  ## queue.c:622:18
  1146ac:    bf ea ee fb       	call -0x824 <xTaskGetCurrentTaskHandle : 113e8c >			  ## queue.c:622:44
  1146b0:    00 e8 0e 30       	if (r3 == r0) goto 0x1c <os_mutex_pend+0x64 : 1146d0 >			  ## queue.c:622:44
  1146b4:    bf ea bb f1       	call -0x1c8a <local_irq_enable : 112a2e >			  ## queue.c:626:9
  1146b8:    41 20             	r1 = 0x0			  ## queue.c:628:19
  1146ba:    43 20             	r3 = 0x0			  ## queue.c:628:19
  1146bc:    46 20             	r6 = 0x0			  ## queue.c:628:19
  1146be:    40 16             	r0 = r4			  ## queue.c:628:19
  1146c0:    52 16             	r2 = r5			  ## queue.c:628:19
  1146c2:    bf ea 0e f7       	call -0x11e4 <xQueueGenericReceive : 1134e2 >			  ## queue.c:628:19
  1146c6:    01 16             	r1 = r0			  ## queue.c:628:19
  1146c8:    bf ea aa f1       	call -0x1cac <os_code_begin : 112a20 >			  ## queue.c:630:9
  1146cc:    81 42             	if (r1 != 0) goto 0x4 <os_mutex_pend+0x66 : 1146d2 >			  ## queue.c:630:9
  1146ce:    04 84             	goto 0x8 <os_mutex_pend+0x6C : 1146d8 >			  ## queue.c:630:9
  1146d0:    41 21             	r1 = 0x1
  1146d2:    c3 eb 01 40       	[r4+0xc] += 0x1
  1146d6:    16 16             	r6 = r1
  1146d8:    42 20             	r2 = 0x0			  ## os_api.c:638:12
  1146da:    b6 e8 01 00       	if (r6 != 0x1) {			  ## os_api.c:638:12
  1146de:    42 2b             		r2 = 0xb
                               	}			  ## os_api.c:638:12
  1146e0:    bf ea a5 f1       	call -0x1cb6 <local_irq_enable : 112a2e >			  ## queue.c:640:5
  1146e4:    20 16             	r0 = r2			  ## os_api.c:639:1
  1146e6:    56 04             	{pc, r6-r4} = [sp++]			  ## os_api.c:639:1


os_mutex_post:
  1146e8:    75 04             	[--sp] = {rets, r5, r4}			  ## os_api.c:642:0
  1146ea:    04 16             	r4 = r0			  ## os_api.c:642:0
  1146ec:    64 e0 00 0b       	r0 = icfg			  ## cpu.h:71:5
  1146f0:    45 23             	r5 = 0x3
  1146f2:    61 ff ff 00 28 00 	if ((r0 & 0xFF) != 0) goto 0x50 <os_mutex_post+0x60 : 114748 >
  1146f8:    51 90             	call -0xa0 <cpu_irq_disabled : 11465a >			  ## os_api.c:645:25
  1146fa:    90 46             	if (r0 != 0) goto 0x4c <os_mutex_post+0x60 : 114748 >			  ## os_api.c:645:25
  1146fc:    84 4d             	if (r4 != 0) goto 0x1a <os_mutex_post+0x30 : 114718 >
  1146fe:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  114704:    42 f0 2e 02       	r2 = 0x22e  #			  ## FreeRTOSConfig.h:181:5
  114708:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  11470a:    c0 ff 17 48 11 00 	r0 = 0x114817 <vTickISR+0x32 : 114816 >			  ## FreeRTOSConfig.h:181:5
  114710:    c1 ff 4a 48 11 00 	r1 = 0x11484a <vTickISR+0x66 : 11484a >			  ## FreeRTOSConfig.h:181:5
  114716:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  114718:    bf ea 82 f1       	call -0x1cfc <os_code_begin : 112a20 >			  ## queue.c:560:5
  11471c:    43 61             	r3 = [r4+0x4] 			  ## queue.c:568:18
  11471e:    bf ea b5 fb       	call -0x896 <xTaskGetCurrentTaskHandle : 113e8c >			  ## queue.c:568:44
  114722:    00 e8 04 30       	if (r3 == r0) goto 0x8 <os_mutex_post+0x46 : 11472e >			  ## queue.c:568:44
  114726:    bf ea 82 f1       	call -0x1cfc <local_irq_enable : 112a2e >			  ## queue.c:595:9
  11472a:    45 20             	r5 = 0x0			  ## queue.c:595:9
  11472c:    04 8d             	goto 0x1a <os_mutex_post+0x60 : 114748 >			  ## queue.c:595:9
  11472e:    40 63             	r0 = [r4+0xc] 			  ## queue.c:576:42
  114730:    32 e1 ff 0f       	r2 = r0 + -0x1			  ## queue.c:576:42
  114734:    c2 63             	[r4+0xc] = r2			  ## queue.c:576:42
  114736:    bf ea 7a f1       	call -0x1d0c <local_irq_enable : 112a2e >			  ## queue.c:582:13
  11473a:    45 20             	r5 = 0x0			  ## queue.c:582:13
  11473c:    82 45             	if (r2 != 0) goto 0xa <os_mutex_post+0x60 : 114748 >			  ## queue.c:582:13
  11473e:    41 20             	r1 = 0x0			  ## queue.c:583:20
  114740:    82 14             	r3_r2 = 0			  ## queue.c:583:20
  114742:    40 16             	r0 = r4			  ## queue.c:583:20
  114744:    bf ea fc f5       	call -0x1408 <xQueueGenericSend : 113340 >			  ## queue.c:583:20
  114748:    50 16             	r0 = r5			  ## os_api.c:653:1
  11474a:    55 04             	{pc, r5, r4} = [sp++]			  ## os_api.c:653:1


os_mutex_valid:
  11474c:    50 ee 0c 04       	r0 = b[r0+0x4c] (u)			  ## os_api.c:655:0
  114750:    b0 e8 01 00       	if (r0 != 0x1) {
  114754:    40 20             		r0 = 0x0
                               	}			  ## os_api.c:657:17
  114756:    80 00             	rts			  ## os_api.c:657:5


pxPortInitialiseStack:
  114758:    e8 34             	r0 += -0x4c			  ## port.c:144:0
  11475a:    82 63             	[r0+0xc] = r2			  ## port.c:156:12
  11475c:    42 20             	r2 = 0x0			  ## port.c:156:12
  11475e:    82 62             	[r0+0x8] = r2			  ## port.c:158:12
  114760:    20 eb 06 00       	[r0+] = {r2, r1}			  ## port.c:159:12
  114764:    80 00             	rts			  ## port.c:168:5


vPortEndScheduler:
  114766:    10 04             	[--sp] = rets			  ## port.c:303:0
  114768:    c0 ff c0 1c 03 00 	r0 = 0x31cc0 <uxCriticalNesting : 31cc0 >			  ## port.c:306:5
  11476e:    00 60             	r0 = [r0+0x0] 			  ## port.c:306:5
  114770:    00 ff e8 03 0d 00 	if (r0 == 0x3e8) goto 0x1a <vPortEndScheduler+0x2A : 114790 >			  ## port.c:306:5
  114776:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  11477c:    42 f0 32 01       	r2 = 0x132  #			  ## FreeRTOSConfig.h:181:5
  114780:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  114782:    c0 ff b6 4a 11 00 	r0 = 0x114ab6 <vTickISR+0x2D2 : 114ab6 >			  ## FreeRTOSConfig.h:181:5
  114788:    c1 ff a4 4a 11 00 	r1 = 0x114aa4 <vTickISR+0x2C0 : 114aa4 >			  ## FreeRTOSConfig.h:181:5
  11478e:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  114790:    00 04             	pc = [sp++]			  ## port.c:307:1


vPortExitCritical:
  114792:    74 04             	[--sp] = {rets, r4}			  ## port.c:377:0
  114794:    c4 ff c0 1c 03 00 	r4 = 0x31cc0 <uxCriticalNesting : 31cc0 >			  ## port.c:377:0
  11479a:    40 60             	r0 = [r4+0x0] 			  ## port.c:378:5
  11479c:    80 4e             	if (r0 != 0) goto 0x1c <vPortExitCritical+0x28 : 1147ba >			  ## port.c:378:5
  11479e:    c0 ff e0 1c 03 00 	r0 = 0x31ce0 <mask_log_e : 31ce0 >			  ## FreeRTOSConfig.h:181:5
  1147a4:    42 f0 7a 01       	r2 = 0x17a  #			  ## FreeRTOSConfig.h:181:5
  1147a8:    03 60             		 r3 = [r0+0x0] 			  ## FreeRTOSConfig.h:181:5
  1147aa:    c0 ff b6 4a 11 00 	r0 = 0x114ab6 <vTickISR+0x2D2 : 114ab6 >			  ## FreeRTOSConfig.h:181:5
  1147b0:    c1 ff bd 4a 11 00 	r1 = 0x114abd <vTickISR+0x2D8 : 114abc >			  ## FreeRTOSConfig.h:181:5
  1147b6:    c3 00             	call r3			  ## FreeRTOSConfig.h:181:5
  1147b8:    40 60             	r0 = [r4+0x0] 
  1147ba:    f8 3f             	r0 += -0x1			  ## port.c:379:22
  1147bc:    c0 60             	[r4+0x0] = r0			  ## port.c:379:22
  1147be:    30 e8 00 00       	if (r0 == 0x0) {			  ## port.c:379:22
  1147c2:    bf ea 34 f1       		call -0x1d98
                               	} <local_irq_enable : 112a2e >			  ## port.c:381:9
  1147c6:    54 04             	{pc, r4} = [sp++]			  ## port.c:383:1


OS_ClrPending:
  1147c8:    c0 ff b8 1c 03 00 	r0 = 0x31cb8 <highCurrentTCB : 31cb8 >			  ## port.c:390:0
  1147ce:    00 60             	r0 = [r0+0x0] 			  ## port.c:392:29
  1147d0:    c1 ff 8c 1c 03 00 	r1 = 0x31c8c <CurrentTCB : 31c8c >			  ## port.c:392:27
  1147d6:    90 60             	[r1+0x0] = r0			  ## port.c:392:27
  1147d8:    c0 ff a4 f1 10 00 	r0 = 0x10f1a4 <RAM_LIMIT_H+0xDD1A4 : 10f1a4 >			  ## port.c:393:25
  1147de:    40 ea 08 00       	[r0+0x0] = 0x8			  ## port.c:393:25
  1147e2:    80 00             	rts			  ## port.c:395:1


vTickISR:
  1147e4:    e9 04             	[--sp] = {psr, rets, reti}			  ## port.c:454:0
  1147e6:    60 04             	[--sp] = {r3-r0}			  ## port.c:456:25
  1147e8:    c0 ff ec f0 10 00 	r0 = 0x10f0ec <RAM_LIMIT_H+0xDD0EC : 10f0ec >			  ## port.c:456:25
  1147ee:    00 ef 40 00       	[r0+0x0] |= 0x40			  ## port.c:456:25
  1147f2:    bf ea b1 f4       	call -0x169e <xTaskIncrementTick : 113158 >			  ## port.c:464:13
  1147f6:    b0 e8 00 00       	if (r0 != 0x0) {			  ## port.c:464:13
  1147fa:    bf ea 2f f2       		call -0x1ba2
                               	} <vPortYield : 112c5c >			  ## port.c:466:13
  1147fe:    40 04             	{r3-r0} = [sp++]			  ## port.c:471:1
  114800:    a9 04             	{psr, rets, reti} = [sp++]			  ## port.c:471:1
  114802:    81 00             	rti			  ## port.c:471:1
  114804:    78 51             	r0 = b[r7+-0xf] (u)
  114806:    75 65             	r5 = [r7+0x14] 
  114808:    75 65             	r5 = [r7+0x14] 
  11480a:    47 65             	r7 = [r4+0x14] 
  11480c:    6e 65             	r6 = h[r6+0xa] (u)
  11480e:    72 69             	r2 = [r7+0x24] 
  114810:    63 52             	if (r3 == 0) goto -0x5c <vPortExitCritical+0x24 : 1147b6 >
  114812:    65 73             	r5 = [r6+-0x34] 
  114814:    65 74             	r5 = [r6+-0x30] 
  114816:    00 25             	r0 = [sp+20]
  114818:    73 20             	r3 = 0xc0
  11481a:    25 64             	r5 = [r2+0x10] 
  11481c:    0a 00              <unkown instruction>
  11481e:    78 51             	r0 = b[r7+-0xf] (u)
  114820:    75 65             	r5 = [r7+0x14] 
  114822:    75 65             	r5 = [r7+0x14] 
  114824:    47 65             	r7 = [r4+0x14] 
  114826:    6e 65             	r6 = h[r6+0xa] (u)
  114828:    72 69             	r2 = [r7+0x24] 
  11482a:    63 43             	if (r3 == 0) goto -0x7a <vPortExitCritical+0x20 : 1147b2 >
  11482c:    72 65             	r2 = [r7+0x14] 
  11482e:    61 74             	r1 = [r6+-0x30] 
  114830:    65 53             	if (r5 == 0) goto -0x5a <OS_ClrPending+0x10 : 1147d8 >
  114832:    74 61             	r4 = [r7+0x4] 
  114834:    74 69             	r4 = [r7+0x24] 
  114836:    63 00              <unkown instruction>
  114838:    78 51             	r0 = b[r7+-0xf] (u)
  11483a:    75 65             	r5 = [r7+0x14] 
  11483c:    75 65             	r5 = [r7+0x14] 
  11483e:    47 65             	r7 = [r4+0x14] 
  114840:    6e 65             	r6 = h[r6+0xa] (u)
  114842:    72 69             	r2 = [r7+0x24] 
  114844:    63 53             	if (r3 == 0) goto -0x5a <vTickISR+0x8 : 1147ec >
  114846:    65 6e             	r5 = [r6+0x38] 
  114848:    64 00              <unkown instruction>
  11484a:    78 51             	r0 = b[r7+-0xf] (u)
  11484c:    75 65             	r5 = [r7+0x14] 
  11484e:    75 65             	r5 = [r7+0x14] 
  114850:    47 69             	r7 = [r4+0x24] 
  114852:    76 65             	r6 = [r7+0x14] 
  114854:    4d 75             	r5 = h[r4+-0x16] (u)
  114856:    74 65             	r4 = [r7+0x14] 
  114858:    78 52             	r0 = b[r7+-0xe] (u)
  11485a:    65 63             	r5 = [r6+0xc] 
  11485c:    75 72             	r5 = [r7+-0x38] 
  11485e:    73 69             	r3 = [r7+0x24] 
  114860:    76 65             	r6 = [r7+0x14] 
  114862:    00 78             	r0 = [r0+-0x20] 
  114864:    51 75             	r1 = [r5+-0x2c] 
  114866:    65 75             	r5 = [r6+-0x2c] 
  114868:    65 54             	if (r5 == 0) goto -0x58 <vTickISR+0x2E : 114812 >
  11486a:    61 6b             	r1 = [r6+0x2c] 
  11486c:    65 4d             	if (r5 == 0) goto -0x66 <vTickISR+0x24 : 114808 >
  11486e:    75 74             	r5 = [r7+-0x30] 
  114870:    65 78             	r5 = [r6+-0x20] 
  114872:    52 65             	r2 = [r5+0x14] 
  114874:    63 75             	r3 = [r6+-0x2c] 
  114876:    72 73             	r2 = [r7+-0x34] 
  114878:    69 76             	r1 = h[r6+-0x14] (u)
  11487a:    65 00              <unkown instruction>
  11487c:    78 51             	r0 = b[r7+-0xf] (u)
  11487e:    75 65             	r5 = [r7+0x14] 
  114880:    75 65             	r5 = [r7+0x14] 
  114882:    47 65             	r7 = [r4+0x14] 
  114884:    6e 65             	r6 = h[r6+0xa] (u)
  114886:    72 69             	r2 = [r7+0x24] 
  114888:    63 52             	if (r3 == 0) goto -0x5c <vTickISR+0x4A : 11482e >
  11488a:    65 63             	r5 = [r6+0xc] 
  11488c:    65 69             	r5 = [r6+0x24] 
  11488e:    76 65             	r6 = [r7+0x14] 
  114890:    00 78             	r0 = [r0+-0x20] 
  114892:    51 75             	r1 = [r5+-0x2c] 
  114894:    65 75             	r5 = [r6+-0x2c] 
  114896:    65 43             	if (r5 == 0) goto -0x7a <vTickISR+0x3A : 11481e >
  114898:    72 65             	r2 = [r7+0x14] 
  11489a:    61 74             	r1 = [r6+-0x30] 
  11489c:    65 43             	if (r5 == 0) goto -0x7a <vTickISR+0x40 : 114824 >
  11489e:    6f 75             	r7 = h[r6+-0x16] (u)
  1148a0:    6e 74             	r6 = h[r6+-0x18] (u)
  1148a2:    69 6e             	r1 = h[r6+0x1c] (u)
  1148a4:    67 53             	if (r7 == 0) goto -0x5a <vTickISR+0x68 : 11484c >
  1148a6:    65 6d             	r5 = [r6+0x34] 
  1148a8:    61 70             	r1 = [r6+-0x40] 
  1148aa:    68 6f             	r0 = h[r6+0x1e] (u)
  1148ac:    72 65             	r2 = [r7+0x14] 
  1148ae:    53 74             	r3 = [r5+-0x30] 
  1148b0:    61 74             	r1 = [r6+-0x30] 
  1148b2:    69 63             	r1 = h[r6+0x6] (u)
  1148b4:    00 78             	r0 = [r0+-0x20] 
  1148b6:    51 75             	r1 = [r5+-0x2c] 
  1148b8:    65 75             	r5 = [r6+-0x2c] 
  1148ba:    65 47             	if (r5 == 0) goto -0x72 <vTickISR+0x66 : 11484a >
  1148bc:    65 6e             	r5 = [r6+0x38] 
  1148be:    65 72             	r5 = [r6+-0x38] 
  1148c0:    69 63             	r1 = h[r6+0x6] (u)
  1148c2:    53 65             	r3 = [r5+0x14] 
  1148c4:    6e 64             	r6 = h[r6+0x8] (u)
  1148c6:    46 72             	r6 = [r4+-0x38] 
  1148c8:    6f 6d             	r7 = h[r6+0x1a] (u)
  1148ca:    49 53             	r1 = b[r4+-0xd] (u)
  1148cc:    52 00              <unkown instruction>
  1148ce:    78 51             	r0 = b[r7+-0xf] (u)
  1148d0:    75 65             	r5 = [r7+0x14] 
  1148d2:    75 65             	r5 = [r7+0x14] 
  1148d4:    47 69             	r7 = [r4+0x24] 
  1148d6:    76 65             	r6 = [r7+0x14] 
  1148d8:    46 72             	r6 = [r4+-0x38] 
  1148da:    6f 6d             	r7 = h[r6+0x1a] (u)
  1148dc:    49 53             	r1 = b[r4+-0xd] (u)
  1148de:    52 00              <unkown instruction>
  1148e0:    78 51             	r0 = b[r7+-0xf] (u)
  1148e2:    75 65             	r5 = [r7+0x14] 
  1148e4:    75 65             	r5 = [r7+0x14] 
  1148e6:    52 65             	r2 = [r5+0x14] 
  1148e8:    63 65             	r3 = [r6+0x14] 
  1148ea:    69 76             	r1 = h[r6+-0x14] (u)
  1148ec:    65 46             	if (r5 == 0) goto -0x74 <vTickISR+0x96 : 11487a >
  1148ee:    72 6f             	r2 = [r7+0x3c] 
  1148f0:    6d 49             	r5 = b[r6+0x9] (u)
  1148f2:    53 52             	if (r3 == 0) goto -0x9c <vTickISR+0x74 : 114858 >
  1148f4:    00 75             	r0 = [r0+-0x2c] 
  1148f6:    78 51             	r0 = b[r7+-0xf] (u)
  1148f8:    75 65             	r5 = [r7+0x14] 
  1148fa:    75 65             	r5 = [r7+0x14] 
  1148fc:    4d 65             	r5 = h[r4+0xa] (u)
  1148fe:    73 73             	r3 = [r7+-0x34] 
  114900:    61 67             	r1 = [r6+0x1c] 
  114902:    65 73             	r5 = [r6+-0x34] 
  114904:    57 61             	r7 = [r5+0x4] 
  114906:    69 74             	r1 = h[r6+-0x18] (u)
  114908:    69 6e             	r1 = h[r6+0x1c] (u)
  11490a:    67 00              <unkown instruction>
  11490c:    75 78             	r5 = [r7+-0x20] 
  11490e:    51 75             	r1 = [r5+-0x2c] 
  114910:    65 75             	r5 = [r6+-0x2c] 
  114912:    65 53             	if (r5 == 0) goto -0x5a <vTickISR+0xD6 : 1148ba >
  114914:    70 61             	r0 = [r7+0x4] 
  114916:    63 65             	r3 = [r6+0x14] 
  114918:    73 41             	if (r3 == 0) goto -0x3e <vTickISR+0xF8 : 1148dc >
  11491a:    76 61             	r6 = [r7+0x4] 
  11491c:    69 6c             	r1 = h[r6+0x18] (u)
  11491e:    61 62             	r1 = [r6+0x8] 
  114920:    6c 65             	r4 = h[r6+0xa] (u)
  114922:    00 75             	r0 = [r0+-0x2c] 
  114924:    78 51             	r0 = b[r7+-0xf] (u)
  114926:    75 65             	r5 = [r7+0x14] 
  114928:    75 65             	r5 = [r7+0x14] 
  11492a:    4d 65             	r5 = h[r4+0xa] (u)
  11492c:    73 73             	r3 = [r7+-0x34] 
  11492e:    61 67             	r1 = [r6+0x1c] 
  114930:    65 73             	r5 = [r6+-0x34] 
  114932:    57 61             	r7 = [r5+0x4] 
  114934:    69 74             	r1 = h[r6+-0x18] (u)
  114936:    69 6e             	r1 = h[r6+0x1c] (u)
  114938:    67 46             	if (r7 == 0) goto -0x74 <vTickISR+0xE2 : 1148c6 >
  11493a:    72 6f             	r2 = [r7+0x3c] 
  11493c:    6d 49             	r5 = b[r6+0x9] (u)
  11493e:    53 52             	if (r3 == 0) goto -0x9c <vTickISR+0xC0 : 1148a4 >
  114940:    00 76             	r0 = [r0+-0x28] 
  114942:    51 75             	r1 = [r5+-0x2c] 
  114944:    65 75             	r5 = [r6+-0x2c] 
  114946:    65 44             	if (r5 == 0) goto -0x78 <vTickISR+0xEC : 1148d0 >
  114948:    65 6c             	r5 = [r6+0x30] 
  11494a:    65 74             	r5 = [r6+-0x30] 
  11494c:    65 00              <unkown instruction>
  11494e:    75 78             	r5 = [r7+-0x20] 
  114950:    51 75             	r1 = [r5+-0x2c] 
  114952:    65 75             	r5 = [r6+-0x2c] 
  114954:    65 4d             	if (r5 == 0) goto -0x66 <vTickISR+0x10C : 1148f0 >
  114956:    65 73             	r5 = [r6+-0x34] 
  114958:    73 61             	r3 = [r7+0x4] 
  11495a:    67 65             	r7 = [r6+0x14] 
  11495c:    73 53             	if (r3 == 0) goto -0x1a <vTickISR+0x160 : 114944 >
  11495e:    65 74             	r5 = [r6+-0x30] 
  114960:    00 25             	r0 = [sp+20]
  114962:    73 20             	r3 = 0xc0
  114964:    25 64             	r5 = [r2+0x10] 
  114966:    0a 00              <unkown instruction>
  114968:    76 54             	if (r6 == 0) goto -0x18 <vTickISR+0x16E : 114952 >
  11496a:    61 73             	r1 = [r6+-0x34] 
  11496c:    6b 44             	r3 = b[r6+0x4] (u)
  11496e:    65 6c             	r5 = [r6+0x30] 
  114970:    65 74             	r5 = [r6+-0x30] 
  114972:    65 00              <unkown instruction>
  114974:    70 72             	r0 = [r7+-0x38] 
  114976:    76 44             	if (r6 == 0) goto -0x38 <vTickISR+0x15C : 114940 >
  114978:    65 6c             	r5 = [r6+0x30] 
  11497a:    65 74             	r5 = [r6+-0x30] 
  11497c:    65 54             	if (r5 == 0) goto -0x58 <vTickISR+0x142 : 114926 >
  11497e:    43 42             	if (r3 == 0) goto -0xfc <vTickISR+0xA0 : 114884 >
  114980:    00 78             	r0 = [r0+-0x20] 
  114982:    54 61             	r4 = [r5+0x4] 
  114984:    73 6b             	r3 = [r7+0x2c] 
  114986:    52 65             	r2 = [r5+0x14] 
  114988:    73 75             	r3 = [r7+-0x2c] 
  11498a:    6d 65             	r5 = h[r6+0xa] (u)
  11498c:    41 6c             	r1 = [r4+0x30] 
  11498e:    6c 00              <unkown instruction>
  114990:    78 54             	r0 = b[r7+-0xc] (u)
  114992:    61 73             	r1 = [r6+-0x34] 
  114994:    6b 49             	r3 = b[r6+0x9] (u)
  114996:    6e 63             	r6 = h[r6+0x6] (u)
  114998:    72 65             	r2 = [r7+0x14] 
  11499a:    6d 65             	r5 = h[r6+0xa] (u)
  11499c:    6e 74             	r6 = h[r6+-0x18] (u)
  11499e:    54 69             	r4 = [r5+0x24] 
  1149a0:    63 6b             	r3 = [r6+0x2c] 
  1149a2:    00 76             	r0 = [r0+-0x28] 
  1149a4:    54 61             	r4 = [r5+0x4] 
  1149a6:    73 6b             	r3 = [r7+0x2c] 
  1149a8:    46 69             	r6 = [r4+0x24] 
  1149aa:    6e 64             	r6 = h[r6+0x8] (u)
  1149ac:    48 69             	r0 = h[r4+0x12] (u)
  1149ae:    67 68             	r7 = [r6+0x20] 
  1149b0:    74 65             	r4 = [r7+0x14] 
  1149b2:    73 74             	r3 = [r7+-0x30] 
  1149b4:    54 61             	r4 = [r5+0x4] 
  1149b6:    73 6b             	r3 = [r7+0x2c] 
  1149b8:    00 49             	if (r0 == 0) goto 0x12 <vTickISR+0x1E8 : 1149cc >
  1149ba:    44 4c             	if (r4 == 0) goto -0xe8 <vTickISR+0xF0 : 1148d4 >
  1149bc:    45 00              <unkown instruction>
  1149be:    76 54             	if (r6 == 0) goto -0x18 <vTickISR+0x1C4 : 1149a8 >
  1149c0:    61 73             	r1 = [r6+-0x34] 
  1149c2:    6b 53             	r3 = b[r6+-0xd] (u)
  1149c4:    74 61             	r4 = [r7+0x4] 
  1149c6:    72 74             	r2 = [r7+-0x30] 
  1149c8:    53 63             	r3 = [r5+0xc] 
  1149ca:    68 65             	r0 = h[r6+0xa] (u)
  1149cc:    64 75             	r4 = [r6+-0x2c] 
  1149ce:    6c 65             	r4 = h[r6+0xa] (u)
  1149d0:    72 00              <unkown instruction>
  1149d2:    70 72             	r0 = [r7+-0x38] 
  1149d4:    76 49             	if (r6 == 0) goto -0x2e <vTickISR+0x1C4 : 1149a8 >
  1149d6:    64 6c             	r4 = [r6+0x30] 
  1149d8:    65 54             	if (r5 == 0) goto -0x58 <vTickISR+0x19E : 114982 >
  1149da:    61 73             	r1 = [r6+-0x34] 
  1149dc:    6b 00              <unkown instruction>
  1149de:    70 63             	r0 = [r7+0xc] 
  1149e0:    54 61             	r4 = [r5+0x4] 
  1149e2:    73 6b             	r3 = [r7+0x2c] 
  1149e4:    47 65             	r7 = [r4+0x14] 
  1149e6:    74 4e             	if (r4 == 0) goto -0x24 <vTickISR+0x1E0 : 1149c4 >
  1149e8:    61 6d             	r1 = [r6+0x34] 
  1149ea:    65 00              <unkown instruction>
  1149ec:    78 54             	r0 = b[r7+-0xc] (u)
  1149ee:    61 73             	r1 = [r6+-0x34] 
  1149f0:    6b 47             	r3 = b[r6+0x7] (u)
  1149f2:    65 74             	r5 = [r6+-0x30] 
  1149f4:    48 61             	r0 = h[r4+0x2] (u)
  1149f6:    6e 64             	r6 = h[r6+0x8] (u)
  1149f8:    6c 65             	r4 = h[r6+0xa] (u)
  1149fa:    00 76             	r0 = [r0+-0x28] 
  1149fc:    54 61             	r4 = [r5+0x4] 
  1149fe:    73 6b             	r3 = [r7+0x2c] 
  114a00:    53 74             	r3 = [r5+-0x30] 
  114a02:    65 70             	r5 = [r6+-0x40] 
  114a04:    54 69             	r4 = [r5+0x24] 
  114a06:    63 6b             	r3 = [r6+0x2c] 
  114a08:    00 76             	r0 = [r0+-0x28] 
  114a0a:    54 61             	r4 = [r5+0x4] 
  114a0c:    73 6b             	r3 = [r7+0x2c] 
  114a0e:    50 6c             	r0 = [r5+0x30] 
  114a10:    61 63             	r1 = [r6+0xc] 
  114a12:    65 4f             	if (r5 == 0) goto -0x62 <vTickISR+0x1CE : 1149b2 >
  114a14:    6e 45             	r6 = b[r6+0x5] (u)
  114a16:    76 65             	r6 = [r7+0x14] 
  114a18:    6e 74             	r6 = h[r6+-0x18] (u)
  114a1a:    4c 69             	r4 = h[r4+0x12] (u)
  114a1c:    73 74             	r3 = [r7+-0x30] 
  114a1e:    00 78             	r0 = [r0+-0x20] 
  114a20:    54 61             	r4 = [r5+0x4] 
  114a22:    73 6b             	r3 = [r7+0x2c] 
  114a24:    52 65             	r2 = [r5+0x14] 
  114a26:    6d 6f             	r5 = h[r6+0x1e] (u)
  114a28:    76 65             	r6 = [r7+0x14] 
  114a2a:    46 72             	r6 = [r4+-0x38] 
  114a2c:    6f 6d             	r7 = h[r6+0x1a] (u)
  114a2e:    45 76             	r5 = [r4+-0x28] 
  114a30:    65 6e             	r5 = [r6+0x38] 
  114a32:    74 4c             	if (r4 == 0) goto -0x28 <vTickISR+0x228 : 114a0c >
  114a34:    69 73             	r1 = h[r6+-0x1a] (u)
  114a36:    74 00              <unkown instruction>
  114a38:    76 54             	if (r6 == 0) goto -0x18 <vTickISR+0x23E : 114a22 >
  114a3a:    61 73             	r1 = [r6+-0x34] 
  114a3c:    6b 53             	r3 = b[r6+-0xd] (u)
  114a3e:    65 74             	r5 = [r6+-0x30] 
  114a40:    54 69             	r4 = [r5+0x24] 
  114a42:    6d 65             	r5 = h[r6+0xa] (u)
  114a44:    4f 75             	r7 = h[r4+-0x16] (u)
  114a46:    74 53             	if (r4 == 0) goto -0x1a <vTickISR+0x24A : 114a2e >
  114a48:    74 61             	r4 = [r7+0x4] 
  114a4a:    74 65             	r4 = [r7+0x14] 
  114a4c:    00 78             	r0 = [r0+-0x20] 
  114a4e:    54 61             	r4 = [r5+0x4] 
  114a50:    73 6b             	r3 = [r7+0x2c] 
  114a52:    43 68             	r3 = [r4+0x20] 
  114a54:    65 63             	r5 = [r6+0xc] 
  114a56:    6b 46             	r3 = b[r6+0x6] (u)
  114a58:    6f 72             	r7 = h[r6+-0x1c] (u)
  114a5a:    54 69             	r4 = [r5+0x24] 
  114a5c:    6d 65             	r5 = h[r6+0xa] (u)
  114a5e:    4f 75             	r7 = h[r4+-0x16] (u)
  114a60:    74 00              <unkown instruction>
  114a62:    78 54             	r0 = b[r7+-0xc] (u)
  114a64:    61 73             	r1 = [r6+-0x34] 
  114a66:    6b 50             	r3 = b[r6+-0x10] (u)
  114a68:    72 69             	r2 = [r7+0x24] 
  114a6a:    6f 72             	r7 = h[r6+-0x1c] (u)
  114a6c:    69 74             	r1 = h[r6+-0x18] (u)
  114a6e:    79 44             	r1 = b[r7+0x4] (u)
  114a70:    69 73             	r1 = h[r6+-0x1a] (u)
  114a72:    69 6e             	r1 = h[r6+0x1c] (u)
  114a74:    68 65             	r0 = h[r6+0xa] (u)
  114a76:    72 69             	r2 = [r7+0x24] 
  114a78:    74 00              <unkown instruction>
  114a7a:    41 53             	if (r1 == 0) goto -0xda <vTickISR+0x1BE : 1149a2 >
  114a7c:    53 45             	if (r3 == 0) goto -0xb6 <vTickISR+0x1E4 : 1149c8 >
  114a7e:    52 54             	if (r2 == 0) goto -0x98 <vTickISR+0x204 : 1149e8 >
  114a80:    3a 20             	r2 ^= 0x1
  114a82:    6d 65             	r5 = h[r6+0xa] (u)
  114a84:    73 73             	r3 = [r7+-0x34] 
  114a86:    61 67             	r1 = [r6+0x1c] 
  114a88:    65 73             	r5 = [r6+-0x34] 
  114a8a:    20 3e             	r0 = [sp+248]
  114a8c:    3d 20             	r5 ^= 0x1
  114a8e:    68 65             	r0 = h[r6+0xa] (u)
  114a90:    61 64             	r1 = [r6+0x10] 
  114a92:    2e 61             	r6 = h[r2+0x2] (u)
  114a94:    72 67             	r2 = [r7+0x1c] 
  114a96:    63 20             	r3 = 0x80
  114a98:    2b 20             	r11 = [sp+128]
  114a9a:    31 20             	r1 |= 0x1
  114a9c:    25 64             	r5 = [r2+0x10] 
  114a9e:    2c 20             	r12 = [sp+128]
  114aa0:    25 64             	r5 = [r2+0x10] 
  114aa2:    0a 00              <unkown instruction>
  114aa4:    76 50             	if (r6 == 0) goto -0x20 <vTickISR+0x2A2 : 114a86 >
  114aa6:    6f 72             	r7 = h[r6+-0x1c] (u)
  114aa8:    74 45             	if (r4 == 0) goto -0x36 <vTickISR+0x290 : 114a74 >
  114aaa:    6e 64             	r6 = h[r6+0x8] (u)
  114aac:    53 63             	r3 = [r5+0xc] 
  114aae:    68 65             	r0 = h[r6+0xa] (u)
  114ab0:    64 75             	r4 = [r6+-0x2c] 
  114ab2:    6c 65             	r4 = h[r6+0xa] (u)
  114ab4:    72 00              <unkown instruction>
  114ab6:    25 73             	r5 = [r2+-0x34] 
  114ab8:    20 25             	r0 = [sp+148]
  114aba:    64 0a             	r4 = [r6++=r12] 
  114abc:    00 76             	r0 = [r0+-0x28] 
  114abe:    50 6f             	r0 = [r5+0x3c] 
  114ac0:    72 74             	r2 = [r7+-0x30] 
  114ac2:    45 78             	r5 = [r4+-0x20] 
  114ac4:    69 74             	r1 = h[r6+-0x18] (u)
  114ac6:    43 72             	r3 = [r4+-0x38] 
  114ac8:    69 74             	r1 = h[r6+-0x18] (u)
  114aca:    69 63             	r1 = h[r6+0x6] (u)
  114acc:    61 6c             	r1 = [r6+0x30] 
  114ace:    00 00             	nop


os_code_end:
  114acf:    00 76             	r0 = [r0+-0x28] 


pmalloc_init:
  114ad0:    76 04             	[--sp] = {rets, r6-r4}			  ## pmalloc.c:73:0
  114ad2:    15 16             	r5 = r1			  ## pmalloc.c:73:0
  114ad4:    06 16             	r6 = r0			  ## pmalloc.c:73:0
  114ad6:    c4 ff 00 1e 03 00 	r4 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:73:0
  114adc:    41 20             	r1 = 0x0			  ## pmalloc.c:75:5
  114ade:    7a 24             	r2 = 0xe4			  ## pmalloc.c:75:5
  114ae0:    40 16             	r0 = r4			  ## pmalloc.c:75:5
  114ae2:    bf ea 3a e4       	call -0x378c <memset : 11135a >			  ## pmalloc.c:75:5
  114ae6:    00 e1 7f 60       	r0 = r6 + 0x7f			  ## pmalloc.c:76:30
  114aea:    71 e1 7f 00       	r1 = r0 & 0xFFFFFF80			  ## pmalloc.c:76:30
  114aee:    42 16             	r2 = r4			  ## pmalloc.c:76:23
  114af0:    d0 ec 23 1d       	[++r2=0xd0] = r1			  ## pmalloc.c:76:23
  114af4:    73 e1 7f 50       	r3 = r5 & 0xFFFFFF80			  ## pmalloc.c:77:34
  114af8:    39 de             	r1 = r3 - r1  #			  ## pmalloc.c:78:40
  114afa:    a3 61             		 [r2+0x4] = r3			  ## pmalloc.c:77:21
  114afc:    a1 62             	[r2+0x8] = r1			  ## pmalloc.c:78:22
  114afe:    91 a7             	r1 = r1 >> 0x7			  ## pmalloc.c:79:48
  114b00:    a9 69             	h[r2+0x12] = r1			  ## pmalloc.c:79:29
  114b02:    80 a7             	r0 = r0 >> 0x7			  ## pmalloc.c:84:70
  114b04:    a8 66             	h[r2+0xc] = r0			  ## pmalloc.c:84:29
  114b06:    d1 a7             	r1 = r5 >> 0x7			  ## pmalloc.c:85:66
  114b08:    80 d7             	r0 = r0.l (u)  #			  ## pmalloc.c:90:18
  114b0a:    a9 67             		 h[r2+0xe] = r1			  ## pmalloc.c:85:27
  114b0c:    04 93             	goto 0x26 <pmalloc_init+0x64 : 114b34 >
  114b0e:    81 a5             	r1 = r0 >> 0x5			  ## pmalloc.c:91:27
  114b10:    12 a2             	r2 = r1 << 0x2			  ## pmalloc.c:91:9
  114b12:    42 18             	r2 += r4			  ## pmalloc.c:91:9
  114b14:    63 e1 1f 00       	r3 = r0 & 0x1F			  ## pmalloc.c:91:42
  114b18:    66 e8 00 23       	[r2+0x0] |= 1 << r3			  ## pmalloc.c:91:39
  114b1c:    82 aa             	r2 = r0 >> 0xa			  ## pmalloc.c:92:9
  114b1e:    22 a2             	r2 = r2 << 0x2			  ## pmalloc.c:92:41
  114b20:    42 18             	r2 += r4			  ## pmalloc.c:92:41
  114b22:    02 e1 c8 20       	r2 = r2 + 0xc8			  ## pmalloc.c:92:9
  114b26:    61 e1 1f 10       	r1 = r1 & 0x1F			  ## pmalloc.c:92:56
  114b2a:    66 e8 00 21       	[r2+0x0] |= 1 << r1			  ## pmalloc.c:92:53
  114b2e:    50 ed 4e 1d       	r1 = h[r4+0xde] (u)			  ## pmalloc.c:92:53
  114b32:    c0 21             	r0 += 0x1			  ## pmalloc.c:90:71
  114b34:    91 17             	r1 = r1.l (u)			  ## pmalloc.c:90:47
  114b36:    81 e9 ea 01       	if (r0 < r1) goto -0x2c <pmalloc_init+0x3E : 114b0e >			  ## pmalloc.c:90:5
  114b3a:    56 04             	{pc, r6-r4} = [sp++]			  ## pmalloc.c:100:1


pmm_get_var:
  114b3c:    c0 ff 00 1e 03 00 	r0 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:103:0
  114b42:    80 00             	rts			  ## pmalloc.c:104:5


pmalloc_get_unused_pages:
  114b44:    c0 ff 00 1e 03 00 	r0 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:136:0
  114b4a:    50 ed 00 1e       	r1 = h[r0+0xe0] (u)			  ## pmalloc.c:137:38
  114b4e:    50 ed 02 0e       	r0 = h[r0+0xe2] (u)			  ## pmalloc.c:137:12
  114b52:    08 1e             	r0 = r0 - r1			  ## pmalloc.c:137:36
  114b54:    80 00             	rts			  ## pmalloc.c:137:5


pmalloc:
  114b56:    78 04             	[--sp] = {rets, r8-r4}			  ## pmalloc.c:180:0
  114b58:    42 20             	r2 = 0x0			  ## pmalloc.c:180:0
  114b5a:    c1 ff ff ff 00 00 	r1 = 0xffff <text_size+0x7FFE : fffe >			  ## pmalloc.c:180:0
  114b60:    c0 ff 00 1e 03 00 	r0 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:180:0
  114b66:    72 f8 43 fc       	if (r2 == -0x2) goto 0x86 <pmalloc+0x9A : 114bf0 >			  ## pmalloc.c:180:0
  114b6a:    03 e1 cc 00       	r3 = r0 + 0xcc			  ## pmalloc.c:152:13
  114b6e:    d8 ec 3a 32       	r3 = [r3+r2<<2]			  ## pmalloc.c:152:13
  114b72:    fa 3f             	r2 += -0x1			  ## pmalloc.c:152:13
  114b74:    73 58             	if (r3 == 0) goto -0x10 <pmalloc+0x10 : 114b66 >			  ## pmalloc.c:152:13
  114b76:    41 20             	r1 = 0x0
  114b78:    4b 3f             	r3 = 0x3f
  114b7a:    74 2c             	r4 = 0xcc
  114b7c:    04 8b             	goto 0x16 <pmalloc+0x3E : 114b94 >
  114b7e:    d8 ec 42 20       	r2 = [r4+r0]			  ## pmalloc.c:165:37
  114b82:    80 e1 00 22       	r2 = clz(r2)			  ## pmalloc.c:143:5
  114b86:    22 17             	r2 = r2.b0 (u)			  ## pmalloc.c:143:5
  114b88:    82 f9 06 40       	if (r2 < 0x20) goto 0xc <pmalloc+0x42 : 114b98 >
  114b8c:    fc 3c             	r4 += -0x4			  ## pmalloc.c:164:5
  114b8e:    fb 20             	r3 += -0x20			  ## pmalloc.c:164:5
  114b90:    01 e1 00 14       	r1 = r1 + 0x400			  ## pmalloc.c:164:5
  114b94:    f3 f8 f3 ff       	if (r3 != -0x1) goto -0x1a <pmalloc+0x28 : 114b7e >
  114b98:    24 a2             	r4 = r2 << 0x2			  ## pmalloc.c:190:9
  114b9a:    35 a2             	r5 = r3 << 0x2			  ## pmalloc.c:190:9
  114b9c:    55 1f             	r5 = r5 - r4			  ## pmalloc.c:190:9
  114b9e:    d8 ec 52 40       	r4 = [r5+r0]			  ## pmalloc.c:190:9
  114ba2:    80 e1 00 44       	r4 = clz(r4)			  ## pmalloc.c:143:5
  114ba6:    d8 ec 52 60       	r6 = [r5+r0]			  ## pmalloc.c:193:34
  114baa:    b8 e1 20 40       	r8 = uextra(r4, p:0x0, l:0x8)			  ## pmalloc.c:190:9
  114bae:    a7 e0 1f 80       	r7 = 0x1F - r8			  ## pmalloc.c:190:9
  114bb2:    14 3f             	r4 = -0x1			  ## pmalloc.c:193:37
  114bb4:    94 e1 41 47       	r4 = r4 ^ (1 << r7)			  ## pmalloc.c:193:37
  114bb8:    94 e1 63 77       	r7 = r6 & ~(1 << r7)			  ## pmalloc.c:193:34
  114bbc:    d8 ec 53 70       	[r5+r0] = r7			  ## pmalloc.c:193:34
  114bc0:    46 fb 0a 00       	if ((r6 & r4) != 0) goto 0x14 <pmalloc+0x82 : 114bd8 >			  ## pmalloc.c:193:34
  114bc4:    b3 1e             	r3 = r3 - r2			  ## pmalloc.c:190:9
  114bc6:    b4 a5             	r4 = r3 >> 0x5			  ## pmalloc.c:195:13
  114bc8:    44 a2             	r4 = r4 << 0x2			  ## pmalloc.c:195:40
  114bca:    04 18             	r4 += r0			  ## pmalloc.c:195:40
  114bcc:    04 e1 c8 40       	r4 = r4 + 0xc8			  ## pmalloc.c:195:13
  114bd0:    63 e1 1f 30       	r3 = r3 & 0x1F			  ## pmalloc.c:195:56
  114bd4:    66 e8 03 43       	[r4+0x0] &= ~(1 << r3)			  ## pmalloc.c:195:52
  114bd8:    50 ed 00 3e       	r3 = h[r0+0xe0] (u)			  ## pmalloc.c:197:31
  114bdc:    c3 21             	r3 += 0x1			  ## pmalloc.c:197:31
  114bde:    50 ed 01 3e       	h[r0+0xe0] = r3			  ## pmalloc.c:197:31
  114be2:    40 e0 ff 07       	r0 = 0x7ff			  ## pmalloc.c:204:9
  114be6:    b4 e0 02 08       	r0 = r0 - r8			  ## pmalloc.c:204:9
  114bea:    22 a5             	r2 = r2 << 0x5			  ## pmalloc.c:204:9
  114bec:    80 1e             	r0 = r0 - r2			  ## pmalloc.c:204:9
  114bee:    09 1e             	r1 = r0 - r1			  ## pmalloc.c:204:9
  114bf0:    90 17             	r0 = r1.l (u)			  ## pmalloc.c:209:1
  114bf2:    58 04             	{pc, r8-r4} = [sp++]			  ## pmalloc.c:209:1


get_physic_address:
  114bf4:    c1 ff 00 1e 03 00 	r1 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:212:0
  114bfa:    50 ed 1c 2d       	r2 = h[r1+0xdc] (u)			  ## pmalloc.c:213:29
  114bfe:    d0 ec 10 1d       	r1 = [r1+0xd0]			  ## pmalloc.c:213:80
  114c02:    80 1e             	r0 = r0 - r2			  ## pmalloc.c:213:27
  114c04:    00 a7             	r0 = r0 << 0x7			  ## pmalloc.c:213:54
  114c06:    10 18             	r0 += r1			  ## pmalloc.c:213:66
  114c08:    80 00             	rts			  ## pmalloc.c:213:5


pfree:
  114c0a:    78 04             	[--sp] = {rets, r8-r4}			  ## pmalloc.c:221:0
  114c0c:    04 16             	r4 = r0			  ## pmalloc.c:221:0
  114c0e:    c7 a5             	r7 = r4 >> 0x5			  ## pmalloc.c:222:5
  114c10:    c5 ff 00 1e 03 00 	r5 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:222:5
  114c16:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## pmalloc.c:222:5
  114c1a:    61 e1 1f 40       	r1 = r4 & 0x1F			  ## pmalloc.c:222:5
  114c1e:    42 21             	r2 = 0x1			  ## pmalloc.c:222:5
  114c20:    c8 e1 20 61       	r6 = r2 << r1			  ## pmalloc.c:222:5
  114c24:    c8 ff e0 1c 03 00 	r8 = 0x31ce0 <mask_log_e : 31ce0 >			  ## pmalloc.c:222:5
  114c2a:    60 fa 08 00       	if ((r0 & r6) == 0) goto 0x10 <pfree+0x34 : 114c3e >			  ## pmalloc.c:222:5
  114c2e:    d0 ec 80 10       	r1 = [r8+0x0]			  ## pmalloc.c:222:5
  114c32:    c0 ff 5a 4f 11 00 	r0 = 0x114f5a <vmem_end+0xA : 114f5a >			  ## pmalloc.c:222:5
  114c38:    c1 00             	call r1			  ## pmalloc.c:222:5
  114c3a:    d8 ec 5a 07       	r0 = [r5+r7<<2]			  ## pmalloc.c:222:5
  114c3e:    60 19             	r0 |= r6			  ## pmalloc.c:223:38
  114c40:    d8 ec 5b 07       	[r5+r7<<2] = r0			  ## pmalloc.c:223:38
  114c44:    c0 a8             	r0 = r4 >> 0x8			  ## pmalloc.c:224:5
  114c46:    60 e1 fc 00       	r0 = r0 & 0xFC			  ## pmalloc.c:224:40
  114c4a:    50 18             	r0 += r5			  ## pmalloc.c:224:40
  114c4c:    00 e1 c8 00       	r0 = r0 + 0xc8			  ## pmalloc.c:224:5
  114c50:    61 e1 1f 70       	r1 = r7 & 0x1F			  ## pmalloc.c:224:55
  114c54:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## pmalloc.c:224:52
  114c58:    50 ed 50 0e       	r0 = h[r5+0xe0] (u)			  ## pmalloc.c:225:5
  114c5c:    80 48             	if (r0 != 0) goto 0x10 <pfree+0x64 : 114c6e >			  ## pmalloc.c:225:5
  114c5e:    d0 ec 80 10       	r1 = [r8+0x0]			  ## pmalloc.c:225:5
  114c62:    c0 ff a7 4f 11 00 	r0 = 0x114fa7 <vmem_end+0x56 : 114fa6 >			  ## pmalloc.c:225:5
  114c68:    c1 00             	call r1			  ## pmalloc.c:225:5
  114c6a:    50 ed 50 0e       	r0 = h[r5+0xe0] (u)			  ## pmalloc.c:225:5
  114c6e:    f8 3f             	r0 += -0x1			  ## pmalloc.c:226:27
  114c70:    50 ed 51 0e       	h[r5+0xe0] = r0			  ## pmalloc.c:226:27
  114c74:    58 04             	{pc, r8-r4} = [sp++]			  ## pmalloc.c:229:1


vmm_init_:
  114c76:    76 04             	[--sp] = {rets, r6-r4}			  ## vmalloc.c:75:0
  114c78:    14 16             	r4 = r1			  ## vmalloc.c:75:0
  114c7a:    05 16             	r5 = r0			  ## vmalloc.c:75:0
  114c7c:    c6 ff 00 03 10 00 	r6 = 0x100300 <RAM_LIMIT_H+0xCE300 : 100300 >			  ## vmalloc.c:75:0
  114c82:    00 ef 01 60       	[r6+0x0] |= 0x1			  ## vmalloc.c:61:5
  114c86:    48 dd             	r0 = r4 + r5  #			  ## vmalloc.c:63:38
  114c88:    e5 61             		 [r6+0x4] = r5			  ## vmalloc.c:62:22
  114c8a:    f8 3f             	r0 += -0x1			  ## vmalloc.c:63:45
  114c8c:    e0 62             	[r6+0x8] = r0			  ## vmalloc.c:63:22
  114c8e:    00 ef 10 60       	[r6+0x0] |= 0x10			  ## vmalloc.c:65:5
  114c92:    41 20             	r1 = 0x0			  ## vmalloc.c:66:5
  114c94:    50 16             	r0 = r5			  ## vmalloc.c:66:5
  114c96:    42 16             	r2 = r4			  ## vmalloc.c:66:5
  114c98:    bf ea 5f e3       	call -0x3942 <memset : 11135a >			  ## vmalloc.c:66:5
  114c9c:    c0 ef 10 60       	[r6+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:67:5
  114ca0:    20 00             	csync			  ## vmalloc.c:67:5
  114ca2:    c0 ff e4 1e 03 00 	r0 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:88:21
  114ca8:    85 60             	[r0+0x0] = r5			  ## vmalloc.c:80:24
  114caa:    41 ea 00 09       	[r0+0x4] = 0x200000			  ## vmalloc.c:85:21
  114cae:    c1 a1             	r1 = r4 >> 0x1			  ## vmalloc.c:82:28
  114cb0:    12 a7             	r2 = r1 << 0x7			  ## vmalloc.c:83:32
  114cb2:    e2 f0 00 29       	r2 = r2 + 0x200000  #			  ## vmalloc.c:87:35
  114cb6:    82 63             		 [r0+0xc] = r2			  ## vmalloc.c:86:21
  114cb8:    82 62             	[r0+0x8] = r2			  ## vmalloc.c:87:21
  114cba:    89 69             	h[r0+0x12] = r1			  ## vmalloc.c:88:21
  114cbc:    56 04             	{pc, r6-r4} = [sp++]			  ## vmalloc.c:94:1


vmm_get_var:
  114cbe:    c0 ff e4 1e 03 00 	r0 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:97:0
  114cc4:    80 00             	rts			  ## vmalloc.c:98:5


vmalloc_:
  114cc6:    7f 04             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:123:0
  114cc8:    e2 9f             	sp += -0x4			  ## vmalloc.c:123:0
  114cca:    02 e1 7f 10       	r2 = r1 + 0x7f			  ## vmalloc.c:124:22
  114cce:    c0 e1 27 d8       	r13 = r2 >> 0x7			  ## vmalloc.c:124:22
  114cd2:    ce ff e0 1c 03 00 	r14 = 0x31ce0 <mask_log_e : 31ce0 >
  114cd8:    0d f8 11 00       	if (r13 == 0x0) goto 0x22 <vmalloc_+0x38 : 114cfe >
  114cdc:    c6 ff 00 1e 03 00 	r6 = 0x31e00 <physics_mem : 31e00 >
  114ce2:    50 ed 60 2e       	r2 = h[r6+0xe0] (u)			  ## pmalloc.c:137:38
  114ce6:    50 ed 62 1e       	r1 = h[r6+0xe2] (u)			  ## pmalloc.c:137:12
  114cea:    91 1e             	r1 = r1 - r2			  ## pmalloc.c:137:36
  114cec:    0d e9 0f 10       	if (r1 >= r13) goto 0x1e <vmalloc_+0x48 : 114d0e >			  ## pmalloc.c:137:36
  114cf0:    d0 ec e0 10       	r1 = [r14+0x0]			  ## vmalloc.c:135:9
  114cf4:    c0 ff e3 4f 11 00 	r0 = 0x114fe3 <vmem_end+0x92 : 114fe2 >			  ## vmalloc.c:135:9
  114cfa:    c1 00             	call r1			  ## vmalloc.c:135:9
  114cfc:    04 86             	goto 0xc <vmalloc_+0x44 : 114d0a >			  ## vmalloc.c:135:9
  114cfe:    d0 ec e0 20       	r2 = [r14+0x0]			  ## vmalloc.c:131:9
  114d02:    c0 ff cb 4f 11 00 	r0 = 0x114fcb <vmem_end+0x7A : 114fca >			  ## vmalloc.c:131:9
  114d08:    c2 00             	call r2			  ## vmalloc.c:131:9
  114d0a:    10 3f             	r0 = -0x1
  114d0c:    44 93             	goto 0x126 <vmalloc_+0x16E : 114e34 >
  114d0e:    c4 ff e4 1e 03 00 	r4 = 0x31ee4 <v_mems : 31ee4 >
  114d14:    c1 d4             	r9 = 0  #
  114d16:    41 61             		 r1 = [r4+0x4] 			  ## vmalloc.c:125:41
  114d18:    08 de             	r0 = r0 - r1  #			  ## vmalloc.c:125:32
  114d1a:    80 20             		 [sp] = r0
  114d1c:    c0 e1 07 a8       	r10 = r0 >> 0x7			  ## vmalloc.c:125:48
  114d20:    cb ff 00 03 10 00 	r11 = 0x100300 <RAM_LIMIT_H+0xCE300 : 100300 >
  114d26:    45 e0 ff 1f       	r5 = 0x1fff
  114d2a:    44 81             	goto 0x102 <vmalloc_+0x168 : 114e2e >
  114d2c:    c0 f1 a1 f0       	r15 = r10 << 0x1  #			  ## vmalloc.c:140:9
  114d30:    40 60             		 r0 = [r4+0x0] 			  ## vmalloc.c:140:9
  114d32:    b4 e0 00 2f       	r2 = r0 + r15			  ## vmalloc.c:140:9
  114d36:    28 41             	r0 = b[r2+0x1] (u)			  ## vmalloc.c:140:9
  114d38:    30 ea 20 c0       	if ((r0 & 0x20) != 0) {			  ## vmalloc.c:140:9
  114d3c:    d0 ec e0 30       		r3 = [r14+0x0]			  ## vmalloc.c:140:9
  114d40:    c0 ff 0a 50 11 00 		r0 = 0x11500a <vmem_end+0xBA : 11500a >			  ## vmalloc.c:140:9
  114d46:    a1 16             		r1 = r10			  ## vmalloc.c:140:9
  114d48:    c3 00             		call r3
                               	}			  ## vmalloc.c:140:9
  114d4a:    00 ef 10 b0       	[r11+0x0] |= 0x10			  ## vmalloc.c:141:9
  114d4e:    40 20             	r0 = 0x0
  114d50:    70 f8 4c fc       	if (r0 == -0x2) goto 0x98 <vmalloc_+0x126 : 114dec >
  114d54:    01 e1 cc 60       	r1 = r6 + 0xcc			  ## pmalloc.c:152:13
  114d58:    d8 ec 1a 10       	r1 = [r1+r0<<2]			  ## pmalloc.c:152:13
  114d5c:    f8 3f             	r0 += -0x1			  ## pmalloc.c:152:13
  114d5e:    71 58             	if (r1 == 0) goto -0x10 <vmalloc_+0x8A : 114d50 >			  ## pmalloc.c:152:13
  114d60:    4a 3f             	r2 = 0x3f
  114d62:    40 20             	r0 = 0x0
  114d64:    73 2c             	r3 = 0xcc
  114d66:    04 84             	goto 0x8 <vmalloc_+0xAA : 114d70 >
  114d68:    fb 3c             	r3 += -0x4			  ## pmalloc.c:164:5
  114d6a:    00 e1 00 04       	r0 = r0 + 0x400			  ## pmalloc.c:164:5
  114d6e:    fa 20             	r2 += -0x20			  ## pmalloc.c:164:5
  114d70:    72 f8 07 fe       	if (r2 == -0x1) goto 0xe <vmalloc_+0xBC : 114d82 >
  114d74:    d8 ec 32 16       	r1 = [r3+r6]			  ## pmalloc.c:165:37
  114d78:    80 e1 00 11       	r1 = clz(r1)			  ## pmalloc.c:143:5
  114d7c:    11 17             	r1 = r1.b0 (u)			  ## pmalloc.c:143:5
  114d7e:    01 f9 f3 41       	if (r1 >= 0x20) goto -0x1a <vmalloc_+0xA2 : 114d68 >
  114d82:    13 a2             	r3 = r1 << 0x2			  ## pmalloc.c:190:9
  114d84:    c0 e1 22 80       	r8 = r2 << 0x2			  ## pmalloc.c:190:9
  114d88:    b4 e0 82 73       	r7 = r8 - r3			  ## pmalloc.c:190:9
  114d8c:    d8 ec 72 36       	r3 = [r7+r6]			  ## pmalloc.c:190:9
  114d90:    80 e1 00 33       	r3 = clz(r3)			  ## pmalloc.c:143:5
  114d94:    d8 ec 72 46       	r4 = [r7+r6]			  ## pmalloc.c:193:34
  114d98:    b8 e1 20 30       	r8 = uextra(r3, p:0x0, l:0x8)			  ## pmalloc.c:190:9
  114d9c:    a5 e0 1f 80       	r5 = 0x1F - r8			  ## pmalloc.c:190:9
  114da0:    94 e1 43 35       	r3 = r4 & ~(1 << r5)			  ## pmalloc.c:193:34
  114da4:    4c e0 ff ff       	r12 = -0x1			  ## pmalloc.c:193:37
  114da8:    94 e1 c1 55       	r5 = r12 ^ (1 << r5)			  ## pmalloc.c:193:37
  114dac:    d8 ec 73 36       	[r7+r6] = r3			  ## pmalloc.c:193:34
  114db0:    54 fb 0a 00       	if ((r4 & r5) != 0) goto 0x14 <vmalloc_+0x102 : 114dc8 >			  ## pmalloc.c:193:34
  114db4:    2a 1e             	r2 = r2 - r1			  ## pmalloc.c:190:9
  114db6:    a3 a5             	r3 = r2 >> 0x5			  ## pmalloc.c:195:13
  114db8:    33 a2             	r3 = r3 << 0x2			  ## pmalloc.c:195:40
  114dba:    63 18             	r3 += r6			  ## pmalloc.c:195:40
  114dbc:    03 e1 c8 30       	r3 = r3 + 0xc8			  ## pmalloc.c:195:13
  114dc0:    62 e1 1f 20       	r2 = r2 & 0x1F			  ## pmalloc.c:195:56
  114dc4:    66 e8 03 32       	[r3+0x0] &= ~(1 << r2)			  ## pmalloc.c:195:52
  114dc8:    50 ed 60 2e       	r2 = h[r6+0xe0] (u)			  ## pmalloc.c:197:31
  114dcc:    c2 21             	r2 += 0x1			  ## pmalloc.c:197:31
  114dce:    50 ed 61 2e       	h[r6+0xe0] = r2			  ## pmalloc.c:197:31
  114dd2:    42 e0 ff 07       	r2 = 0x7ff			  ## pmalloc.c:204:9
  114dd6:    b4 e0 22 28       	r2 = r2 - r8			  ## pmalloc.c:204:9
  114dda:    11 a5             	r1 = r1 << 0x5			  ## pmalloc.c:204:9
  114ddc:    29 1e             	r1 = r2 - r1			  ## pmalloc.c:204:9
  114dde:    10 1e             	r0 = r1 - r0			  ## pmalloc.c:204:9
  114de0:    45 e0 ff 1f       	r5 = 0x1fff			  ## pmalloc.c:204:9
  114de4:    c4 ff e4 1e 03 00 	r4 = 0x31ee4 <v_mems : 31ee4 >			  ## pmalloc.c:204:9
  114dea:    04 82             	goto 0x4 <vmalloc_+0x12A : 114df0 >			  ## pmalloc.c:204:9
  114dec:    e0 e0 60 5c       	r0 = r5 + 0xE000
  114df0:    41 60             	r1 = [r4+0x0] 			  ## vmalloc.c:142:16
  114df2:    f1 18             	r1 += r15			  ## vmalloc.c:142:39
  114df4:    d0 d9             	r0 &= r5  #			  ## vmalloc.c:142:47
  114df6:    1a 41             		 r2 = b[r1+0x1] (u)			  ## vmalloc.c:142:47
  114df8:    1b 40             	r3 = b[r1+0x0] (u)			  ## vmalloc.c:142:47
  114dfa:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## vmalloc.c:142:47
  114dfe:    98 40             		 b[r1+0x0] = r0			  ## vmalloc.c:142:47
  114e00:    62 e1 60 3c       	r2 = r3 & 0xE000			  ## vmalloc.c:142:47
  114e04:    20 19             	r0 |= r2			  ## vmalloc.c:142:47
  114e06:    80 a8             	r0 = r0 >> 0x8			  ## vmalloc.c:142:47
  114e08:    98 41             	b[r1+0x1] = r0			  ## vmalloc.c:142:47
  114e0a:    40 60             	r0 = [r4+0x0] 			  ## vmalloc.c:143:16
  114e0c:    f0 18             	r0 += r15			  ## vmalloc.c:143:39
  114e0e:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:143:47
  114e10:    0a 40             	r2 = b[r0+0x0] (u)			  ## vmalloc.c:143:47
  114e12:    a2 e1 60 14       	r2 <= insert(r1, p:0x8, l:0x18)			  ## vmalloc.c:143:47
  114e16:    41 f1 00 2d       	r1 = r2 | 0x2000  #			  ## vmalloc.c:143:47
  114e1a:    8a 40             		 b[r0+0x0] = r2			  ## vmalloc.c:143:47
  114e1c:    91 a8             	r1 = r1 >> 0x8			  ## vmalloc.c:143:47
  114e1e:    89 41             	b[r0+0x1] = r1			  ## vmalloc.c:143:47
  114e20:    c0 ef 10 b0       	[r11+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:145:9
  114e24:    20 00             	csync			  ## vmalloc.c:145:9
  114e26:    09 e1 01 90       	r9 = r9 + 0x1			  ## vmalloc.c:138:56
  114e2a:    0a e1 01 a0       	r10 = r10 + 0x1			  ## vmalloc.c:144:18
  114e2e:    8d e8 7d 91       	if (r9 != r13) goto -0x106 <vmalloc_+0x66 : 114d2c >
  114e32:    00 20             	r0 = [sp]
  114e34:    02 81             	sp += 0x4
  114e36:    5f 04             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:149:1


vfree_:
  114e38:    7f 04             	[--sp] = {rets, r15-r4}			  ## vmalloc.c:152:0
  114e3a:    ce ff e4 1e 03 00 	r14 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:152:0
  114e40:    d0 ec e4 20       	r2 = [r14+0x4]			  ## vmalloc.c:154:41
  114e44:    80 1e             	r0 = r0 - r2			  ## vmalloc.c:154:32
  114e46:    80 a7             	r0 = r0 >> 0x7			  ## vmalloc.c:156:10
  114e48:    07 a1             	r7 = r0 << 0x1			  ## vmalloc.c:154:48
  114e4a:    00 e1 7f 10       	r0 = r1 + 0x7f			  ## vmalloc.c:153:22
  114e4e:    84 a7             	r4 = r0 >> 0x7			  ## vmalloc.c:153:22
  114e50:    4a e0 01 00       	r10 = 0x1
  114e54:    cf ff 00 1e 03 00 	r15 = 0x31e00 <physics_mem : 31e00 >
  114e5a:    cb ff e0 1c 03 00 	r11 = 0x31ce0 <mask_log_e : 31ce0 >
  114e60:    cc ff 00 03 10 00 	r12 = 0x100300 <RAM_LIMIT_H+0xCE300 : 100300 >
  114e66:    cd ff ff df 00 00 	r13 = 0xdfff <text_size+0x5FFE : dffe >
  114e6c:    c9 ff 5a 4f 11 00 	r9 = 0x114f5a <vmem_end+0xA : 114f5a >
  114e72:    24 8a             	goto 0x94 <vfree_+0xD0 : 114f08 >
  114e74:    d0 ec e0 00       	r0 = [r14+0x0]			  ## vmalloc.c:158:20
  114e78:    70 18             	r0 += r7			  ## vmalloc.c:158:43
  114e7a:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:158:43
  114e7c:    08 40             	r0 = b[r0+0x0] (u)			  ## vmalloc.c:158:43
  114e7e:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:158:43
  114e82:    50 e8 3f 68       	if ((r0 & 0x2000) == 0) goto 0x7e <vfree_+0xCC : 114f04 >			  ## vmalloc.c:158:43
  114e86:    b6 e1 a0 02       	r6 = uextra(r0, p:0x5, l:0x8)			  ## pmalloc.c:222:5
  114e8a:    d8 ec fa 16       	r1 = [r15+r6<<2]			  ## pmalloc.c:222:5
  114e8e:    62 e1 1f 00       	r2 = r0 & 0x1F			  ## pmalloc.c:222:5
  114e92:    c8 e1 a0 82       	r8 = r10 << r2			  ## pmalloc.c:222:5
  114e96:    75 e1 60 0c       	r5 = r0 & 0xFFFF1FFF			  ## vmalloc.c:160:49
  114e9a:    81 fa 06 00       	if ((r1 & r8) == 0) goto 0xc <vfree_+0x72 : 114eaa >			  ## vmalloc.c:160:49
  114e9e:    d0 ec b0 10       	r1 = [r11+0x0]			  ## pmalloc.c:222:5
  114ea2:    90 16             	r0 = r9			  ## pmalloc.c:222:5
  114ea4:    c1 00             	call r1			  ## pmalloc.c:222:5
  114ea6:    d8 ec fa 16       	r1 = [r15+r6<<2]			  ## pmalloc.c:222:5
  114eaa:    90 e1 10 08       	r0 = r1 | r8			  ## pmalloc.c:223:38
  114eae:    d8 ec fb 06       	[r15+r6<<2] = r0			  ## pmalloc.c:223:38
  114eb2:    60 e1 7c 5c       	r0 = r5 & 0xFC00			  ## pmalloc.c:224:40
  114eb6:    80 a8             	r0 = r0 >> 0x8			  ## pmalloc.c:224:5
  114eb8:    f0 18             	r0 += r15			  ## pmalloc.c:224:5
  114eba:    00 e1 c8 00       	r0 = r0 + 0xc8			  ## pmalloc.c:224:5
  114ebe:    71 e1 e0 60       	r1 = r6 & 0xFFFFFF1F			  ## pmalloc.c:224:55
  114ec2:    66 e8 00 01       	[r0+0x0] |= 1 << r1			  ## pmalloc.c:224:52
  114ec6:    50 ed f0 0e       	r0 = h[r15+0xe0] (u)			  ## pmalloc.c:225:5
  114eca:    80 48             	if (r0 != 0) goto 0x10 <vfree_+0xA4 : 114edc >			  ## pmalloc.c:225:5
  114ecc:    d0 ec b0 10       	r1 = [r11+0x0]			  ## pmalloc.c:225:5
  114ed0:    c0 ff a7 4f 11 00 	r0 = 0x114fa7 <vmem_end+0x56 : 114fa6 >			  ## pmalloc.c:225:5
  114ed6:    c1 00             	call r1			  ## pmalloc.c:225:5
  114ed8:    50 ed f0 0e       	r0 = h[r15+0xe0] (u)			  ## pmalloc.c:225:5
  114edc:    f8 3f             	r0 += -0x1			  ## pmalloc.c:226:27
  114ede:    50 ed f1 0e       	h[r15+0xe0] = r0			  ## pmalloc.c:226:27
  114ee2:    00 ef 10 c0       	[r12+0x0] |= 0x10			  ## vmalloc.c:161:13
  114ee6:    d0 ec e0 00       	r0 = [r14+0x0]			  ## vmalloc.c:162:20
  114eea:    70 18             	r0 += r7			  ## vmalloc.c:162:51
  114eec:    09 41             	r1 = b[r0+0x1] (u)			  ## vmalloc.c:162:51
  114eee:    0a 40             	r2 = b[r0+0x0] (u)			  ## vmalloc.c:162:51
  114ef0:    a2 e1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:162:51
  114ef4:    90 e1 22 1d       	r1 = r2 & r13			  ## vmalloc.c:162:51
  114ef8:    89 40             	b[r0+0x0] = r1			  ## vmalloc.c:162:51
  114efa:    91 a8             	r1 = r1 >> 0x8			  ## vmalloc.c:162:51
  114efc:    89 41             	b[r0+0x1] = r1			  ## vmalloc.c:162:51
  114efe:    c0 ef 10 c0       	[r12+0x0] &= 0xFFFFFFEF			  ## vmalloc.c:163:13
  114f02:    20 00             	csync			  ## vmalloc.c:163:13
  114f04:    fc 3f             	r4 += -0x1			  ## vmalloc.c:156:5
  114f06:    c7 22             	r7 += 0x2			  ## vmalloc.c:156:5
  114f08:    d4 55             	if (r4 != 0) goto -0x96 <vfree_+0x3C : 114e74 >
  114f0a:    5f 04             	{pc, r15-r4} = [sp++]			  ## vmalloc.c:166:1


vmem_get_phy_adr:
  114f0c:    c1 ff e4 1e 03 00 	r1 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:169:0
  114f12:    01 eb 06 00       	{r2, r1} = [r1+]			  ## vmalloc.c:170:71
  114f16:    80 1e             	r0 = r0 - r2			  ## vmalloc.c:170:62
  114f18:    80 a7             	r0 = r0 >> 0x7			  ## vmalloc.c:170:91
  114f1a:    00 a1             	r0 = r0 << 0x1			  ## vmalloc.c:170:78
  114f1c:    10 18             	r0 += r1			  ## vmalloc.c:170:91
  114f1e:    43 f0 ff 1f       	r3 = 0x1fff  #			  ## vmalloc.c:170:31
  114f22:    09 41             		 r1 = b[r0+0x1] (u)			  ## vmalloc.c:170:91
  114f24:    08 40             	r0 = b[r0+0x0] (u)			  ## vmalloc.c:170:91
  114f26:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## vmalloc.c:170:91
  114f2a:    c1 ff 00 1e 03 00 	r1 = 0x31e00 <physics_mem : 31e00 >			  ## pmalloc.c:213:80
  114f30:    50 ed 1c 2d       	r2 = h[r1+0xdc] (u)			  ## pmalloc.c:213:29
  114f34:    d0 ec 10 1d       	r1 = [r1+0xd0]			  ## pmalloc.c:213:80
  114f38:    b0 19             	r0 &= r3			  ## vmalloc.c:170:31
  114f3a:    80 1e             	r0 = r0 - r2			  ## pmalloc.c:213:27
  114f3c:    00 a7             	r0 = r0 << 0x7			  ## pmalloc.c:213:54
  114f3e:    10 18             	r0 += r1			  ## pmalloc.c:213:66
  114f40:    80 00             	rts			  ## vmalloc.c:170:5


vmem_start:
  114f42:    c0 ff e4 1e 03 00 	r0 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:174:0
  114f48:    00 61             	r0 = [r0+0x4] 			  ## vmalloc.c:175:28
  114f4a:    e0 e0 70 0c       	r0 = r0 + 0xF000			  ## vmalloc.c:175:34
  114f4e:    80 00             	rts			  ## vmalloc.c:175:5


vmem_end:
  114f50:    c0 ff e4 1e 03 00 	r0 = 0x31ee4 <v_mems : 31ee4 >			  ## vmalloc.c:179:0
  114f56:    00 62             	r0 = [r0+0x8] 			  ## vmalloc.c:180:27
  114f58:    80 00             	rts			  ## vmalloc.c:180:5
  114f5a:    41 53             	if (r1 == 0) goto -0xda <vfree_+0x4A : 114e82 >
  114f5c:    53 45             	if (r3 == 0) goto -0xb6 <vfree_+0x70 : 114ea8 >
  114f5e:    52 54             	if (r2 == 0) goto -0x98 <vfree_+0x90 : 114ec8 >
  114f60:    3a 20             	r2 ^= 0x1
  114f62:    28 70             	r0 = h[r2+-0x20] (u)
  114f64:    68 79             	r0 = h[r6+-0xe] (u)
  114f66:    73 69             	r3 = [r7+0x24] 
  114f68:    63 73             	r3 = [r6+-0x34] 
  114f6a:    5f 6d             	r7 = h[r5+0x1a] (u)
  114f6c:    65 6d             	r5 = [r6+0x34] 
  114f6e:    2e 6d             	r6 = h[r2+0x1a] (u)
  114f70:    61 70             	r1 = [r6+-0x40] 
  114f72:    5b 70             	r3 = h[r5+-0x20] (u)
  114f74:    61 67             	r1 = [r6+0x1c] 
  114f76:    65 20             	r5 = 0x80
  114f78:    2f 20             	r15 = [sp+128]
  114f7a:    42 49             	if (r2 == 0) goto -0xee <vfree_+0x56 : 114e8e >
  114f7c:    54 5f             	if (r4 == 0) goto -0x82 <vfree_+0xC4 : 114efc >
  114f7e:    53 49             	if (r3 == 0) goto -0xae <vfree_+0x9A : 114ed2 >
  114f80:    5a 45             	r2 = b[r5+0x5] (u)
  114f82:    5d 20             	r5 = 0x60
  114f84:    26 20             	r6 = [sp+128]
  114f86:    42 49             	if (r2 == 0) goto -0xee <vfree_+0x62 : 114e9a >
  114f88:    54 28             	r4 = 0x48
  114f8a:    70 61             	r0 = [r7+0x4] 
  114f8c:    67 65             	r7 = [r6+0x14] 
  114f8e:    20 26             	r0 = [sp+152]
  114f90:    20 42             	if (r0 == 0) goto 0x84 <vmem_end+0xC6 : 115016 >
  114f92:    49 54             	r1 = b[r4+-0xc] (u)
  114f94:    5f 53             	r7 = b[r5+-0xd] (u)
  114f96:    49 5a             	r1 = b[r4+-0x6] (u)
  114f98:    45 5f             	if (r5 == 0) goto -0xc2 <vfree_+0xA0 : 114ed8 >
  114f9a:    4d 41             	r5 = b[r4+0x1] (u)
  114f9c:    53 4b             	if (r3 == 0) goto -0xaa <vfree_+0xBC : 114ef4 >
  114f9e:    29 29             	r9 = [sp+164]
  114fa0:    20 3d             	r0 = [sp+244]
  114fa2:    3d 20             	r5 ^= 0x1
  114fa4:    30 20             	r0 |= 0x1
  114fa6:    00 41             	if (r0 == 0) goto 0x2 <vmem_end+0x5A : 114faa >
  114fa8:    53 53             	if (r3 == 0) goto -0x9a <vmem_get_phy_adr+0x4 : 114f10 >
  114faa:    45 52             	if (r5 == 0) goto -0xdc <vfree_+0x98 : 114ed0 >
  114fac:    54 3a             	r4 = 0x5a
  114fae:    20 70             	r0 = [r2+-0x40] 
  114fb0:    68 79             	r0 = h[r6+-0xe] (u)
  114fb2:    73 69             	r3 = [r7+0x24] 
  114fb4:    63 73             	r3 = [r6+-0x34] 
  114fb6:    5f 6d             	r7 = h[r5+0x1a] (u)
  114fb8:    65 6d             	r5 = [r6+0x34] 
  114fba:    2e 75             	r6 = h[r2+-0x16] (u)
  114fbc:    73 65             	r3 = [r7+0x14] 
  114fbe:    64 5f             	if (r4 == 0) goto -0x42 <vmem_end+0x2E : 114f7e >
  114fc0:    70 61             	r0 = [r7+0x4] 
  114fc2:    67 65             	r7 = [r6+0x14] 
  114fc4:    73 20             	r3 = 0xc0
  114fc6:    3e 20             	r6 ^= 0x1
  114fc8:    30 20             	r0 |= 0x1
  114fca:    00 76             	r0 = [r0+-0x28] 
  114fcc:    6d 61             	r5 = h[r6+0x2] (u)
  114fce:    6c 6c             	r4 = h[r6+0x18] (u)
  114fd0:    6f 63             	r7 = h[r6+0x6] (u)
  114fd2:    20 6e             	r0 = [r2+0x38] 
  114fd4:    6f 74             	r7 = h[r6+-0x18] (u)
  114fd6:    20 70             	r0 = [r2+-0x40] 
  114fd8:    61 67             	r1 = [r6+0x1c] 
  114fda:    65 20             	r5 = 0x80
  114fdc:    3a 20             	r2 ^= 0x1
  114fde:    30 78             	r0 = [r3+-0x20] 
  114fe0:    25 78             	r5 = [r2+-0x20] 
  114fe2:    00 41             	if (r0 == 0) goto 0x2 <vmem_end+0x96 : 114fe6 >
  114fe4:    53 53             	if (r3 == 0) goto -0x9a <vmem_start+0xA : 114f4c >
  114fe6:    45 52             	if (r5 == 0) goto -0xdc <vmem_get_phy_adr : 114f0c >
  114fe8:    54 3a             	r4 = 0x5a
  114fea:    20 30             	r0 = [sp+192]
  114fec:    20 52             	if (r0 == 0) goto 0xa4 <usb_clr_intr_rxe+0xC : 115092 >
  114fee:    6f 6d             	r7 = h[r6+0x1a] (u)
  114ff0:    20 4e             	if (r0 == 0) goto 0x9c <usb_clr_intr_rxe+0x8 : 11508e >
  114ff2:    6f 20             	r7 = 0xa0
  114ff4:    65 6e             	r5 = [r6+0x38] 
  114ff6:    6f 75             	r7 = h[r6+-0x16] (u)
  114ff8:    67 68             	r7 = [r6+0x20] 
  114ffa:    20 70             	r0 = [r2+-0x40] 
  114ffc:    68 79             	r0 = h[r6+-0xe] (u)
  114ffe:    73 69             	r3 = [r7+0x24] 
  115000:    63 73             	r3 = [r6+-0x34] 
  115002:    20 6d             	r0 = [r2+0x34] 
  115004:    65 6d             	r5 = [r6+0x34] 
  115006:    6f 72             	r7 = h[r6+-0x1c] (u)
  115008:    79 00              <unkown instruction>
  11500a:    41 53             	if (r1 == 0) goto -0xda <vmem_get_phy_adr+0x26 : 114f32 >
  11500c:    53 45             	if (r3 == 0) goto -0xb6 <vmem_end+0x8 : 114f58 >
  11500e:    52 54             	if (r2 == 0) goto -0x98 <vmem_end+0x28 : 114f78 >
  115010:    3a 20             	r2 ^= 0x1
  115012:    76 5f             	if (r6 == 0) goto -0x2 <vmem_end+0xC2 : 115012 >
  115014:    6d 65             	r5 = h[r6+0xa] (u)
  115016:    6d 73             	r5 = h[r6+-0x1a] (u)
  115018:    2e 6d             	r6 = h[r2+0x1a] (u)
  11501a:    6d 75             	r5 = h[r6+-0x16] (u)
  11501c:    5f 74             	r7 = h[r5+-0x18] (u)
  11501e:    6c 62             	r4 = h[r6+0x4] (u)
  115020:    5f 74             	r7 = h[r5+-0x18] (u)
  115022:    61 67             	r1 = [r6+0x1c] 
  115024:    5b 70             	r3 = h[r5+-0x20] (u)
  115026:    61 67             	r1 = [r6+0x1c] 
  115028:    65 5f             	if (r5 == 0) goto -0x42 <vmem_end+0x98 : 114fe8 >
  11502a:    61 64             	r1 = [r6+0x10] 
  11502c:    64 72             	r4 = [r6+-0x38] 
  11502e:    5d 2e             	r5 = 0x6e
  115030:    70 61             	r0 = [r7+0x4] 
  115032:    67 65             	r7 = [r6+0x14] 
  115034:    5f 65             	r7 = h[r5+0xa] (u)
  115036:    6e 20             	r6 = 0xa0
  115038:    3d 3d             	r5 ^= 0x20000000
  11503a:    20 30             	r0 = [sp+192]
  11503c:    20 25             	r0 = [sp+148]
  11503e:    64 20             	r4 = 0x80
  115040:    2f 20             	r15 = [sp+128]
  115042:    30 78             	r0 = [r3+-0x20] 
  115044:    25 78             	r5 = [r2+-0x20] 
  115046:    20 00             	csync


usb_code_begin:
  115048:    c2 ff 00 18 1e 00 	r2 = 0x1e1800 <__stub_LZ4_decompress_safe_continue+0xC9804 : 1e1800 >			  ## usb_phy.c:52:0
  11504e:    23 60             	r3 = [r2+0x0] 			  ## usb_phy.c:54:19
  115050:    53 e8 07 10       	if ((r3 & 0x4) == 0) goto 0xe <usb_code_begin+0x1A : 115062 >
  115054:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:57:32
  115058:    a1 61             	[r2+0x4] = r1			  ## usb_phy.c:57:18
  11505a:    20 00             	csync			  ## usb_phy.c:58:5
  11505c:    20 61             	r0 = [r2+0x4] 			  ## usb_phy.c:59:21
  11505e:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <usb_code_begin+0x14 : 11505c >			  ## usb_phy.c:59:21
  115062:    80 00             	rts			  ## usb_phy.c:66:1


musb_read_usb:
  115064:    c1 ff 00 18 1e 00 	r1 = 0x1e1800 <__stub_LZ4_decompress_safe_continue+0xC9804 : 1e1800 >			  ## usb_phy.c:31:0
  11506a:    13 60             	r3 = [r1+0x0] 			  ## usb_phy.c:35:19
  11506c:    42 20             	r2 = 0x0
  11506e:    53 e8 08 10       	if ((r3 & 0x4) == 0) goto 0x10 <musb_read_usb+0x1E : 115082 >
  115072:    30 26             	r0 |= 0x40			  ## usb_phy.c:38:26
  115074:    00 a8             	r0 = r0 << 0x8			  ## usb_phy.c:38:36
  115076:    90 61             	[r1+0x4] = r0			  ## usb_phy.c:38:18
  115078:    20 00             	csync			  ## usb_phy.c:39:5
  11507a:    10 61             	r0 = [r1+0x4] 			  ## usb_phy.c:40:21
  11507c:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <musb_read_usb+0x16 : 11507a >			  ## usb_phy.c:40:5
  115080:    12 61             	r2 = [r1+0x4] 			  ## usb_phy.c:47:20
  115082:    20 17             	r0 = r2.b0 (u)			  ## usb_phy.c:49:1
  115084:    80 00             	rts			  ## usb_phy.c:49:1


usb_clr_intr_rxe:
  115086:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:210:0
  115088:    04 16             	r4 = r0			  ## usb_phy.c:210:0
  11508a:    bf ea c9 ec       	call -0x266e <os_code_begin : 112a20 >			  ## usb_phy.c:211:5
  11508e:    40 29             	r0 = 0x9			  ## usb_phy.c:212:20
  115090:    71 89             	call -0x2e <musb_read_usb : 115064 >			  ## usb_phy.c:212:20
  115092:    05 16             	r5 = r0			  ## usb_phy.c:212:20
  115094:    40 2a             	r0 = 0xa			  ## usb_phy.c:212:51
  115096:    71 86             	call -0x34 <musb_read_usb : 115064 >			  ## usb_phy.c:212:51
  115098:    b4 e8 ff df       	if (r4 != -0x1) {			  ## usb_phy.c:212:51
  11509c:    c1 ff ff ff 00 00 		r1 = 0xffff <text_size+0x7FFE : fffe >			  ## usb_phy.c:216:21
  1150a2:    94 e1 11 14       		r1 = r1 ^ (1 << r4)			  ## usb_phy.c:216:21
  1150a6:    a5 e1 20 04       		r5 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:212:49
  1150aa:    90 e1 52 41       		r4 = r5 & r1
                               	} else {			  ## usb_phy.c:216:18
  1150ae:    44 20             		r4 = 0x0
                               	}
  1150b0:    71 e1 7f 4c       	r1 = r4 & 0xFFFF00FF			  ## usb_phy.c:218:5
  1150b4:    40 29             	r0 = 0x9			  ## usb_phy.c:218:5
  1150b6:    61 88             	call -0x70 <usb_code_begin : 115048 >			  ## usb_phy.c:218:5
  1150b8:    c1 a8             	r1 = r4 >> 0x8			  ## usb_phy.c:219:44
  1150ba:    40 2a             	r0 = 0xa			  ## usb_phy.c:219:5
  1150bc:    61 85             	call -0x76 <usb_code_begin : 115048 >			  ## usb_phy.c:219:5
  1150be:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:220:5
  1150c0:    ff ea b5 ec       	goto -0x2696 <local_irq_enable : 112a2e >			  ## usb_phy.c:220:5


usb_clr_intr_txe:
  1150c4:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:188:0
  1150c6:    04 16             	r4 = r0			  ## usb_phy.c:188:0
  1150c8:    bf ea aa ec       	call -0x26ac <os_code_begin : 112a20 >			  ## usb_phy.c:189:5
  1150cc:    40 27             	r0 = 0x7			  ## usb_phy.c:190:20
  1150ce:    61 8a             	call -0x6c <musb_read_usb : 115064 >			  ## usb_phy.c:190:20
  1150d0:    05 16             	r5 = r0			  ## usb_phy.c:190:20
  1150d2:    40 28             	r0 = 0x8			  ## usb_phy.c:190:51
  1150d4:    61 87             	call -0x72 <musb_read_usb : 115064 >			  ## usb_phy.c:190:51
  1150d6:    b4 e8 ff df       	if (r4 != -0x1) {			  ## usb_phy.c:190:51
  1150da:    c1 ff ff ff 00 00 		r1 = 0xffff <text_size+0x7FFE : fffe >			  ## usb_phy.c:194:21
  1150e0:    94 e1 11 14       		r1 = r1 ^ (1 << r4)			  ## usb_phy.c:194:21
  1150e4:    a5 e1 20 04       		r5 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:190:49
  1150e8:    90 e1 52 41       		r4 = r5 & r1
                               	} else {			  ## usb_phy.c:194:18
  1150ec:    44 20             		r4 = 0x0
                               	}
  1150ee:    71 e1 7f 4c       	r1 = r4 & 0xFFFF00FF			  ## usb_phy.c:196:5
  1150f2:    40 27             	r0 = 0x7			  ## usb_phy.c:196:5
  1150f4:    51 89             	call -0xae <usb_code_begin : 115048 >			  ## usb_phy.c:196:5
  1150f6:    c1 a8             	r1 = r4 >> 0x8			  ## usb_phy.c:197:44
  1150f8:    40 28             	r0 = 0x8			  ## usb_phy.c:197:5
  1150fa:    51 86             	call -0xb4 <usb_code_begin : 115048 >			  ## usb_phy.c:197:5
  1150fc:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:198:5
  1150fe:    ff ea 96 ec       	goto -0x26d4 <local_irq_enable : 112a2e >			  ## usb_phy.c:198:5


musb_write_index:
  115102:    01 16             	r1 = r0			  ## usb_phy.c:68:0
  115104:    40 2e             	r0 = 0xe			  ## usb_phy.c:69:5
  115106:    d7 80             	goto -0xc0 <usb_code_begin : 115048 >			  ## usb_phy.c:69:5


usb_read_rxcsr:
  115108:    74 04             	[--sp] = {rets, r4}			  ## usb_phy.c:253:0
  11510a:    bf ea 89 ec       	call -0x26ee <os_code_begin : 112a20 >			  ## usb_phy.c:254:5
  11510e:    40 21             	r0 = 0x1			  ## usb_phy.c:255:5
  115110:    71 98             	call -0x10 <musb_write_index : 115102 >			  ## usb_phy.c:255:5
  115112:    40 34             	r0 = 0x14			  ## usb_phy.c:256:17
  115114:    51 87             	call -0xb2 <musb_read_usb : 115064 >			  ## usb_phy.c:256:17
  115116:    04 16             	r4 = r0			  ## usb_phy.c:256:17
  115118:    40 35             	r0 = 0x15			  ## usb_phy.c:256:47
  11511a:    51 84             	call -0xb8 <musb_read_usb : 115064 >			  ## usb_phy.c:256:47
  11511c:    a4 e1 20 04       	r4 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:256:44
  115120:    bf ea 85 ec       	call -0x26f6 <local_irq_enable : 112a2e >			  ## usb_phy.c:257:5
  115124:    40 16             	r0 = r4			  ## usb_phy.c:258:5
  115126:    54 04             	{pc, r4} = [sp++]			  ## usb_phy.c:258:5


usb_write_rxcsr:
  115128:    74 04             	[--sp] = {rets, r4}			  ## usb_phy.c:245:0
  11512a:    14 16             	r4 = r1			  ## usb_phy.c:245:0
  11512c:    01 16             	r1 = r0			  ## usb_phy.c:245:0
  11512e:    bf ea 77 ec       	call -0x2712 <os_code_begin : 112a20 >			  ## usb_phy.c:246:5
  115132:    10 17             	r0 = r1.b0 (u)			  ## usb_phy.c:247:5
  115134:    71 86             	call -0x34 <musb_write_index : 115102 >			  ## usb_phy.c:247:5
  115136:    41 17             	r1 = r4.b0 (u)			  ## usb_phy.c:248:5
  115138:    40 34             	r0 = 0x14			  ## usb_phy.c:248:5
  11513a:    41 86             	call -0xf4 <usb_code_begin : 115048 >			  ## usb_phy.c:248:5
  11513c:    b1 e1 20 44       	r1 = uextra(r4, p:0x8, l:0x8)			  ## usb_phy.c:249:5
  115140:    40 35             	r0 = 0x15			  ## usb_phy.c:249:5
  115142:    41 82             	call -0xfc <usb_code_begin : 115048 >			  ## usb_phy.c:249:5
  115144:    34 04             	{rets, r4} = [sp++]			  ## usb_phy.c:250:5
  115146:    ff ea 72 ec       	goto -0x271c <local_irq_enable : 112a2e >			  ## usb_phy.c:250:5


usb_g_bulk_read:
  11514a:    7a 04             	[--sp] = {rets, r10-r4}			  ## usb_phy.c:432:0
  11514c:    14 16             	r4 = r1			  ## usb_phy.c:432:0
  11514e:    05 16             	r5 = r0			  ## usb_phy.c:432:0
  115150:    14 5a             	if (r4 == 0) goto 0x74 <usb_g_bulk_read+0x7C : 1151c6 >			  ## usb_phy.c:432:0
  115152:    c0 ff 50 14 01 00 	r0 = 0x11450 <ep_raddr : 11450 >			  ## usb_phy.c:432:0
  115158:    d0 ec 00 80       	r8 = [r0+0x0]			  ## usb_phy.c:432:0
  11515c:    4a e0 01 00       	r10 = 0x1			  ## usb_phy.c:432:0
  115160:    32 e8 00 00       	if (r2 == 0x0) {			  ## usb_phy.c:432:0
  115164:    2a 16             		r10 = r2
                               	}			  ## usb_phy.c:432:0
  115166:    c1 14             	r9 = 0			  ## usb_phy.c:432:0
  115168:    bf ea 5a ec       	call -0x274c <os_code_begin : 112a20 >			  ## usb_phy.c:337:5
  11516c:    40 21             	r0 = 0x1			  ## usb_phy.c:339:5
  11516e:    61 89             	call -0x6e <musb_write_index : 115102 >			  ## usb_phy.c:339:5
  115170:    40 34             	r0 = 0x14			  ## usb_phy.c:340:9
  115172:    bf ea 77 ff       	call -0x112 <musb_read_usb : 115064 >			  ## usb_phy.c:340:9
  115176:    50 e8 03 02       	if ((r0 & 0x1) != 0) goto 0x6 <usb_g_bulk_read+0x36 : 115180 >			  ## usb_phy.c:340:9
  11517a:    bf ea 58 ec       	call -0x2750 <local_irq_enable : 112a2e >			  ## usb_phy.c:343:5
  11517e:    04 9f             	goto 0x3e <usb_g_bulk_read+0x74 : 1151be >			  ## usb_phy.c:343:5
  115180:    40 36             	r0 = 0x16			  ## usb_phy.c:341:19
  115182:    bf ea 6f ff       	call -0x122 <musb_read_usb : 115064 >			  ## usb_phy.c:341:19
  115186:    06 16             	r6 = r0			  ## usb_phy.c:341:19
  115188:    40 37             	r0 = 0x17			  ## usb_phy.c:341:51
  11518a:    bf ea 6b ff       	call -0x12a <musb_read_usb : 115064 >			  ## usb_phy.c:341:51
  11518e:    a6 e1 20 04       	r6 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:341:48
  115192:    bf ea 4c ec       	call -0x2768 <local_irq_enable : 112a2e >			  ## usb_phy.c:343:5
  115196:    06 53             	if (r6 == 0) goto 0x26 <usb_g_bulk_read+0x74 : 1151be >			  ## usb_phy.c:343:5
  115198:    51 97             	call -0x92 <usb_read_rxcsr : 115108 >			  ## usb_phy.c:361:21
  11519a:    77 e1 ba 0f       	r7 = r0 & 0xFFFFFE8B			  ## usb_phy.c:372:19
  11519e:    b5 e8 00 c0       	if (r5 != 0x0) {
  1151a2:    50 16             		r0 = r5			  ## usb_phy.c:375:13
  1151a4:    81 16             		r1 = r8			  ## usb_phy.c:375:13
  1151a6:    62 16             		r2 = r6			  ## usb_phy.c:375:13
  1151a8:    bf ea 76 e0       		call -0x3f14
                               	} <memmove : 111298 >			  ## usb_phy.c:375:13
  1151ac:    41 e1 10 70       	r1 = r7 | 0x10			  ## usb_phy.c:377:46
  1151b0:    40 21             	r0 = 0x1			  ## usb_phy.c:377:9
  1151b2:    47 21             	r7 = 0x1			  ## usb_phy.c:377:9
  1151b4:    51 99             	call -0x8e <usb_write_rxcsr : 115128 >			  ## usb_phy.c:377:9
  1151b6:    65 18             	r5 += r6			  ## usb_phy.c:380:13
  1151b8:    69 18             	r9 += r6			  ## usb_phy.c:379:14
  1151ba:    c4 1f             	r4 = r4 - r6			  ## usb_phy.c:378:13
  1151bc:    04 81             	goto 0x2 <usb_g_bulk_read+0x76 : 1151c0 >
  1151be:    a7 16             	r7 = r10
  1151c0:    04 43             	if (r4 == 0) goto 0x6 <usb_g_bulk_read+0x7E : 1151c8 >
  1151c2:    e7 52             	if (r7 != 0) goto -0x5c <usb_g_bulk_read+0x1E : 115168 >
  1151c4:    04 81             	goto 0x2 <usb_g_bulk_read+0x7E : 1151c8 >
  1151c6:    c1 14             	r9 = 0
  1151c8:    90 16             	r0 = r9			  ## usb_phy.c:433:5
  1151ca:    5a 04             	{pc, r10-r4} = [sp++]			  ## usb_phy.c:433:5


rbc_get_length:
  1151cc:    c0 ff f4 13 01 00 	r0 = 0x113f4 <cbw : 113f4 >			  ## msd_upgrade.c:51:0
  1151d2:    50 ee 05 11       	r1 = b[r0+0x15] (u)			  ## msd_upgrade.c:63:12
  1151d6:    50 ee 06 01       	r0 = b[r0+0x16] (u)			  ## msd_upgrade.c:63:12
  1151da:    a0 e1 20 14       	r0 <= insert(r1, p:0x8, l:0x8)			  ## msd_upgrade.c:63:12
  1151de:    80 00             	rts			  ## msd_upgrade.c:63:5


msd_usb2mcu:
  1151e0:    42 21             	r2 = 0x1			  ## msd.c:132:0
  1151e2:    d7 93             	goto -0x9a <usb_g_bulk_read : 11514a >			  ## msd.c:133:12


usb_read_txcsr:
  1151e4:    74 04             	[--sp] = {rets, r4}			  ## usb_phy.c:237:0
  1151e6:    bf ea 1b ec       	call -0x27ca <os_code_begin : 112a20 >			  ## usb_phy.c:238:5
  1151ea:    40 21             	r0 = 0x1			  ## usb_phy.c:239:5
  1151ec:    41 8a             	call -0xec <musb_write_index : 115102 >			  ## usb_phy.c:239:5
  1151ee:    40 31             	r0 = 0x11			  ## usb_phy.c:240:17
  1151f0:    bf ea 38 ff       	call -0x190 <musb_read_usb : 115064 >			  ## usb_phy.c:240:17
  1151f4:    04 16             	r4 = r0			  ## usb_phy.c:240:17
  1151f6:    40 32             	r0 = 0x12			  ## usb_phy.c:240:47
  1151f8:    bf ea 34 ff       	call -0x198 <musb_read_usb : 115064 >			  ## usb_phy.c:240:47
  1151fc:    a4 e1 20 04       	r4 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:240:44
  115200:    bf ea 15 ec       	call -0x27d6 <local_irq_enable : 112a2e >			  ## usb_phy.c:241:5
  115204:    40 16             	r0 = r4			  ## usb_phy.c:242:5
  115206:    54 04             	{pc, r4} = [sp++]			  ## usb_phy.c:242:5


usb_write_txcsr:
  115208:    74 04             	[--sp] = {rets, r4}			  ## usb_phy.c:229:0
  11520a:    14 16             	r4 = r1			  ## usb_phy.c:229:0
  11520c:    01 16             	r1 = r0			  ## usb_phy.c:229:0
  11520e:    bf ea 07 ec       	call -0x27f2 <os_code_begin : 112a20 >			  ## usb_phy.c:230:5
  115212:    10 17             	r0 = r1.b0 (u)			  ## usb_phy.c:231:5
  115214:    bf ea 75 ff       	call -0x116 <musb_write_index : 115102 >			  ## usb_phy.c:231:5
  115218:    41 17             	r1 = r4.b0 (u)			  ## usb_phy.c:232:5
  11521a:    40 31             	r0 = 0x11			  ## usb_phy.c:232:5
  11521c:    bf ea 14 ff       	call -0x1d8 <usb_code_begin : 115048 >			  ## usb_phy.c:232:5
  115220:    b1 e1 20 44       	r1 = uextra(r4, p:0x8, l:0x8)			  ## usb_phy.c:233:5
  115224:    40 32             	r0 = 0x12			  ## usb_phy.c:233:5
  115226:    bf ea 0f ff       	call -0x1e2 <usb_code_begin : 115048 >			  ## usb_phy.c:233:5
  11522a:    34 04             	{rets, r4} = [sp++]			  ## usb_phy.c:234:5
  11522c:    ff ea ff eb       	goto -0x2802 <local_irq_enable : 112a2e >			  ## usb_phy.c:234:5


msd_mcu2usb:
  115230:    79 04             	[--sp] = {rets, r9-r4}			  ## msd.c:136:0
  115232:    c2 ff 40 14 01 00 	r2 = 0x11440 <ep_taddr : 11440 >			  ## msd.c:136:0
  115238:    18 d6             	r8 = r1  #			  ## msd.c:136:0
  11523a:    25 60             		 r5 = [r2+0x0] 			  ## msd.c:136:0
  11523c:    06 16             	r6 = r0			  ## msd.c:136:0
  11523e:    c9 ff 0c 18 1e 00 	r9 = 0x1e180c <__stub_LZ4_decompress_safe_continue+0xC9810 : 1e180c >			  ## msd.c:136:0
  115244:    84 16             	r4 = r8			  ## msd.c:136:0
  115246:    04 87             	goto 0xe <msd_mcu2usb+0x26 : 115256 >			  ## msd.c:136:0
  115248:    71 e1 05 00       	r1 = r0 & 0xFFFFFFFA			  ## usb_phy.c:407:23
  11524c:    04 82             	goto 0x4 <msd_mcu2usb+0x22 : 115252 >			  ## usb_phy.c:407:23
  11524e:    71 e1 03 00       	r1 = r0 & 0xFFFFFFFC			  ## usb_phy.c:412:23
  115252:    40 21             	r0 = 0x1
  115254:    61 99             	call -0x4e <usb_write_txcsr : 115208 >
  115256:    61 86             	call -0x74 <usb_read_txcsr : 1151e4 >			  ## usb_phy.c:402:21
  115258:    50 e8 06 72       	if ((r0 & 0x4000) != 0) goto 0xc <msd_mcu2usb+0x38 : 115268 >
  11525c:    50 e8 f4 13       	if ((r0 & 0x4) != 0) goto -0x18 <msd_mcu2usb+0x18 : 115248 >
  115260:    50 e8 f5 0b       	if ((r0 & 0x2) != 0) goto -0x16 <msd_mcu2usb+0x1E : 11524e >
  115264:    50 e8 f7 03       	if ((r0 & 0x1) != 0) goto -0x12 <msd_mcu2usb+0x26 : 115256 >
  115268:    47 16             	r7 = r4			  ## usb_phy.c:421:24
  11526a:    34 e9 40 00       	if (r4 >= 0x40) {			  ## usb_phy.c:421:24
  11526e:    57 20             		r7 = 0x40
                               	}			  ## usb_phy.c:421:24
  115270:    b6 e8 00 c0       	if (r6 != 0x0) {
  115274:    50 16             		r0 = r5			  ## usb_phy.c:423:13
  115276:    61 16             		r1 = r6			  ## usb_phy.c:423:13
  115278:    72 16             		r2 = r7			  ## usb_phy.c:423:13
  11527a:    bf ea 0d e0       		call -0x3fe6
                               	} <memmove : 111298 >			  ## usb_phy.c:423:13
  11527e:    d0 ec 91 70       	[r9+0x0] = r7			  ## usb_phy.c:389:11
  115282:    51 90             	call -0xa0 <usb_read_txcsr : 1151e4 >			  ## usb_phy.c:390:17
  115284:    41 e1 01 00       	r1 = r0 | 0x1			  ## usb_phy.c:392:11
  115288:    40 21             	r0 = 0x1			  ## usb_phy.c:393:5
  11528a:    51 9e             	call -0x84 <usb_write_txcsr : 115208 >			  ## usb_phy.c:393:5
  11528c:    cc 1f             	r4 = r4 - r7			  ## usb_phy.c:426:13
  11528e:    76 18             	r6 += r7			  ## usb_phy.c:427:13
  115290:    f4 42             	if (r4 != 0) goto -0x3c <msd_mcu2usb+0x26 : 115256 >
  115292:    80 16             	r0 = r8			  ## msd.c:137:5
  115294:    59 04             	{pc, r9-r4} = [sp++]			  ## msd.c:137:5


stall_inep:
  115296:    10 04             	[--sp] = rets			  ## msd.c:171:0
  115298:    40 21             	r0 = 0x1			  ## msd.c:173:5
  11529a:    41 30             	r1 = 0x10			  ## msd.c:173:5
  11529c:    51 95             	call -0x96 <usb_write_txcsr : 115208 >			  ## msd.c:173:5
  11529e:    51 82             	call -0xbc <usb_read_txcsr : 1151e4 >			  ## msd.c:180:14
  1152a0:    50 e8 fd 23       	if ((r0 & 0x10) != 0) goto -0x6 <stall_inep+0x8 : 11529e >			  ## msd.c:180:13
  1152a4:    00 04             	pc = [sp++]			  ## msd.c:184:1


unknow:
  1152a6:    10 04             	[--sp] = rets			  ## msd.c:199:0
  1152a8:    00 49             	if (r0 == 0) goto 0x12 <unknow+0x16 : 1152bc >			  ## msd.c:200:9
  1152aa:    40 21             	r0 = 0x1			  ## msd.c:188:5
  1152ac:    49 20             	r1 = 0x20			  ## msd.c:188:5
  1152ae:    bf ea 3b ff       	call -0x18a <usb_write_rxcsr : 115128 >			  ## msd.c:188:5
  1152b2:    bf ea 29 ff       	call -0x1ae <usb_read_rxcsr : 115108 >			  ## msd.c:193:14
  1152b6:    50 e8 fc 2b       	if ((r0 & 0x20) != 0) goto -0x8 <unknow+0xC : 1152b2 >			  ## msd.c:193:14
  1152ba:    04 81             	goto 0x2 <unknow+0x18 : 1152be >			  ## msd.c:193:14
  1152bc:    71 8c             	call -0x28 <stall_inep : 115296 >			  ## msd.c:203:9
  1152be:    c0 ff 13 14 01 00 	r0 = 0x11413 <cbw+0x1E : 11412 >			  ## msd.c:207:20
  1152c4:    41 20             	r1 = 0x0			  ## msd.c:207:20
  1152c6:    89 4b             	b[r0+0xb] = r1			  ## msd.c:206:25
  1152c8:    89 4a             	b[r0+0xa] = r1			  ## msd.c:206:25
  1152ca:    89 49             	b[r0+0x9] = r1			  ## msd.c:206:25
  1152cc:    89 48             	b[r0+0x8] = r1			  ## msd.c:206:25
  1152ce:    41 21             	r1 = 0x1			  ## msd.c:206:25
  1152d0:    89 4c             	b[r0+0xc] = r1			  ## msd.c:207:20
  1152d2:    c0 ff 20 14 01 00 	r0 = 0x11420 <msd_status.0 : 11420 >			  ## msd.c:208:23
  1152d8:    41 22             	r1 = 0x2			  ## msd.c:208:23
  1152da:    89 40             	b[r0+0x0] = r1			  ## msd.c:208:23
  1152dc:    00 04             	pc = [sp++]			  ## msd.c:209:1


usb_slave_mode:
  1152de:    e2 94             	sp += -0x30			  ## usb_device.c:12:0
  1152e0:    c0 ff ac 14 01 00 	r0 = 0x114ac <usb_interrupt_rx : 114ac >			  ## usb_onchip.c:83:5
  1152e6:    c4 14             	r12 = 0			  ## usb_onchip.c:83:5
  1152e8:    10 86             	rep 0x4 0x7 {			  ## usb_onchip.c:83:5
  1152ea:    d8 ec 05 c0       		[r0++=0x4] = r12
                               	}			  ## usb_onchip.c:83:5
  1152ee:    c0 ff 90 14 01 00 	r0 = 0x11490 <usb_interrupt_tx : 11490 >			  ## usb_onchip.c:84:5
  1152f4:    10 86             	rep 0x4 0x7 {			  ## usb_onchip.c:84:5
  1152f6:    d8 ec 05 c0       		[r0++=0x4] = r12
                               	}			  ## usb_onchip.c:84:5
  1152fa:    c1 ff 86 58 11 00 	r1 = 0x115886 <usb_device_isr : 115886 >			  ## usb_onchip.c:86:5
  115300:    40 29             	r0 = 0x9			  ## usb_onchip.c:86:5
  115302:    42 21             	r2 = 0x1			  ## usb_onchip.c:86:5
  115304:    80 ea 5c 05       	call 0xab8 <HWI_Install : 115dc0 >			  ## usb_onchip.c:86:5
  115308:    c0 ff 00 51 1e 00 	r0 = 0x1e5100 <__stub_LZ4_decompress_safe_continue+0xCD104 : 1e5100 >			  ## usb_onchip.c:86:5
  11530e:    c0 ef 00 0e       	[r0+0x0] &= 0xFFFFF7FF			  ## usb_onchip.c:88:21
  115312:    00 ef 80 0d       	[r0+0x0] |= 0x1000			  ## usb_onchip.c:89:21
  115316:    41 e0 ca bf       	r1 = -0x4036			  ## usb_onchip.c:90:18
  11531a:    c4 ff 00 18 1e 00 	r4 = 0x1e1800 <__stub_LZ4_decompress_safe_continue+0xC9804 : 1e1800 >			  ## usb_onchip.c:90:18
  115320:    64 e8 02 41       	[r4+0x0] &= r1			  ## usb_onchip.c:90:18
  115324:    d0 ec 45 c0       	[r4+0x4] = r12			  ## usb_onchip.c:91:18
  115328:    00 ef 01 40       	[r4+0x0] |= 0x1			  ## usb_onchip.c:93:18
  11532c:    c0 ef 30 00       	[r0+0x0] &= 0xFFFFFFCF			  ## usb_onchip.c:95:21
  115330:    c0 ef c0 00       	[r0+0x0] &= 0xFFFFFF3F			  ## usb_onchip.c:96:21
  115334:    00 ef 40 00       	[r0+0x0] |= 0x40			  ## usb_onchip.c:98:21
  115338:    00 ef 20 00       	[r0+0x0] |= 0x20			  ## usb_onchip.c:99:21
  11533c:    00 ef 34 40       	[r4+0x0] |= 0x34			  ## usb_onchip.c:101:18
  115340:    bf ea 6e eb       	call -0x2924 <os_code_begin : 112a20 >			  ## usb_phy.c:173:5
  115344:    40 2b             	r0 = 0xb			  ## usb_phy.c:174:5
  115346:    41 24             	r1 = 0x4			  ## usb_phy.c:174:5
  115348:    bf ea 7e fe       	call -0x304 <usb_code_begin : 115048 >			  ## usb_phy.c:174:5
  11534c:    bf ea 6f eb       	call -0x2922 <local_irq_enable : 112a2e >			  ## usb_phy.c:175:5
  115350:    10 3f             	r0 = -0x1			  ## usb_onchip.c:104:5
  115352:    bf ea 98 fe       	call -0x2d0 <usb_clr_intr_rxe : 115086 >			  ## usb_onchip.c:104:5
  115356:    10 3f             	r0 = -0x1			  ## usb_onchip.c:105:5
  115358:    bf ea b4 fe       	call -0x298 <usb_clr_intr_txe : 1150c4 >			  ## usb_onchip.c:105:5
  11535c:    bf ea 60 eb       	call -0x2940 <os_code_begin : 112a20 >			  ## usb_phy.c:73:5
  115360:    40 21             	r0 = 0x1			  ## usb_phy.c:74:5
  115362:    51 20             	r1 = 0x40			  ## usb_phy.c:74:5
  115364:    bf ea 70 fe       	call -0x320 <usb_code_begin : 115048 >			  ## usb_phy.c:74:5
  115368:    bf ea 61 eb       	call -0x293e <local_irq_enable : 112a2e >			  ## usb_phy.c:75:5
  11536c:    00 ef 00 4e       	[r4+0x0] |= 0x800			  ## usb_onchip.c:114:18
  115370:    c0 ff c0 10 01 00 	r0 = 0x110c0 <ep0_dma_buffer : 110c0 >			  ## usb_phy.c:321:25
  115376:    c0 67             	[r4+0x1c] = r0			  ## usb_phy.c:321:25
  115378:    c1 ff 3c 14 01 00 	r1 = 0x1143c <ep0_addr : 1143c >			  ## usb_phy.c:322:18
  11537e:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:322:18
  115380:    c0 ff 00 11 01 00 	r0 = 0x11100 <ep1_dma_buffer : 11100 >
  115386:    c0 68             	[r4+0x20] = r0			  ## usb_phy.c:308:12
  115388:    c1 ff 40 14 01 00 	r1 = 0x11440 <ep_taddr : 11440 >			  ## usb_phy.c:309:22
  11538e:    90 60             	[r1+0x0] = r0			  ## usb_phy.c:309:22
  115390:    d0 20             	r0 += 0x40			  ## usb_phy.c:309:22
  115392:    4a f0 53 00       	r10 = 0x53  #
  115396:    c0 69             		 [r4+0x24] = r0			  ## usb_phy.c:327:12
  115398:    c1 ff 50 14 01 00 	r1 = 0x11450 <ep_raddr : 11450 >			  ## usb_phy.c:328:22
  11539e:    4f f0 42 00       	r15 = 0x42  #			  ## usb_phy.c:328:22
  1153a2:    90 60             		 [r1+0x0] = r0			  ## usb_phy.c:328:22
  1153a4:    a8 80             	r0 = sp + 32			  ## usb_phy.c:328:22
  1153a6:    80 22             	[sp+8] = r0
  1153a8:    88 8e             	r0 = sp + 14
  1153aa:    80 21             	[sp+4] = r0
  1153ac:    c0 21             	r0 += 0x1
  1153ae:    80 20             	[sp] = r0
  1153b0:    c4 ff f4 13 01 00 	r4 = 0x113f4 <cbw : 113f4 >
  1153b6:    c9 ff 55 53 42 43 	r9 = 0x43425355 <__stub_LZ4_decompress_safe_continue+0x4330D358 : 43425354 >
  1153bc:    cb ff 13 14 01 00 	r11 = 0x11413 <cbw+0x1E : 11412 >
  1153c2:    c8 ff 24 14 01 00 	r8 = 0x11424 <hook_usb_scsi : 11424 >
  1153c8:    cd ff 20 14 01 00 	r13 = 0x11420 <msd_status.0 : 11420 >
  1153ce:    ce ff 21 14 01 00 	r14 = 0x11421 <msd_status.0 : 11420 >
  1153d4:    c6 ff 22 14 01 00 	r6 = 0x11422 <msd_status.2 : 11422 >
  1153da:    57 35             	r7 = 0x55
  1153dc:    80 ea 45 07       	call 0xe8a <wdt_clr : 11626a >			  ## usb_device.c:18:9
  1153e0:    52 ee 43 c0       	b[r4+0x3] = r12			  ## msd.c:141:23
  1153e4:    52 ee 42 c0       	b[r4+0x2] = r12			  ## msd.c:141:23
  1153e8:    52 ee 41 c0       	b[r4+0x1] = r12			  ## msd.c:141:23
  1153ec:    52 ee 40 c0       	b[r4+0x0] = r12			  ## msd.c:141:23
  1153f0:    41 3f             	r1 = 0x1f			  ## msd.c:142:18
  1153f2:    42 20             	r2 = 0x0			  ## msd.c:142:18
  1153f4:    40 16             	r0 = r4			  ## msd.c:142:18
  1153f6:    bf ea a8 fe       	call -0x2b0 <usb_g_bulk_read : 11514a >			  ## msd.c:142:18
  1153fa:    4a 43             	r2 = b[r4+0x3] (u)			  ## msd.c:146:13
  1153fc:    4b 42             	r3 = b[r4+0x2] (u)			  ## msd.c:146:13
  1153fe:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## msd.c:146:13
  115402:    4d 41             		 r5 = b[r4+0x1] (u)			  ## msd.c:146:13
  115404:    49 40             	r1 = b[r4+0x0] (u)			  ## msd.c:146:13
  115406:    a1 e1 20 54       	r1 <= insert(r5, p:0x8, l:0x8)			  ## msd.c:146:13
  11540a:    a1 e1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)			  ## msd.c:146:13
  11540e:    70 46             	if (r0 == 0) goto -0x34 <usb_slave_mode+0xFE : 1153dc >			  ## msd.c:143:9
  115410:    89 e8 e4 11       	if (r1 != r9) goto -0x38 <usb_slave_mode+0xFE : 1153dc >
  115414:    00 e1 04 b0       	r0 = r11 + 0x4
  115418:    49 84             	r1 = r4 + 0x4			  ## msd.c:152:23
  11541a:    10 83             	rep 0x4 0x4 {			  ## msd.c:152:17
  11541c:    12 07             		r2 = b[r1++=0x1] (u)			  ## msd.c:152:17
  11541e:    82 07             		b[r0++=0x1] = r2
                               	}			  ## msd.c:152:17
  115420:    05 e1 08 b0       	r5 = r11 + 0x8			  ## msd.c:152:17
  115424:    48 88             	r0 = r4 + 0x8			  ## msd.c:153:31
  115426:    51 16             	r1 = r5			  ## msd.c:153:25
  115428:    10 83             	rep 0x4 0x4 {			  ## msd.c:153:25
  11542a:    02 07             		r2 = b[r0++=0x1] (u)			  ## msd.c:153:25
  11542c:    92 07             		b[r1++=0x1] = r2
                               	}			  ## msd.c:153:25
  11542e:    d0 ec 80 20       	r2 = [r8+0x0]			  ## msd_upgrade.c:137:9
  115432:    02 45             	if (r2 == 0) goto 0xa <usb_slave_mode+0x160 : 11543e >			  ## msd_upgrade.c:137:9
  115434:    a9 80             	r1 = sp + 32
  115436:    40 16             	r0 = r4			  ## msd_upgrade.c:137:26
  115438:    c2 00             	call r2			  ## msd_upgrade.c:137:26
  11543a:    80 f8 b5 00       	if (r0 != 0x0) goto 0x16a <usb_slave_mode+0x2CA : 1155a8 >			  ## msd_upgrade.c:137:26
  11543e:    48 4f             	r0 = b[r4+0xf] (u)			  ## msd_upgrade.c:141:18
  115440:    10 f8 27 fa       	if (r0 == 0xfd) goto 0x4e <usb_slave_mode+0x1B4 : 115492 >			  ## msd_upgrade.c:141:5
  115444:    90 f8 4a f6       	if (r0 != 0xfb) goto 0x94 <usb_slave_mode+0x1FE : 1154dc >
  115448:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:145:22
  11544c:    00 f8 7a 10       	if (r0 == 0x8) goto 0xf4 <usb_slave_mode+0x266 : 115544 >			  ## msd_upgrade.c:145:9
  115450:    80 f8 72 0c       	if (r0 != 0x6) goto 0xe4 <usb_slave_mode+0x25A : 115538 >
  115454:    48 91             	r0 = r4 + 0x11
  115456:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  115458:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  11545a:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  11545e:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  115460:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  115462:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  115466:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  11546a:    70 e0 00 70       	r7 = rev8(r0)			  ## msd_upgrade.c:46:12
  11546e:    bf ea ad fe       	call -0x2a6 <rbc_get_length : 1151cc >			  ## msd_upgrade.c:82:11
  115472:    06 16             	r6 = r0			  ## msd_upgrade.c:82:11
  115474:    70 16             	r0 = r7			  ## msd_upgrade.c:85:5
  115476:    61 16             	r1 = r6			  ## msd_upgrade.c:85:5
  115478:    bf ea b2 fe       	call -0x29c <msd_usb2mcu : 1151e0 >			  ## msd_upgrade.c:85:5
  11547c:    e1 17             	r1 = r6.l (u)			  ## msd_upgrade.c:86:5
  11547e:    c6 ff 22 14 01 00 	r6 = 0x11422 <msd_status.2 : 11422 >			  ## msd_upgrade.c:86:5
  115484:    70 16             	r0 = r7			  ## msd_upgrade.c:86:5
  115486:    57 35             	r7 = 0x55			  ## msd_upgrade.c:86:5
  115488:    80 ea 45 07       	call 0xe8a <CrcDecode : 116316 >			  ## msd_upgrade.c:86:5
  11548c:    d0 ec 81 c0       	[r8+0x0] = r12			  ## msd_upgrade.c:148:27
  115490:    44 8b             	goto 0x116 <usb_slave_mode+0x2CA : 1155a8 >			  ## msd_upgrade.c:148:27
  115492:    50 ee 40 01       	r0 = b[r4+0x10] (u)			  ## msd_upgrade.c:160:22
  115496:    80 f8 4f 0e       	if (r0 != 0x7) goto 0x9e <usb_slave_mode+0x25A : 115538 >			  ## msd_upgrade.c:160:22
  11549a:    48 91             	r0 = r4 + 0x11
  11549c:    09 43             	r1 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  11549e:    0a 42             	r2 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  1154a0:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  1154a4:    0b 41             		 r3 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  1154a6:    08 40             	r0 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  1154a8:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  1154ac:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  1154b0:    70 e0 00 60       	r6 = rev8(r0)			  ## msd_upgrade.c:46:12
  1154b4:    bf ea 8a fe       	call -0x2ec <rbc_get_length : 1151cc >			  ## msd_upgrade.c:95:11
  1154b8:    07 16             	r7 = r0			  ## msd_upgrade.c:95:11
  1154ba:    f5 17             	r5 = r7.l (u)			  ## msd_upgrade.c:97:5
  1154bc:    60 16             	r0 = r6			  ## msd_upgrade.c:97:5
  1154be:    51 16             	r1 = r5			  ## msd_upgrade.c:97:5
  1154c0:    80 ea 29 07       	call 0xe52 <CrcDecode : 116316 >			  ## msd_upgrade.c:97:5
  1154c4:    60 15             	r1_r0 = r7_r6			  ## msd_upgrade.c:98:5
  1154c6:    57 35             	r7 = 0x55			  ## msd_upgrade.c:98:5
  1154c8:    bf ea b2 fe       	call -0x29c <msd_mcu2usb : 115230 >			  ## msd_upgrade.c:98:5
  1154cc:    60 16             	r0 = r6			  ## msd_upgrade.c:99:5
  1154ce:    c6 ff 22 14 01 00 	r6 = 0x11422 <msd_status.2 : 11422 >			  ## msd_upgrade.c:99:5
  1154d4:    51 16             	r1 = r5			  ## msd_upgrade.c:99:5
  1154d6:    80 ea 1e 07       	call 0xe3c <CrcDecode : 116316 >			  ## msd_upgrade.c:99:5
  1154da:    34 86             	goto 0xcc <usb_slave_mode+0x2CA : 1155a8 >			  ## msd_upgrade.c:99:5
  1154dc:    30 52             	if (r0 == 0) goto 0xe4 <usb_slave_mode+0x2E4 : 1155c2 >			  ## msd.c:283:9
  1154de:    00 f8 77 06       	if (r0 == 0x3) goto 0xee <usb_slave_mode+0x2F2 : 1155d0 >
  1154e2:    00 f8 ae 5e       	if (r0 == 0x2f) goto 0x15c <usb_slave_mode+0x364 : 115642 >
  1154e6:    00 f8 a6 34       	if (r0 == 0x1a) goto 0x14c <usb_slave_mode+0x358 : 115636 >
  1154ea:    00 f8 b5 3c       	if (r0 == 0x1e) goto 0x16a <usb_slave_mode+0x37A : 115658 >
  1154ee:    00 f8 5e 46       	if (r0 == 0x23) goto 0xbc <usb_slave_mode+0x2D0 : 1155ae >
  1154f2:    00 f8 5c 4a       	if (r0 == 0x25) goto 0xb8 <usb_slave_mode+0x2D0 : 1155ae >
  1154f6:    00 f8 5a 50       	if (r0 == 0x28) goto 0xb4 <usb_slave_mode+0x2D0 : 1155ae >
  1154fa:    80 f8 1d 24       	if (r0 != 0x12) goto 0x3a <usb_slave_mode+0x25A : 115538 >
  1154fe:    50 ee bb 00       	r0 = b[r11+0xb] (u)			  ## msd.c:159:15
  115502:    50 ee ba 20       	r2 = b[r11+0xa] (u)			  ## msd.c:159:15
  115506:    50 ee b9 30       	r3 = b[r11+0x9] (u)			  ## msd.c:159:15
  11550a:    50 ee b8 10       	r1 = b[r11+0x8] (u)			  ## msd.c:159:15
  11550e:    a2 e1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:159:15
  115512:    a1 e1 20 34       	r1 <= insert(r3, p:0x8, l:0x8)			  ## msd.c:159:15
  115516:    a1 e1 40 28       	r1 <= insert(r2, p:0x10, l:0x10)			  ## msd.c:159:15
  11551a:    31 e9 24 00       	if (r1 >= 0x24) {			  ## msd.c:159:15
  11551e:    49 24             		r1 = 0x24
                               	}			  ## msd.c:159:15
  115520:    c0 ff d9 5b 11 00 	r0 = 0x115bd9 <sMassDescriptor+0x16 : 115bd8 >			  ## msd.c:161:5
  115526:    bf ea 83 fe       	call -0x2fa <msd_mcu2usb : 115230 >			  ## msd.c:161:5
  11552a:    50 16             	r0 = r5			  ## msd.c:162:25
  11552c:    10 83             	rep 0x4 0x4 {			  ## msd.c:162:25
  11552e:    51 07             		r1 = b[r5++=0x1] (u)			  ## msd.c:162:25
  115530:    81 07             		b[r0++=0x1] = r1
                               	}			  ## msd.c:162:25
  115532:    52 ee bc c0       	b[r11+0xc] = r12			  ## msd.c:163:20
  115536:    54 9a             	goto 0x174 <usb_slave_mode+0x3CE : 1156ac >			  ## msd.c:163:20
  115538:    48 4c             	r0 = b[r4+0xc] (u)			  ## msd.c:308:26
  11553a:    80 a7             	r0 = r0 >> 0x7			  ## msd.c:308:20
  11553c:    38 20             	r0 ^= 0x1			  ## msd.c:308:20
  11553e:    bf ea b2 fe       	call -0x29c <unknow : 1152a6 >			  ## msd.c:308:13
  115542:    54 94             	goto 0x168 <usb_slave_mode+0x3CE : 1156ac >			  ## msd.c:308:13
  115544:    48 91             	r0 = r4 + 0x11
  115546:    0a 41             	r2 = b[r0+0x1] (u)			  ## msd_upgrade.c:43:5
  115548:    0b 40             	r3 = b[r0+0x0] (u)			  ## msd_upgrade.c:43:5
  11554a:    0d 43             	r5 = b[r0+0x3] (u)			  ## msd_upgrade.c:43:5
  11554c:    0e 42             	r6 = b[r0+0x2] (u)			  ## msd_upgrade.c:43:5
  11554e:    bf ea 3d fe       	call -0x386 <rbc_get_length : 1151cc >			  ## msd_upgrade.c:110:15
  115552:    01 16             	r1 = r0			  ## msd_upgrade.c:110:15
  115554:    c0 ff 28 14 01 00 	r0 = 0x11428 <arg_list : 11428 >
  11555a:    cf ff 30 52 11 00 	r15 = 0x115230 <msd_mcu2usb : 115230 >			  ## msd_upgrade.c:111:26
  115560:    d0 ec 01 f0       	[r0+0x0] = r15			  ## msd_upgrade.c:111:26
  115564:    c7 ff e0 51 11 00 	r7 = 0x1151e0 <msd_usb2mcu : 1151e0 >			  ## msd_upgrade.c:112:26
  11556a:    4f f0 42 00       	r15 = 0x42  #			  ## msd_upgrade.c:112:26
  11556e:    87 61             		 [r0+0x4] = r7			  ## msd_upgrade.c:112:26
  115570:    57 35             	r7 = 0x55			  ## msd_upgrade.c:112:26
  115572:    d0 ec 09 80       	[r0+0x8] = r8			  ## msd_upgrade.c:113:20
  115576:    a6 f1 20 54       	r6 <= insert(r5, p:0x8, l:0x8)  #			  ## msd_upgrade.c:43:5
  11557a:    81 63             		 [r0+0xc] = r1			  ## msd_upgrade.c:114:21
  11557c:    d0 ec 01 c1       	[r0+0x10] = r12			  ## msd_upgrade.c:115:23
  115580:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd_upgrade.c:43:5
  115584:    a3 e1 40 68       	r3 <= insert(r6, p:0x10, l:0x10)			  ## msd_upgrade.c:43:5
  115588:    c6 ff 22 14 01 00 	r6 = 0x11422 <msd_status.2 : 11422 >
  11558e:    70 e0 00 13       	r1 = rev8(r3)			  ## msd_upgrade.c:46:12
  115592:    c1 00             	call r1			  ## msd_upgrade.c:121:5
  115594:    78 3b             	r0 = 0xfb			  ## msd_upgrade.c:123:12
  115596:    de e9 20 00       	b[sp+32] = r0			  ## msd_upgrade.c:123:12
  11559a:    00 22             	r0 = [sp+8]			  ## msd_upgrade.c:124:12
  11559c:    41 28             	r1 = 0x8			  ## msd_upgrade.c:124:12
  11559e:    89 41             	b[r0+0x1] = r1			  ## msd_upgrade.c:124:12
  1155a0:    a8 80             	r0 = sp + 32			  ## msd_upgrade.c:124:12
  1155a2:    41 30             	r1 = 0x10			  ## msd_upgrade.c:126:5
  1155a4:    bf ea 44 fe       	call -0x378 <msd_mcu2usb : 115230 >			  ## msd_upgrade.c:126:5
  1155a8:    52 ee d0 c0       	b[r13+0x0] = r12			  ## msd.c:280:27
  1155ac:    44 9c             	goto 0x138 <.GJTIE65_0_0_+0x24 : 1156e6 >			  ## msd.c:280:27
  1155ae:    40 20             	r0 = 0x0			  ## msd.c:212:5
  1155b0:    bf ea 79 fe       	call -0x30e <unknow : 1152a6 >			  ## msd.c:212:5
  1155b4:    40 25             	r0 = 0x5			  ## msd.c:213:23
  1155b6:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:213:23
  1155ba:    40 21             	r0 = 0x1			  ## msd.c:214:20
  1155bc:    52 ee bc 00       	b[r11+0xc] = r0			  ## msd.c:214:20
  1155c0:    34 95             	goto 0xea <usb_slave_mode+0x3CE : 1156ac >			  ## msd.c:214:20
  1155c2:    40 21             	r0 = 0x1			  ## msd.c:218:20
  1155c4:    52 ee bc 00       	b[r11+0xc] = r0			  ## msd.c:218:20
  1155c8:    40 25             	r0 = 0x5			  ## msd.c:219:23
  1155ca:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:219:23
  1155ce:    44 92             	goto 0x124 <.GJTIE65_0_0_+0x32 : 1156f4 >			  ## msd.c:219:23
  1155d0:    49 4b             	r1 = b[r4+0xb] (u)			  ## msd.c:234:11
  1155d2:    4a 4a             	r2 = b[r4+0xa] (u)			  ## msd.c:234:11
  1155d4:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## msd.c:234:11
  1155d8:    4b 49             		 r3 = b[r4+0x9] (u)			  ## msd.c:234:11
  1155da:    48 48             	r0 = b[r4+0x8] (u)			  ## msd.c:234:11
  1155dc:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## msd.c:234:11
  1155e0:    a0 e1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)			  ## msd.c:234:11
  1155e4:    07 16             	r7 = r0			  ## msd.c:234:11
  1155e6:    30 e9 12 00       	if (r0 >= 0x12) {			  ## msd.c:234:11
  1155ea:    47 32             		r7 = 0x12
                               	}			  ## msd.c:234:11
  1155ec:    20 4a             	if (r0 == 0) goto 0x94 <usb_slave_mode+0x3A4 : 115682 >
  1155ee:    45 20             	r5 = 0x0
  1155f0:    00 20             	r0 = [sp]			  ## msd.c:242:9
  1155f2:    00 90             	rep 0x2 0x11 {			  ## msd.c:242:9
  1155f4:    85 07             		b[r0++=0x1] = r5
                               	}			  ## msd.c:242:9
  1155f6:    50 ee e0 00       	r0 = b[r14+0x0] (u)			  ## msd.c:243:36
  1155fa:    69 40             	r1 = b[r6+0x0] (u)			  ## msd.c:244:37
  1155fc:    02 21             	r2 = [sp+4]			  ## msd.c:244:37
  1155fe:    a8 42             	b[r2+0x2] = r0			  ## msd.c:243:23
  115600:    71 d6             	r1 = r7  #			  ## msd.c:250:9
  115602:    a9 4c             		 b[r2+0xc] = r1			  ## msd.c:244:24
  115604:    ad 4d             	b[r2+0xd] = r5			  ## msd.c:245:24
  115606:    58 30             	r0 = 0x70			  ## msd.c:246:23
  115608:    de e9 0e 00       	b[sp+14] = r0			  ## msd.c:246:23
  11560c:    40 2a             	r0 = 0xa			  ## msd.c:247:23
  11560e:    a8 47             	b[r2+0x7] = r0			  ## msd.c:247:23
  115610:    88 8e             	r0 = sp + 14			  ## msd.c:247:23
  115612:    bf ea 0d fe       	call -0x3e6 <msd_mcu2usb : 115230 >			  ## msd.c:250:9
  115616:    50 ee bb 00       	r0 = b[r11+0xb] (u)			  ## msd.c:253:25
  11561a:    50 ee ba 10       	r1 = b[r11+0xa] (u)			  ## msd.c:253:25
  11561e:    50 ee b9 20       	r2 = b[r11+0x9] (u)			  ## msd.c:253:25
  115622:    50 ee b8 30       	r3 = b[r11+0x8] (u)			  ## msd.c:253:25
  115626:    a1 e1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)			  ## msd.c:253:25
  11562a:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## msd.c:253:25
  11562e:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## msd.c:253:25
  115632:    b8 1f             	r0 = r3 - r7			  ## msd.c:253:25
  115634:    14 8d             	goto 0x5a <usb_slave_mode+0x3B2 : 115690 >			  ## msd.c:253:25
  115636:    41 24             	r1 = 0x4			  ## msd.c:261:5
  115638:    c0 ff fd 5b 11 00 	r0 = 0x115bfd <SCSIInquiryData+0x23 : 115bfc >			  ## msd.c:261:5
  11563e:    bf ea f7 fd       	call -0x412 <msd_mcu2usb : 115230 >			  ## msd.c:261:5
  115642:    52 ee bb c0       	b[r11+0xb] = r12
  115646:    52 ee ba c0       	b[r11+0xa] = r12
  11564a:    52 ee b9 c0       	b[r11+0x9] = r12
  11564e:    52 ee b8 c0       	b[r11+0x8] = r12
  115652:    52 ee bc c0       	b[r11+0xc] = r12
  115656:    14 8a             	goto 0x54 <usb_slave_mode+0x3CE : 1156ac >
  115658:    52 ee bc c0       	b[r11+0xc] = r12			  ## msd.c:223:20
  11565c:    50 ee 43 01       	r0 = b[r4+0x13] (u)			  ## msd.c:224:9
  115660:    b0 e8 00 c0       	if (r0 != 0x0) {			  ## msd.c:224:9
  115664:    40 22             		r0 = 0x2			  ## msd.c:225:27
  115666:    52 ee d0 00       		b[r13+0x0] = r0			  ## msd.c:225:27
  11566a:    40 21             		r0 = 0x1			  ## msd.c:226:24
  11566c:    52 ee bc 00       		b[r11+0xc] = r0
                               	}			  ## msd.c:226:24
  115670:    52 ee bb c0       	b[r11+0xb] = r12			  ## msd.c:228:25
  115674:    52 ee ba c0       	b[r11+0xa] = r12			  ## msd.c:228:25
  115678:    52 ee b9 c0       	b[r11+0x9] = r12			  ## msd.c:228:25
  11567c:    52 ee b8 c0       	b[r11+0x8] = r12			  ## msd.c:228:25
  115680:    04 95             	goto 0x2a <usb_slave_mode+0x3CE : 1156ac >			  ## msd.c:228:25
  115682:    bf ea 08 fe       	call -0x3f0 <stall_inep : 115296 >			  ## msd.c:236:9
  115686:    40 22             	r0 = 0x2			  ## msd.c:237:27
  115688:    52 ee d0 00       	b[r13+0x0] = r0			  ## msd.c:237:27
  11568c:    45 21             	r5 = 0x1			  ## msd.c:237:27
  11568e:    40 20             	r0 = 0x0			  ## msd.c:237:27
  115690:    57 35             	r7 = 0x55
  115692:    52 ee b8 00       	b[r11+0x8] = r0
  115696:    81 b8             	r1 = r0 >> 0x18
  115698:    52 ee bb 10       	b[r11+0xb] = r1
  11569c:    81 b0             	r1 = r0 >> 0x10
  11569e:    52 ee ba 10       	b[r11+0xa] = r1
  1156a2:    80 a8             	r0 = r0 >> 0x8
  1156a4:    52 ee b9 00       	b[r11+0x9] = r0
  1156a8:    52 ee bc 50       	b[r11+0xc] = r5
  1156ac:    50 ee d0 20       	r2 = b[r13+0x0] (u)			  ## msd.c:312:24
  1156b0:    02 fc 1e 0c       	if (r2 > 0x6) goto 0x3c <.GJTIE65_0_0_+0x2E : 1156f0 >			  ## msd.c:312:24
  1156b4:    48 24             	r0 = 0x24
  1156b6:    41 25             	r1 = 0x5
  1156b8:    02 01             	tbb [r2]


.GJTIS65_0_0_:
  1156ba:    16     < 22 : 0x16 >
  1156bb:    04     < 4 : 0x4 >
  1156bc:    12     < 18 : 0x12 >
  1156bd:    04     < 4 : 0x4 >
  1156be:    04     < 4 : 0x4 >
  1156bf:    1d     < 29 : 0x1D >
  1156c0:    18     < 24 : 0x18 >
  1156c1:    00     < 0 : 0x0 >
  1156c2:    04 80             	goto 0x0 <.GJTIE65_0_0_+0x2 : 1156c4 >
  1156c4:    52 ee b3 a0       	b[r11+0x3] = r10			  ## msd.c:167:23
  1156c8:    52 ee b2 f0       	b[r11+0x2] = r15			  ## msd.c:167:23
  1156cc:    52 ee b1 a0       	b[r11+0x1] = r10			  ## msd.c:167:23
  1156d0:    52 ee b0 70       	b[r11+0x0] = r7			  ## msd.c:167:23
  1156d4:    41 2d             	r1 = 0xd			  ## msd.c:168:5
  1156d6:    b0 16             	r0 = r11			  ## msd.c:168:5
  1156d8:    bf ea aa fd       	call -0x4ac <msd_mcu2usb : 115230 >			  ## msd.c:168:5
  1156dc:    37 9f             	goto -0x302 <usb_slave_mode+0xFE : 1153dc >			  ## msd.c:168:5
  1156de:    52 ee e0 10       	b[r14+0x0] = r1
  1156e2:    e8 40             	b[r6+0x0] = r0
  1156e4:    f7 8f             	goto -0x22 <.GJTIE65_0_0_+0x2 : 1156c4 >
  1156e6:    80 14             	r1_r0 = 0
  1156e8:    f7 9a             	goto -0xc <.GJTIE65_0_0_+0x1C : 1156de >
  1156ea:    48 20             	r0 = 0x20
  1156ec:    41 2b             	r1 = 0xb
  1156ee:    f7 97             	goto -0x12 <.GJTIE65_0_0_+0x1C : 1156de >
  1156f0:    82 f8 e8 1f       	if (r2 != 0xf) goto -0x30 <.GJTIE65_0_0_+0x2 : 1156c4 >
  1156f4:    48 3a             	r0 = 0x3a
  1156f6:    41 22             	r1 = 0x2
  1156f8:    f7 92             	goto -0x1c <.GJTIE65_0_0_+0x1C : 1156de >


usb_g_ep_config:
  1156fa:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_phy.c:456:0
  1156fc:    04 16             	r4 = r0			  ## usb_phy.c:456:0
  1156fe:    c0 ff 3c 14 01 00 	r0 = 0x1143c <ep0_addr : 1143c >			  ## usb_phy.c:456:0
  115704:    c2 ff 1c 18 1e 00 	r2 = 0x1e181c <__stub_LZ4_decompress_safe_continue+0xC9820 : 1e181c >			  ## usb_phy.c:456:0
  11570a:    54 e8 0f 3a       	if ((r4 & 0x80) != 0) goto 0x1e <usb_g_ep_config+0x32 : 11572c >			  ## usb_phy.c:456:0
  11570e:    14 41             	if (r4 == 0) goto 0x42 <usb_g_ep_config+0x58 : 115752 >			  ## usb_phy.c:456:0
  115710:    30 e1 ff 4f       	r0 = r4 + -0x1			  ## usb_phy.c:326:22
  115714:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:326:11
  115716:    c3 ff 09 86 07 00 	r3 = 0x78609 <RAM_LIMIT_H+0x46608 : 78608 >			  ## usb_phy.c:326:11
  11571c:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:327:12
  115720:    c2 ff 50 14 01 00 	r2 = 0x11450 <ep_raddr : 11450 >			  ## usb_phy.c:328:5
  115726:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:328:22
  11572a:    04 95             	goto 0x2a <usb_g_ep_config+0x5C : 115756 >
  11572c:    65 e1 0f 40       	r5 = r4 & 0xF			  ## usb_phy.c:459:12
  115730:    60 ff 0f 40 22 00 	if ((r4 & 0xF) == 0) goto 0x44 <usb_g_ep_config+0x80 : 11577a >
  115736:    30 e1 ff 5f       	r0 = r5 + -0x1			  ## usb_phy.c:307:22
  11573a:    02 a3             	r2 = r0 << 0x3			  ## usb_phy.c:307:11
  11573c:    c3 ff 08 86 07 00 	r3 = 0x78608 <RAM_LIMIT_H+0x46608 : 78608 >			  ## usb_phy.c:307:11
  115742:    d8 ec 2b 13       	[r2+r3<<2] = r1			  ## usb_phy.c:308:12
  115746:    c2 ff 40 14 01 00 	r2 = 0x11440 <ep_taddr : 11440 >			  ## usb_phy.c:309:5
  11574c:    d8 ec 2b 10       	[r2+r0<<2] = r1			  ## usb_phy.c:309:22
  115750:    04 96             	goto 0x2c <usb_g_ep_config+0x84 : 11577e >			  ## usb_phy.c:309:22
  115752:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:321:25
  115754:    81 60             	[r0+0x0] = r1			  ## usb_phy.c:322:18
  115756:    bf ea 63 e9       	call -0x2d3a <os_code_begin : 112a20 >			  ## usb_phy.c:262:5
  11575a:    40 17             	r0 = r4.b0 (u)			  ## usb_phy.c:263:5
  11575c:    bf ea d1 fc       	call -0x65e <musb_write_index : 115102 >			  ## usb_phy.c:263:5
  115760:    40 33             	r0 = 0x13			  ## usb_phy.c:264:5
  115762:    79 3f             	r1 = 0xff			  ## usb_phy.c:264:5
  115764:    bf ea 70 fc       	call -0x720 <usb_code_begin : 115048 >			  ## usb_phy.c:264:5
  115768:    bf ea 61 e9       	call -0x2d3e <local_irq_enable : 112a2e >			  ## usb_phy.c:265:5
  11576c:    61 30             	r1 = 0x90			  ## usb_phy.c:476:9
  11576e:    40 16             	r0 = r4			  ## usb_phy.c:476:9
  115770:    bf ea da fc       	call -0x64c <usb_write_rxcsr : 115128 >			  ## usb_phy.c:476:9
  115774:    40 16             	r0 = r4			  ## usb_phy.c:483:13
  115776:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:483:13
  115778:    46 86             	goto -0x6f4 <usb_clr_intr_rxe : 115086 >			  ## usb_phy.c:483:13
  11577a:    a1 60             	[r2+0x0] = r1			  ## usb_phy.c:302:25
  11577c:    81 60             	[r0+0x0] = r1			  ## usb_phy.c:303:18
  11577e:    bf ea 4f e9       	call -0x2d62 <os_code_begin : 112a20 >			  ## usb_phy.c:269:5
  115782:    50 16             	r0 = r5			  ## usb_phy.c:270:5
  115784:    bf ea bd fc       	call -0x686 <musb_write_index : 115102 >			  ## usb_phy.c:270:5
  115788:    40 30             	r0 = 0x10			  ## usb_phy.c:271:5
  11578a:    79 3f             	r1 = 0xff			  ## usb_phy.c:271:5
  11578c:    bf ea 5c fc       	call -0x748 <usb_code_begin : 115048 >			  ## usb_phy.c:271:5
  115790:    bf ea 4d e9       	call -0x2d66 <local_irq_enable : 112a2e >			  ## usb_phy.c:272:5
  115794:    51 28             	r1 = 0x48			  ## usb_phy.c:463:9
  115796:    50 16             	r0 = r5			  ## usb_phy.c:463:9
  115798:    bf ea 36 fd       	call -0x594 <usb_write_txcsr : 115208 >			  ## usb_phy.c:463:9
  11579c:    50 16             	r0 = r5			  ## usb_phy.c:470:13
  11579e:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_phy.c:470:13
  1157a0:    46 91             	goto -0x6de <usb_clr_intr_txe : 1150c4 >			  ## usb_phy.c:470:13


msd_itf_hander:
  1157a2:    76 04             	[--sp] = {rets, r6-r4}			  ## msd.c:93:0
  1157a4:    c2 ff 24 14 01 00 	r2 = 0x11424 <hook_usb_scsi : 11424 >			  ## msd_upgrade.c:130:19
  1157aa:    40 ea 00 20       	[r2+0x0] = 0x0			  ## msd_upgrade.c:130:19
  1157ae:    04 15             	r5_r4 = r1_r0			  ## msd_upgrade.c:130:19
  1157b0:    c6 ff 00 11 01 00 	r6 = 0x11100 <ep1_dma_buffer : 11100 >			  ## msd.c:87:5
  1157b6:    60 21             	r0 = 0x81			  ## msd.c:86:5
  1157b8:    61 16             	r1 = r6			  ## msd.c:86:5
  1157ba:    41 9f             	call -0xc2 <usb_g_ep_config : 1156fa >			  ## msd.c:86:5
  1157bc:    01 e1 40 60       	r1 = r6 + 0x40			  ## msd.c:87:5
  1157c0:    40 21             	r0 = 0x1			  ## msd.c:87:5
  1157c2:    41 9b             	call -0xca <usb_g_ep_config : 1156fa >			  ## msd.c:87:5
  1157c4:    58 40             	r0 = b[r5+0x0] (u)			  ## msd.c:95:15
  1157c6:    41 23             	r1 = 0x3			  ## msd.c:95:15
  1157c8:    10 f8 08 42       	if (r0 == 0xa1) goto 0x10 <msd_itf_hander+0x3A : 1157dc >			  ## msd.c:95:37
  1157cc:    80 f8 10 42       	if (r0 != 0x21) goto 0x20 <msd_itf_hander+0x4E : 1157f0 >
  1157d0:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:96:15
  1157d2:    41 20             	r1 = 0x0			  ## msd.c:95:9
  1157d4:    b0 e8 ff 00       	if (r0 != 0xff) {			  ## msd.c:95:9
  1157d8:    41 23             		r1 = 0x3
                               	}			  ## msd.c:95:9
  1157da:    04 8a             	goto 0x14 <msd_itf_hander+0x4E : 1157f0 >			  ## msd.c:95:9
  1157dc:    58 41             	r0 = b[r5+0x1] (u)			  ## msd.c:101:22
  1157de:    90 f8 07 fc       	if (r0 != 0xfe) goto 0xe <msd_itf_hander+0x4E : 1157f0 >			  ## msd.c:101:22
  1157e2:    40 62             	r0 = [r4+0x8] 			  ## msd.c:104:21
  1157e4:    41 20             	r1 = 0x0			  ## msd.c:104:37
  1157e6:    89 40             	b[r0+0x0] = r1			  ## msd.c:104:37
  1157e8:    40 62             	r0 = [r4+0x8] 			  ## msd.c:105:45
  1157ea:    c0 63             	[r4+0xc] = r0			  ## msd.c:105:31
  1157ec:    41 21             	r1 = 0x1			  ## msd.c:105:31
  1157ee:    c9 61             	h[r4+0x2] = r1			  ## msd.c:106:33
  1157f0:    40 20             	r0 = 0x0			  ## msd.c:111:5
  1157f2:    c9 41             	b[r4+0x1] = r1			  ## msd.c:111:5
  1157f4:    56 04             	{pc, r6-r4} = [sp++]			  ## msd.c:111:5


usb_read_csr0:
  1157f6:    10 04             	[--sp] = rets			  ## usb_phy.c:98:0
  1157f8:    bf ea 12 e9       	call -0x2ddc <os_code_begin : 112a20 >			  ## usb_phy.c:99:5
  1157fc:    40 20             	r0 = 0x0			  ## usb_phy.c:100:5
  1157fe:    bf ea 80 fc       	call -0x700 <musb_write_index : 115102 >			  ## usb_phy.c:100:5
  115802:    40 31             	r0 = 0x11			  ## usb_phy.c:101:16
  115804:    bf ea 2e fc       	call -0x7a4 <musb_read_usb : 115064 >			  ## usb_phy.c:101:16
  115808:    02 16             	r2 = r0			  ## usb_phy.c:101:16
  11580a:    bf ea 10 e9       	call -0x2de0 <local_irq_enable : 112a2e >			  ## usb_phy.c:102:5
  11580e:    20 16             	r0 = r2			  ## usb_phy.c:103:5
  115810:    00 04             	pc = [sp++]			  ## usb_phy.c:103:5


usb_write_csr0:
  115812:    74 04             	[--sp] = {rets, r4}			  ## usb_phy.c:107:0
  115814:    04 16             	r4 = r0			  ## usb_phy.c:107:0
  115816:    bf ea 03 e9       	call -0x2dfa <os_code_begin : 112a20 >			  ## usb_phy.c:108:5
  11581a:    40 20             	r0 = 0x0			  ## usb_phy.c:109:5
  11581c:    bf ea 71 fc       	call -0x71e <musb_write_index : 115102 >			  ## usb_phy.c:109:5
  115820:    41 17             	r1 = r4.b0 (u)			  ## usb_phy.c:110:5
  115822:    40 31             	r0 = 0x11			  ## usb_phy.c:110:5
  115824:    bf ea 10 fc       	call -0x7e0 <usb_code_begin : 115048 >			  ## usb_phy.c:110:5
  115828:    34 04             	{rets, r4} = [sp++]			  ## usb_phy.c:111:5
  11582a:    ff ea 00 e9       	goto -0x2e00 <local_irq_enable : 112a2e >			  ## usb_phy.c:111:5


usb_ep0_RxPktEnd:
  11582e:    50 28             	r0 = 0x48			  ## usb_phy.c:125:0
  115830:    f7 90             	goto -0x20 <usb_write_csr0 : 115812 >			  ## usb_phy.c:126:5


usb_ep0_TxPktEnd:
  115832:    40 2a             	r0 = 0xa			  ## usb_phy.c:120:0
  115834:    f7 8e             	goto -0x24 <usb_write_csr0 : 115812 >			  ## usb_phy.c:121:5


ep0_stage_tx:
  115836:    75 04             	[--sp] = {rets, r5, r4}			  ## usb_setup.c:15:0
  115838:    61 9e             	call -0x44 <usb_read_csr0 : 1157f6 >			  ## usb_setup.c:17:11
  11583a:    50 e8 20 0a       	if ((r0 & 0x2) != 0) goto 0x40 <ep0_stage_tx+0x48 : 11587e >
  11583e:    c5 ff 7c 14 01 00 	r5 = 0x1147c <usb_device : 1147c >
  115844:    5c 61             	r4 = h[r5+0x2] (u)			  ## usb_setup.c:20:16
  115846:    04 58             	if (r4 == 0) goto 0x30 <ep0_stage_tx+0x42 : 115878 >			  ## usb_setup.c:20:16
  115848:    34 e9 40 00       	if (r4 >= 0x40) {
  11584c:    54 20             		r4 = 0x40
                               	}			  ## usb_setup.c:24:19
  11584e:    c0 ff 3c 14 01 00 	r0 = 0x1143c <ep0_addr : 1143c >			  ## usb_phy.c:136:20
  115854:    42 d6             	r2 = r4  #			  ## usb_phy.c:136:5
  115856:    00 60             		 r0 = [r0+0x0] 			  ## usb_phy.c:136:20
  115858:    51 63             	r1 = [r5+0xc] 			  ## usb_setup.c:25:34
  11585a:    bf ea 1d dd       	call -0x45c6 <memmove : 111298 >			  ## usb_phy.c:136:5
  11585e:    c0 ff 08 18 1e 00 	r0 = 0x1e1808 <__stub_LZ4_decompress_safe_continue+0xC980C : 1e1808 >			  ## usb_phy.c:137:21
  115864:    84 60             	[r0+0x0] = r4			  ## usb_phy.c:137:21
  115866:    68 e8 0c 54       	[r5+0xc] += r4			  ## usb_setup.c:26:30
  11586a:    58 61             	r0 = h[r5+0x2] (u)			  ## usb_setup.c:27:32
  11586c:    00 1f             	r0 = r0 - r4			  ## usb_setup.c:27:32
  11586e:    d8 61             	h[r5+0x2] = r0			  ## usb_setup.c:27:32
  115870:    59 46             	r1 = b[r5+0x6] (u)			  ## usb_setup.c:28:50
  115872:    81 46             	if (r1 != 0) goto 0xc <ep0_stage_tx+0x4A : 115880 >			  ## usb_setup.c:28:50
  115874:    80 17             	r0 = r0.l (u)			  ## usb_setup.c:28:13
  115876:    80 44             	if (r0 != 0) goto 0x8 <ep0_stage_tx+0x4A : 115880 >			  ## usb_setup.c:28:13
  115878:    61 9c             	call -0x48 <usb_ep0_TxPktEnd : 115832 >
  11587a:    40 20             	r0 = 0x0
  11587c:    d8 41             	b[r5+0x1] = r0
  11587e:    55 04             	{pc, r5, r4} = [sp++]			  ## usb_setup.c:35:1
  115880:    40 22             	r0 = 0x2			  ## usb_setup.c:29:13
  115882:    35 04             	{rets, r5, r4} = [sp++]			  ## usb_setup.c:29:13
  115884:    e7 86             	goto -0x74 <usb_write_csr0 : 115812 >			  ## usb_setup.c:29:13


usb_device_isr:
  115886:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_onchip.c:30:0
  115888:    d8 e8 ff 3f       	[--sp] = {r13-r0}			  ## usb_phy.c:155:5
  11588c:    e2 9e             	sp += -0x8			  ## usb_phy.c:155:5
  11588e:    bf ea c7 e8       	call -0x2e72 <os_code_begin : 112a20 >			  ## usb_phy.c:155:5
  115892:    40 26             	r0 = 0x6			  ## usb_phy.c:156:17
  115894:    bf ea e6 fb       	call -0x834 <musb_read_usb : 115064 >			  ## usb_phy.c:156:17
  115898:    40 22             	r0 = 0x2			  ## usb_phy.c:157:16
  11589a:    bf ea e3 fb       	call -0x83a <musb_read_usb : 115064 >			  ## usb_phy.c:157:16
  11589e:    05 16             	r5 = r0			  ## usb_phy.c:157:16
  1158a0:    40 23             	r0 = 0x3			  ## usb_phy.c:157:46
  1158a2:    bf ea df fb       	call -0x842 <musb_read_usb : 115064 >			  ## usb_phy.c:157:46
  1158a6:    06 16             	r6 = r0			  ## usb_phy.c:157:46
  1158a8:    40 24             	r0 = 0x4			  ## usb_phy.c:158:16
  1158aa:    bf ea db fb       	call -0x84a <musb_read_usb : 115064 >			  ## usb_phy.c:158:16
  1158ae:    04 16             	r4 = r0			  ## usb_phy.c:158:16
  1158b0:    40 25             	r0 = 0x5			  ## usb_phy.c:158:46
  1158b2:    bf ea d7 fb       	call -0x852 <musb_read_usb : 115064 >			  ## usb_phy.c:158:46
  1158b6:    07 16             	r7 = r0			  ## usb_phy.c:158:46
  1158b8:    bf ea b9 e8       	call -0x2e8e <local_irq_enable : 112a2e >			  ## usb_phy.c:159:5
  1158bc:    bf ea b0 e8       	call -0x2ea0 <os_code_begin : 112a20 >			  ## usb_phy.c:165:5
  1158c0:    40 2b             	r0 = 0xb			  ## usb_phy.c:166:18
  1158c2:    bf ea cf fb       	call -0x862 <musb_read_usb : 115064 >			  ## usb_phy.c:166:18
  1158c6:    a5 e1 20 64       	r5 <= insert(r6, p:0x8, l:0x8)			  ## usb_phy.c:157:44
  1158ca:    40 27             	r0 = 0x7			  ## usb_phy.c:167:17
  1158cc:    bf ea ca fb       	call -0x86c <musb_read_usb : 115064 >			  ## usb_phy.c:167:17
  1158d0:    06 16             	r6 = r0			  ## usb_phy.c:167:17
  1158d2:    40 28             	r0 = 0x8			  ## usb_phy.c:167:48
  1158d4:    bf ea c6 fb       	call -0x874 <musb_read_usb : 115064 >			  ## usb_phy.c:167:48
  1158d8:    a6 e1 20 04       	r6 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:167:46
  1158dc:    d6 19             	r6 &= r5			  ## usb_onchip.c:39:13
  1158de:    a4 e1 20 74       	r4 <= insert(r7, p:0x8, l:0x8)			  ## usb_phy.c:158:44
  1158e2:    40 29             	r0 = 0x9			  ## usb_phy.c:168:17
  1158e4:    bf ea be fb       	call -0x884 <musb_read_usb : 115064 >			  ## usb_phy.c:168:17
  1158e8:    05 16             	r5 = r0			  ## usb_phy.c:168:17
  1158ea:    40 2a             	r0 = 0xa			  ## usb_phy.c:168:48
  1158ec:    bf ea ba fb       	call -0x88c <musb_read_usb : 115064 >			  ## usb_phy.c:168:48
  1158f0:    a5 e1 20 04       	r5 <= insert(r0, p:0x8, l:0x8)			  ## usb_phy.c:168:46
  1158f4:    bf ea 9b e8       	call -0x2eca <local_irq_enable : 112a2e >			  ## usb_phy.c:169:5
  1158f8:    60 ff 01 60 3a 01 	if ((r6 & 0x1) == 0) goto 0x274 <.GJTIE98_0_0_+0x194 : 115b72 >			  ## usb_phy.c:169:5
  1158fe:    c8 ff 7c 14 01 00 	r8 = 0x1147c <usb_device : 1147c >
  115904:    50 ee 80 10       	r1 = b[r8+0x0] (u)			  ## usb_setup.c:220:20
  115908:    01 4a             	if (r1 == 0) goto 0x14 <usb_device_isr+0x98 : 11591e >			  ## usb_setup.c:220:20
  11590a:    bf ea 89 e8       	call -0x2eee <os_code_begin : 112a20 >			  ## usb_phy.c:224:5
  11590e:    40 20             	r0 = 0x0			  ## usb_phy.c:225:5
  115910:    47 20             	r7 = 0x0			  ## usb_phy.c:225:5
  115912:    bf ea 99 fb       	call -0x8ce <usb_code_begin : 115048 >			  ## usb_phy.c:225:5
  115916:    bf ea 8a e8       	call -0x2eec <local_irq_enable : 112a2e >			  ## usb_phy.c:226:5
  11591a:    52 ee 80 70       	b[r8+0x0] = r7			  ## usb_setup.c:222:26
  11591e:    bf ea 6a ff       	call -0x12c <usb_read_csr0 : 1157f6 >			  ## usb_setup.c:224:11
  115922:    07 16             	r7 = r0			  ## usb_setup.c:224:11
  115924:    57 e8 0b 2a       	if ((r7 & 0x20) != 0) goto 0x16 <usb_device_isr+0xB8 : 11593e >
  115928:    57 e8 10 22       	if ((r7 & 0x10) != 0) goto 0x20 <usb_device_isr+0xC6 : 11594c >
  11592c:    50 ee 81 00       	r0 = b[r8+0x1] (u)			  ## usb_setup.c:236:24
  115930:    00 f8 5d 04       	if (r0 == 0x2) goto 0xba <.GJTIE98_0_0_+0x10 : 1159ee >			  ## usb_setup.c:236:5
  115934:    00 ff 01 00 1a 01 	if (r0 == 0x1) goto 0x234 <.GJTIE98_0_0_+0x190 : 115b6e >
  11593a:    00 4e             	if (r0 == 0) goto 0x1c <usb_device_isr+0xD2 : 115958 >
  11593c:    84 9a             	goto 0x234 <.GJTIE98_0_0_+0x194 : 115b72 >
  11593e:    40 20             	r0 = 0x0			  ## usb_setup.c:226:9
  115940:    47 20             	r7 = 0x0			  ## usb_setup.c:226:9
  115942:    bf ea 66 ff       	call -0x134 <usb_write_csr0 : 115812 >			  ## usb_setup.c:226:9
  115946:    52 ee 81 70       	b[r8+0x1] = r7			  ## usb_setup.c:227:27
  11594a:    84 93             	goto 0x226 <.GJTIE98_0_0_+0x194 : 115b72 >			  ## usb_setup.c:227:27
  11594c:    60 20             	r0 = 0x80			  ## usb_setup.c:232:9
  11594e:    bf ea 60 ff       	call -0x140 <usb_write_csr0 : 115812 >			  ## usb_setup.c:232:9
  115952:    40 20             	r0 = 0x0			  ## usb_setup.c:233:27
  115954:    52 ee 81 00       	b[r8+0x1] = r0			  ## usb_setup.c:233:27
  115958:    60 ff 01 70 0a 01 	if ((r7 & 0x1) == 0) goto 0x214 <.GJTIE98_0_0_+0x194 : 115b72 >
  11595e:    c0 ff 3c 14 01 00 	r0 = 0x1143c <ep0_addr : 1143c >			  ## usb_phy.c:149:25
  115964:    02 60             	r2 = [r0+0x0] 			  ## usb_phy.c:149:25
  115966:    50 ee 27 90       	r9 = b[r2+0x7] (u)			  ## usb_phy.c:149:5
  11596a:    2f 46             	r7 = b[r2+0x6] (u)			  ## usb_phy.c:149:5
  11596c:    a7 f1 20 94       	r7 <= insert(r9, p:0x8, l:0x8)  #			  ## usb_phy.c:149:5
  115970:    2b 45             		 r3 = b[r2+0x5] (u)			  ## usb_phy.c:149:5
  115972:    29 44             	r1 = b[r2+0x4] (u)			  ## usb_phy.c:149:5
  115974:    a1 f1 20 34       	r1 <= insert(r3, p:0x8, l:0x8)  #			  ## usb_phy.c:149:5
  115978:    2b 41             		 r3 = b[r2+0x1] (u)			  ## usb_phy.c:149:5
  11597a:    a1 f1 40 78       	r1 <= insert(r7, p:0x10, l:0x10)  #			  ## usb_phy.c:149:5
  11597e:    2f 42             		 r7 = b[r2+0x2] (u)			  ## usb_phy.c:149:5
  115980:    50 ee 23 90       	r9 = b[r2+0x3] (u)			  ## usb_phy.c:149:5
  115984:    a7 f1 20 94       	r7 <= insert(r9, p:0x8, l:0x8)  #			  ## usb_phy.c:149:5
  115988:    28 40             		 r0 = b[r2+0x0] (u)			  ## usb_phy.c:149:5
  11598a:    a0 e1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)			  ## usb_phy.c:149:5
  11598e:    a0 e1 40 78       	r0 <= insert(r7, p:0x10, l:0x10)			  ## usb_phy.c:149:5
  115992:    d0 e9 01 00       	d[sp] = r1_r0			  ## usb_phy.c:149:5
  115996:    43 21             	r3 = 0x1			  ## usb_phy.c:149:5
  115998:    52 ee 81 30       	b[r8+0x1] = r3			  ## usb_setup.c:187:23
  11599c:    c2 ff c0 11 01 00 	r2 = 0x111c0 <ep2_dma_buffer : 111c0 >			  ## usb_setup.c:187:23
  1159a2:    d0 ec 89 20       	[r8+0x8] = r2			  ## usb_setup.c:188:29
  1159a6:    0a 15             	r11_r10 = r1_r0			  ## usb_setup.c:190:5
  1159a8:    d0 e1 00 a9       	r11_r10 >>= 0x10			  ## usb_setup.c:190:5
  1159ac:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:190:5
  1159ae:    67 e1 1f 00       	r7 = r0 & 0x1F			  ## usb_setup.c:190:5
  1159b2:    d0 e1 08 c8       	r13_r12 >>= 0x8			  ## usb_setup.c:190:5
  1159b6:    07 f8 1d 04       	if (r7 == 0x2) goto 0x3a <.GJTIE98_0_0_+0x16 : 1159f4 >			  ## usb_setup.c:190:5
  1159ba:    c9 ff 60 14 01 00 	r9 = 0x11460 <interface_hander : 11460 >
  1159c0:    07 f8 31 02       	if (r7 == 0x1) goto 0x62 <.GJTIE98_0_0_+0x48 : 115a26 >
  1159c4:    87 f8 cc 00       	if (r7 != 0x0) goto 0x198 <.GJTIE98_0_0_+0x182 : 115b60 >
  1159c8:    b7 e1 20 c0       	r7 = uextra(r12, p:0x0, l:0x8)
  1159cc:    07 fc 35 16       	if (r7 > 0xb) goto 0x6a <.GJTIE98_0_0_+0x5C : 115a3a >
  1159d0:    07 01             	tbb [r7]


.GJTIS98_0_0_:
  1159d2:    06     < 6 : 0x6 >
  1159d3:    79     < 121 : 0x79 >
  1159d4:    34     < 52 : 0x34 >
  1159d5:    34     < 52 : 0x34 >
  1159d6:    34     < 52 : 0x34 >
  1159d7:    52     < 82 : 0x52 >
  1159d8:    55     < 85 : 0x55 >
  1159d9:    34     < 52 : 0x34 >
  1159da:    6c     < 108 : 0x6C >
  1159db:    77     < 119 : 0x77 >
  1159dc:    34     < 52 : 0x34 >
  1159dd:    79     < 121 : 0x79 >
  1159de:    40 21             	r0 = 0x1
  1159e0:    a8 40             	b[r2+0x0] = r0			  ## usb_setup.c:105:36
  1159e2:    40 20             	r0 = 0x0			  ## usb_setup.c:106:36
  1159e4:    a8 41             	b[r2+0x1] = r0			  ## usb_setup.c:106:36
  1159e6:    40 22             	r0 = 0x2			  ## usb_setup.c:107:32
  1159e8:    50 ed 83 00       	h[r8+0x2] = r0			  ## usb_setup.c:107:32
  1159ec:    54 99             	goto 0x172 <.GJTIE98_0_0_+0x182 : 115b60 >			  ## usb_setup.c:107:32
  1159ee:    bf ea 1e ff       	call -0x1c4 <usb_ep0_RxPktEnd : 11582e >			  ## usb_setup.c:38:5
  1159f2:    14 89             	goto 0x52 <.GJTIE98_0_0_+0x68 : 115a46 >			  ## usb_setup.c:38:5
  1159f4:    60 ff ff c0 2a 00 	if ((r12 & 0xFF) == 0) goto 0x54 <.GJTIE98_0_0_+0x70 : 115a4e >			  ## usb_setup.c:150:5
  1159fa:    b2 e1 20 c0       	r2 = uextra(r12, p:0x0, l:0x8)
  1159fe:    02 f8 30 06       	if (r2 == 0x3) goto 0x60 <.GJTIE98_0_0_+0x84 : 115a62 >
  115a02:    82 f8 2d 02       	if (r2 != 0x1) goto 0x5a <.GJTIE98_0_0_+0x82 : 115a60 >
  115a06:    43 23             	r3 = 0x3
  115a08:    61 ff ff a0 2a 00 	if ((r10 & 0xFF) != 0) goto 0x54 <.GJTIE98_0_0_+0x84 : 115a62 >
  115a0e:    02 15             	r3_r2 = r1_r0			  ## usb_phy.c:149:5
  115a10:    d0 e1 00 2a       	r3_r2 >>= 0x20			  ## usb_phy.c:149:5
  115a14:    60 e1 03 10       	r0 = r1 & 0x3			  ## usb_setup.c:149:34
  115a18:    52 e8 5d 3a       	if ((r2 & 0x80) != 0) goto 0xba <.GJTIE98_0_0_+0xF8 : 115ad6 >
  115a1c:    61 20             	r1 = 0x80			  ## usb_setup.c:156:17
  115a1e:    bf ea 83 fb       	call -0x8fa <usb_write_rxcsr : 115128 >			  ## usb_setup.c:156:17
  115a22:    43 20             	r3 = 0x0
  115a24:    04 9e             	goto 0x3c <.GJTIE98_0_0_+0x84 : 115a62 >
  115a26:    10 17             	r0 = r1.b0 (u)			  ## usb_setup.c:127:19
  115a28:    00 fc 07 0c       	if (r0 > 0x6) goto 0xe <.GJTIE98_0_0_+0x5C : 115a3a >			  ## usb_setup.c:127:19
  115a2c:    d8 ec 9a 20       	r2 = [r9+r0<<2]			  ## usb_setup.c:130:9
  115a30:    02 44             	if (r2 == 0) goto 0x8 <.GJTIE98_0_0_+0x5C : 115a3a >			  ## usb_setup.c:130:9
  115a32:    89 80             	r1 = sp + 0
  115a34:    80 16             	r0 = r8			  ## usb_setup.c:131:10
  115a36:    c2 00             	call r2			  ## usb_setup.c:131:10
  115a38:    20 4b             	if (r0 == 0) goto 0x96 <.GJTIE98_0_0_+0xF2 : 115ad0 >			  ## usb_setup.c:131:10
  115a3a:    40 23             	r0 = 0x3
  115a3c:    52 ee 81 00       	b[r8+0x1] = r0
  115a40:    58 20             	r0 = 0x60			  ## usb_phy.c:131:5
  115a42:    bf ea e6 fe       	call -0x234 <usb_write_csr0 : 115812 >			  ## usb_phy.c:131:5
  115a46:    40 20             	r0 = 0x0
  115a48:    52 ee 81 00       	b[r8+0x1] = r0
  115a4c:    44 92             	goto 0x124 <.GJTIE98_0_0_+0x194 : 115b72 >
  115a4e:    40 20             	r0 = 0x0			  ## usb_setup.c:164:36
  115a50:    a8 40             	b[r2+0x0] = r0			  ## usb_setup.c:164:36
  115a52:    a8 41             	b[r2+0x1] = r0			  ## usb_setup.c:165:36
  115a54:    d0 ec 8d 20       	[r8+0xc] = r2			  ## usb_setup.c:166:30
  115a58:    40 22             	r0 = 0x2			  ## usb_setup.c:167:32
  115a5a:    50 ed 83 00       	h[r8+0x2] = r0			  ## usb_setup.c:167:32
  115a5e:    04 81             	goto 0x2 <.GJTIE98_0_0_+0x84 : 115a62 >			  ## usb_setup.c:167:32
  115a60:    43 23             	r3 = 0x3
  115a62:    52 ee 81 30       	b[r8+0x1] = r3
  115a66:    30 e1 ff 3f       	r0 = r3 + -0x1			  ## usb_setup.c:203:9
  115a6a:    80 f9 79 04       	if (r0 < 0x2) goto 0xf2 <.GJTIE98_0_0_+0x182 : 115b60 >			  ## usb_setup.c:203:9
  115a6e:    13 4d             	if (r3 == 0) goto 0x5a <.GJTIE98_0_0_+0xEC : 115aca >
  115a70:    03 f8 e6 07       	if (r3 == 0x3) goto -0x34 <.GJTIE98_0_0_+0x62 : 115a40 >
  115a74:    34 98             	goto 0xf0 <.GJTIE98_0_0_+0x188 : 115b66 >
  115a76:    52 ee 80 a0       	b[r8+0x0] = r10			  ## usb_setup.c:47:26
  115a7a:    14 84             	goto 0x48 <.GJTIE98_0_0_+0xE6 : 115ac4 >			  ## usb_setup.c:47:26
  115a7c:    0c 15             	r13_r12 = r1_r0			  ## usb_setup.c:64:17
  115a7e:    d0 e1 08 c9       	r13_r12 >>= 0x18			  ## usb_setup.c:64:17
  115a82:    b7 e1 20 c0       	r7 = uextra(r12, p:0x0, l:0x8)			  ## usb_setup.c:64:9
  115a86:    07 f8 2b 06       	if (r7 == 0x3) goto 0x56 <.GJTIE98_0_0_+0x102 : 115ae0 >			  ## usb_setup.c:64:9
  115a8a:    07 f8 36 04       	if (r7 == 0x2) goto 0x6c <.GJTIE98_0_0_+0x11C : 115afa >
  115a8e:    87 f8 d4 03       	if (r7 != 0x1) goto -0x58 <.GJTIE98_0_0_+0x5C : 115a3a >
  115a92:    c9 ff 01 5c 11 00 	r9 = 0x115c01 <scsi_mode_sense+0x3 : 115c00 >			  ## descriptor.c:71:5
  115a98:    27 16             	r7 = r2			  ## descriptor.c:71:5
  115a9a:    20 91             	rep 0x6 0x12 {			  ## descriptor.c:71:5
  115a9c:    d0 ee 91 30       		r3 = b[r9++=0x1] (u)			  ## descriptor.c:71:5
  115aa0:    f3 07             		b[r7++=0x1] = r3
                               	}			  ## descriptor.c:71:5
  115aa2:    d0 ec 8d 20       	[r8+0xc] = r2			  ## usb_setup.c:67:34
  115aa6:    43 32             	r3 = 0x12
  115aa8:    24 8d             	goto 0x9a <.GJTIE98_0_0_+0x166 : 115b44 >
  115aaa:    50 ee 85 00       	r0 = b[r8+0x5] (u)			  ## usb_setup.c:57:49
  115aae:    a8 40             	b[r2+0x0] = r0			  ## usb_setup.c:57:36
  115ab0:    d0 ec 8d 20       	[r8+0xc] = r2			  ## usb_setup.c:58:30
  115ab4:    40 21             	r0 = 0x1			  ## usb_setup.c:58:30
  115ab6:    50 ed 83 00       	h[r8+0x2] = r0			  ## usb_setup.c:59:32
  115aba:    52 ee 81 00       	b[r8+0x1] = r0			  ## usb_setup.c:60:27
  115abe:    24 90             	goto 0xa0 <.GJTIE98_0_0_+0x182 : 115b60 >			  ## usb_setup.c:60:27
  115ac0:    52 ee 85 a0       	b[r8+0x5] = r10			  ## usb_setup.c:100:31
  115ac4:    40 20             	r0 = 0x0
  115ac6:    52 ee 81 00       	b[r8+0x1] = r0
  115aca:    bf ea b0 fe       	call -0x2a0 <usb_ep0_RxPktEnd : 11582e >			  ## usb_setup.c:204:9
  115ace:    24 8b             	goto 0x96 <.GJTIE98_0_0_+0x188 : 115b66 >			  ## usb_setup.c:204:9
  115ad0:    50 ee 81 30       	r3 = b[r8+0x1] (u)
  115ad4:    e7 88             	goto -0x70 <.GJTIE98_0_0_+0x88 : 115a66 >
  115ad6:    51 20             	r1 = 0x40			  ## usb_setup.c:154:17
  115ad8:    bf ea 96 fb       	call -0x8d4 <usb_write_txcsr : 115208 >			  ## usb_setup.c:154:17
  115adc:    43 20             	r3 = 0x0
  115ade:    e7 81             	goto -0x7e <.GJTIE98_0_0_+0x84 : 115a62 >
  115ae0:    60 ff ff a0 28 00 	if ((r10 & 0xFF) == 0) goto 0x50 <.GJTIE98_0_0_+0x158 : 115b36 >
  115ae6:    c9 ff 13 5c 11 00 	r9 = 0x115c13 <sDeviceDescriptor+0x11 : 115c12 >			  ## descriptor.c:79:5
  115aec:    27 16             	r7 = r2			  ## descriptor.c:79:5
  115aee:    20 9b             	rep 0x6 0x1c {			  ## descriptor.c:79:5
  115af0:    d0 ee 91 30       		r3 = b[r9++=0x1] (u)			  ## descriptor.c:79:5
  115af4:    f3 07             		b[r7++=0x1] = r3
                               	}			  ## descriptor.c:79:5
  115af6:    43 3c             	r3 = 0x1c			  ## descriptor.c:79:5
  115af8:    14 83             	goto 0x46 <.GJTIE98_0_0_+0x162 : 115b40 >			  ## descriptor.c:79:5
  115afa:    ca ff 2f 5c 11 00 	r10 = 0x115c2f <MANUFACTURE_STR+0x1B : 115c2e >			  ## descriptor.c:85:5
  115b00:    27 16             	r7 = r2			  ## descriptor.c:85:5
  115b02:    20 88             	rep 0x6 0x9 {			  ## descriptor.c:85:5
  115b04:    d0 ee a1 30       		r3 = b[r10++=0x1] (u)			  ## descriptor.c:85:5
  115b08:    f3 07             		b[r7++=0x1] = r3
                               	}			  ## descriptor.c:85:5
  115b0a:    0a e1 09 20       	r10 = r2 + 0x9			  ## descriptor.c:85:5
  115b0e:    c7 ff c2 5b 11 00 	r7 = 0x115bc2 <sMassDescriptor : 115bc2 >			  ## msd.c:119:5
  115b14:    20 96             	rep 0x6 0x17 {			  ## msd.c:119:5
  115b16:    73 07             		r3 = b[r7++=0x1] (u)			  ## msd.c:119:5
  115b18:    d2 ee a1 30       		b[r10++=0x1] = r3
                               	}			  ## msd.c:119:5
  115b1c:    47 20             	r7 = 0x0			  ## msd.c:120:12
  115b1e:    af 4b             	b[r2+0xb] = r7			  ## msd.c:120:12
  115b20:    c3 ff a2 57 11 00 	r3 = 0x1157a2 <msd_itf_hander : 1157a2 >			  ## usb_setup.c:143:31
  115b26:    d0 ec 91 30       	[r9+0x0] = r3			  ## usb_setup.c:143:31
  115b2a:    4b 20             	r3 = 0x20			  ## usb_setup.c:143:31
  115b2c:    ab 42             	b[r2+0x2] = r3			  ## descriptor.c:99:10
  115b2e:    af 43             	b[r2+0x3] = r7			  ## descriptor.c:100:10
  115b30:    47 21             	r7 = 0x1			  ## descriptor.c:101:10
  115b32:    af 44             	b[r2+0x4] = r7			  ## descriptor.c:101:10
  115b34:    04 85             	goto 0xa <.GJTIE98_0_0_+0x162 : 115b40 >			  ## descriptor.c:101:10
  115b36:    c3 ff 04 03 09 04 	r3 = 0x4090304 <__stub_LZ4_decompress_safe_continue+0x3F78308 : 4090304 >			  ## descriptor.c:75:5
  115b3c:    a3 60             	[r2+0x0] = r3			  ## descriptor.c:75:5
  115b3e:    43 24             	r3 = 0x4			  ## descriptor.c:75:5
  115b40:    d0 ec 8d 20       	[r8+0xc] = r2
  115b44:    d0 e1 00 0b       	r1_r0 >>= 0x30			  ## usb_setup.c:190:5
  115b48:    32 16             	r2 = r3			  ## usb_setup.c:90:13
  115b4a:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:13
  115b4e:    02 16             		r2 = r0
                               	}			  ## usb_setup.c:90:13
  115b50:    50 ed 83 20       	h[r8+0x2] = r2			  ## usb_setup.c:89:32
  115b54:    42 21             	r2 = 0x1			  ## usb_setup.c:90:36
  115b56:    90 ec 00 03       	if (r0 <= r3) {			  ## usb_setup.c:90:36
  115b5a:    42 20             		r2 = 0x0
                               	}			  ## usb_setup.c:90:36
  115b5c:    52 ee 86 20       	b[r8+0x6] = r2			  ## usb_setup.c:90:36
  115b60:    50 20             	r0 = 0x40			  ## usb_phy.c:116:5
  115b62:    bf ea 56 fe       	call -0x354 <usb_write_csr0 : 115812 >			  ## usb_phy.c:116:5
  115b66:    50 ee 81 00       	r0 = b[r8+0x1] (u)			  ## usb_setup.c:213:40
  115b6a:    80 f8 02 02       	if (r0 != 0x1) goto 0x4 <.GJTIE98_0_0_+0x194 : 115b72 >			  ## usb_setup.c:213:40
  115b6e:    bf ea 62 fe       	call -0x33c <ep0_stage_tx : 115836 >
  115b72:    c5 19             	r5 &= r4			  ## usb_onchip.c:40:13
  115b74:    44 21             	r4 = 0x1			  ## usb_onchip.c:40:13
  115b76:    c7 ff 90 14 01 00 	r7 = 0x11490 <usb_interrupt_tx : 11490 >			  ## usb_onchip.c:40:13
  115b7c:    04 8a             	goto 0x14 <.GJTIE98_0_0_+0x1B4 : 115b92 >			  ## usb_onchip.c:40:13
  115b7e:    94 e1 62 04       	r0 = r6 & (1 << r4)			  ## usb_onchip.c:57:13
  115b82:    00 46             	if (r0 == 0) goto 0xc <.GJTIE98_0_0_+0x1B2 : 115b90 >			  ## usb_onchip.c:57:13
  115b84:    d8 ec 7a 14       	r1 = [r7+r4<<2]			  ## usb_onchip.c:58:17
  115b88:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:58:17
  115b8c:    40 16             		r0 = r4			  ## usb_onchip.c:59:17
  115b8e:    c1 00             		call r1
                               	}			  ## usb_onchip.c:59:17
  115b90:    c4 21             	r4 += 0x1			  ## usb_onchip.c:56:37
  115b92:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE98_0_0_+0x1A0 : 115b7e >			  ## usb_onchip.c:56:5
  115b96:    44 21             	r4 = 0x1
  115b98:    c6 ff ac 14 01 00 	r6 = 0x114ac <usb_interrupt_rx : 114ac >
  115b9e:    04 8a             	goto 0x14 <.GJTIE98_0_0_+0x1D6 : 115bb4 >
  115ba0:    94 e1 52 04       	r0 = r5 & (1 << r4)			  ## usb_onchip.c:64:13
  115ba4:    00 46             	if (r0 == 0) goto 0xc <.GJTIE98_0_0_+0x1D4 : 115bb2 >			  ## usb_onchip.c:64:13
  115ba6:    d8 ec 6a 14       	r1 = [r6+r4<<2]			  ## usb_onchip.c:65:17
  115baa:    b1 e8 00 40       	if (r1 != 0x0) {			  ## usb_onchip.c:65:17
  115bae:    40 16             		r0 = r4			  ## usb_onchip.c:66:17
  115bb0:    c1 00             		call r1
                               	}			  ## usb_onchip.c:66:17
  115bb2:    c4 21             	r4 += 0x1			  ## usb_onchip.c:63:37
  115bb4:    84 f8 f4 0f       	if (r4 != 0x7) goto -0x18 <.GJTIE98_0_0_+0x1C2 : 115ba0 >
  115bb8:    02 82             	sp += 0x8
  115bba:    d4 e8 ff 3f       	{r13-r0} = [sp++]			  ## usb_onchip.c:71:1
  115bbe:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_onchip.c:71:1
  115bc0:    81 00             	rti			  ## usb_onchip.c:71:1


sMassDescriptor:
  115bc2:	 09 04 00 00 02 08 06 50         .......P
  115bca:	 00 07 05 81 02 40 00 01         .....@..
  115bd2:	 07 05 01 02 40 00 01            .


SCSIInquiryData:
  115bd9:	 00 80 02 02 20 00 00 00         .... ...
  115be1:	 42 52 32 35 20 20 20 20         BR25    
  115be9:	 55 42 4f 4f 54 31 2e 30         UBOOT1.0
  115bf1:	 30 20 20 20 20 20 20 20         0       
  115bf9:	 31 2e 30 30                     1.00


scsi_mode_sense:
  115bfd:	 03 00 00 00                     ....


sDeviceDescriptor:
  115c01:	 12 01 10 01 00 00 00 40         .......@
  115c09:	 4a 4c 42 25 00 03 01 02         JLB%....
  115c11:	 00 01                           ..B%..


MANUFACTURE_STR:
  115c13:	 1c 03 42 00 52 00 32 00         ..B.R.2.
  115c1b:	 35 00 55 00 42 00 4f 00         5.U.B.O.
  115c23:	 4f 00 54 00 31 00 2e 00         O.T.1...
  115c2b:	 30 00 30 00                     0.0.


sConfigDescriptor:
  115c2f:	 09 02 20 00 01 01 00 80         .. .....
  115c37:	 c8                              .. ....


usb_code_end:
  115c38:    ed ff a0 0c 01 00 	ssp = 0x10ca0			  ## startup.S:38:0
  115c3e:    41 14             	sp = ssp			  ## startup.S:39:0
  115c40:    ec ff a0 10 01 00 	usp = 0x110a0			  ## startup.S:40:0
  115c46:    80 14             	r1_r0 = 0			  ## startup.S:42:0
  115c48:    82 14             	r3_r2 = 0			  ## startup.S:43:0
  115c4a:    84 14             	r5_r4 = 0			  ## startup.S:44:0
  115c4c:    86 14             	r7_r6 = 0			  ## startup.S:45:0
  115c4e:    88 14             	r9_r8 = 0			  ## startup.S:46:0
  115c50:    8a 14             	r11_r10 = 0			  ## startup.S:47:0
  115c52:    8c 14             	r13_r12 = 0			  ## startup.S:48:0
  115c54:    8e 14             	r15_r14 = 0			  ## startup.S:49:0
  115c56:    64 e0 80 05       	psr = r0			  ## startup.S:51:0
  115c5a:    64 e0 80 01       	rete = r0			  ## startup.S:52:0
  115c5e:    64 e0 80 02       	retx = r0			  ## startup.S:53:0
  115c62:    64 e0 80 03       	rets = r0			  ## startup.S:54:0
  115c66:    64 e0 80 00       	reti = r0			  ## startup.S:55:0
  115c6a:    80 ea 58 0a       	call 0x14b0 <switch_to_hrc_asm : 11711e >			  ## startup.S:57:0
  115c6e:    e0 ff 76 5c 11 00 	reti = 0x115c76			  ## startup.S:59:0
  115c74:    81 00             	rti			  ## startup.S:60:0


_user_mode:
  115c76:    80 ea 5a 01       	call 0x2b4 <startup_init1 : 115f2e >			  ## startup.S:64:0
  115c7a:    40 20             	r0 = 0x0			  ## startup.S:66:0
  115c7c:    c1 ff a0 08 01 00 	r1 = 0x108a0 <stack_bss_begin : 108a0 >			  ## startup.S:67:0
  115c82:    c2 ff 00 08 00 00 	r2 = 0x800 <stack_bss_size : 800 >			  ## startup.S:68:0
  115c88:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:69:0
  115c8a:    02 03             	rep 0x2 r2 {			  ## startup.S:71:0
  115c8c:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:72:0
  115c8e:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x14 : 115c8a >			  ## startup.S:73:0
  115c92:    40 20             	r0 = 0x0			  ## startup.S:76:0
  115c94:    c1 ff c0 13 01 00 	r1 = 0x113c0 <var_bss_begin : 113c0 >			  ## startup.S:77:0
  115c9a:    c2 ff 60 01 00 00 	r2 = 0x160 <var_bss_size : 160 >			  ## startup.S:78:0
  115ca0:    a2 a2             	r2 = r2 >> 0x2			  ## startup.S:79:0
  115ca2:    02 03             	rep 0x2 r2 {			  ## startup.S:81:0
  115ca4:    90 05             		[r1++=0x4] = r0
                               	}			  ## startup.S:82:0
  115ca6:    02 fc fc 01       	if (r2 > 0x0) goto -0x8 <_user_mode+0x2C : 115ca2 >			  ## startup.S:83:0
  115caa:    c0 ea 7b 08       	goto 0x10f6 <main : 116da4 >			  ## startup.S:86:0
  115cae:    00 00             	nop


norflash_check_in.spi0_porta_config:
  115cb0:	 00 00 00 00                     ....


norflash_check_in.spi0_portb_config:
  115cb4:	 08 00 00 00                     ....


iCos_Tab:
  115cb8:	 cd fc 0f 00 00 00 00 00         ........
  115cc0:	 73 79 73 00 6f 73 63 00         


ack_cmd:
  115cc8:	 55 aa 01 20 22 75 61 72         U.. "uar
  115cd0:	 74 00 00 00                     t...


spi_flash_io_nor:
  115cd4:	 e0 1b 03 00 00 00 00 00         ........
  115cdc:	 00 00 00 00 50 76 11 00         


nor_flash_boot_table:
  115ce4:	 00 10 00 00 00 00 01 00         ........
  115cec:	 00 00 08 00 00 00 10 00         ........
  115cf4:	 28 6e 75 6c 6c 29 00            (


CrcDecode.keylcode:
  115cfb:	 c3 cf c0 e8 ce d2 b0 ae         ........
  115d03:	 c4 e3 a3 ac d3 f1 c1 d6         ........
  115d0b:	 00                              .......


p33_buf:
  115d0c:    c1 ff 08 3e 1e 00 	r1 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:8:0
  115d12:    90 61             	[r1+0x4] = r0			  ## p33.c:9:21
  115d14:    00 ef 10 10       	[r1+0x0] |= 0x10			  ## p33.c:10:21
  115d18:    10 60             	r0 = [r1+0x0] 			  ## p33.c:12:20
  115d1a:    50 e8 fd 0b       	if ((r0 & 0x2) != 0) goto -0x6 <p33_buf+0xC : 115d18 >			  ## p33.c:12:5
  115d1e:    10 61             	r0 = [r1+0x4] 			  ## p33.c:13:20
  115d20:    00 17             	r0 = r0.b0 (u)			  ## p33.c:13:5
  115d22:    80 00             	rts			  ## p33.c:13:5


p33_tx_1byte:
  115d24:    74 04             	[--sp] = {rets, r4}			  ## p33.c:44:0
  115d26:    12 16             	r2 = r1			  ## p33.c:44:0
  115d28:    03 16             	r3 = r0			  ## p33.c:44:0
  115d2a:    b9 17             	r1 = r3.l (s)			  ## p33.c:44:0
  115d2c:    bf ea 78 e6       	call -0x3310 <os_code_begin : 112a20 >			  ## p33.c:45:5
  115d30:    c4 ff 08 3e 1e 00 	r4 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:45:5
  115d36:    31 ed 00 50       	ifs (r1 >= 0x0) {			  ## p33.c:45:5
  115d3a:    c0 ef 80 4f       		[r4+0x0] &= 0xFFFFFEFF			  ## p33.c:45:5
  115d3e:    40 21             		r0 = 0x1
                               	} else {			  ## p33.c:45:5
  115d40:    40 e0 01 01       		r0 = 0x101
                               	}			  ## p33.c:45:5
  115d44:    64 e8 00 40       	[r4+0x0] |= r0			  ## p33.c:45:5
  115d48:    b0 e1 08 34       	r0 = uextra(r3, p:0x8, l:0x2)			  ## p33.c:46:5
  115d4c:    61 9f             	call -0x42 <p33_buf : 115d0c >			  ## p33.c:46:5
  115d4e:    70 e1 7f 3c       	r0 = r3 & 0xFFFF00FF			  ## p33.c:47:5
  115d52:    61 9c             	call -0x48 <p33_buf : 115d0c >			  ## p33.c:47:5
  115d54:    20 16             	r0 = r2			  ## p33.c:48:5
  115d56:    61 9a             	call -0x4c <p33_buf : 115d0c >			  ## p33.c:48:5
  115d58:    40 e0 fe fe       	r0 = -0x102			  ## p33.c:49:5
  115d5c:    64 e8 02 40       	[r4+0x0] &= r0			  ## p33.c:49:5
  115d60:    34 04             	{rets, r4} = [sp++]			  ## p33.c:49:5
  115d62:    ff ea 64 e6       	goto -0x3338 <local_irq_enable : 112a2e >			  ## p33.c:49:5


exception_analyze:
  115d66:    c1 ff e4 1c 03 00 	r1 = 0x31ce4 <exception_irq_hook : 31ce4 >			  ## boot_init.c:38:0
  115d6c:    11 60             	r1 = [r1+0x0] 			  ## boot_init.c:39:9
  115d6e:    b1 e8 00 00       	if (r1 != 0x0) {			  ## boot_init.c:39:9
  115d72:    c1 00             		call r1
                               	}			  ## boot_init.c:40:9
  115d74:    bf ea d0 db       	call -0x4860 <chip_reset : 111518 >			  ## boot_init.c:43:5


p33_rx_1byte:
  115d78:    10 04             	[--sp] = rets			  ## p33.c:53:0
  115d7a:    02 16             	r2 = r0			  ## p33.c:53:0
  115d7c:    a9 17             	r1 = r2.l (s)			  ## p33.c:53:0
  115d7e:    bf ea 4f e6       	call -0x3362 <os_code_begin : 112a20 >			  ## p33.c:56:5
  115d82:    c3 ff 08 3e 1e 00 	r3 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:56:5
  115d88:    31 ed 00 50       	ifs (r1 >= 0x0) {			  ## p33.c:56:5
  115d8c:    c0 ef 80 3f       		[r3+0x0] &= 0xFFFFFEFF			  ## p33.c:56:5
  115d90:    40 21             		r0 = 0x1
                               	} else {			  ## p33.c:56:5
  115d92:    40 e0 01 01       		r0 = 0x101
                               	}			  ## p33.c:56:5
  115d96:    64 e8 00 30       	[r3+0x0] |= r0			  ## p33.c:56:5
  115d9a:    a0 a8             	r0 = r2 >> 0x8			  ## p33.c:57:22
  115d9c:    30 27             	r0 |= 0x80			  ## p33.c:57:13
  115d9e:    60 e1 83 00       	r0 = r0 & 0x83			  ## p33.c:57:5
  115da2:    51 94             	call -0x98 <p33_buf : 115d0c >			  ## p33.c:57:5
  115da4:    70 e1 7f 2c       	r0 = r2 & 0xFFFF00FF			  ## p33.c:58:5
  115da8:    51 91             	call -0x9e <p33_buf : 115d0c >			  ## p33.c:58:5
  115daa:    50 3e             	r0 = 0x5e			  ## p33.c:59:12
  115dac:    51 8f             	call -0xa2 <p33_buf : 115d0c >			  ## p33.c:59:12
  115dae:    41 e0 fe fe       	r1 = -0x102			  ## p33.c:60:5
  115db2:    64 e8 02 31       	[r3+0x0] &= r1			  ## p33.c:60:5
  115db6:    02 16             	r2 = r0			  ## p33.c:59:12
  115db8:    bf ea 39 e6       	call -0x338e <local_irq_enable : 112a2e >			  ## p33.c:60:5
  115dbc:    20 16             	r0 = r2			  ## p33.c:61:5
  115dbe:    00 04             	pc = [sp++]			  ## p33.c:61:5


HWI_Install:
  115dc0:    74 04             	[--sp] = {rets, r4}			  ## irq.c:15:0
  115dc2:    c3 ff 00 1f 03 00 	r3 = 0x31f00 <_IRQ_MEM_ADDR : 31f00 >			  ## irq.c:19:5
  115dc8:    d8 ec 3b 10       	[r3+r0<<2] = r1			  ## irq.c:19:20
  115dcc:    01 a2             	r1 = r0 << 0x2			  ## irq.c:17:41
  115dce:    61 e1 1c 10       	r1 = r1 & 0x1C			  ## irq.c:17:41
  115dd2:    43 2f             	r3 = 0xf			  ## irq.c:17:41
  115dd4:    13 1a             	r3 <<= r1			  ## irq.c:24:35
  115dd6:    80 a3             	r0 = r0 >> 0x3			  ## irq.c:16:36
  115dd8:    c4 ff 00 f1 10 00 	r4 = 0x10f100 <RAM_LIMIT_H+0xDD100 : 10f100 >			  ## irq.c:28:27
  115dde:    a4 e1 14 01       	r4 <= insert(r0, p:0x2, l:0x5)			  ## irq.c:28:27
  115de2:    bf ea 1d e6       	call -0x33c6 <os_code_begin : 112a20 >			  ## irq.c:22:5
  115de6:    40 60             	r0 = [r4+0x0] 			  ## irq.c:28:27
  115de8:    90 e1 03 03       	r0 = r0 & ~r3			  ## irq.c:28:46
  115dec:    22 a1             	r2 = r2 << 0x1			  ## irq.c:23:49
  115dee:    62 e1 0e 20       	r2 = r2 & 0xE			  ## irq.c:23:49
  115df2:    32 20             	r2 |= 0x1			  ## irq.c:23:55
  115df4:    c8 e1 20 11       	r1 = r2 << r1			  ## irq.c:25:39
  115df8:    10 19             	r0 |= r1			  ## irq.c:28:58
  115dfa:    c0 60             	[r4+0x0] = r0			  ## irq.c:28:24
  115dfc:    bf ea 17 e6       	call -0x33d2 <local_irq_enable : 112a2e >			  ## irq.c:30:5
  115e00:    54 04             	{pc, r4} = [sp++]			  ## irq.c:31:1


p33_or_1byte:
  115e02:    74 04             	[--sp] = {rets, r4}			  ## p33.c:35:0
  115e04:    12 16             	r2 = r1			  ## p33.c:35:0
  115e06:    03 16             	r3 = r0			  ## p33.c:35:0
  115e08:    b9 17             	r1 = r3.l (s)			  ## p33.c:35:0
  115e0a:    bf ea 09 e6       	call -0x33ee <os_code_begin : 112a20 >			  ## p33.c:36:5
  115e0e:    c4 ff 08 3e 1e 00 	r4 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:36:5
  115e14:    31 ed 00 50       	ifs (r1 >= 0x0) {			  ## p33.c:36:5
  115e18:    c0 ef 80 4f       		[r4+0x0] &= 0xFFFFFEFF			  ## p33.c:36:5
  115e1c:    40 21             		r0 = 0x1
                               	} else {			  ## p33.c:36:5
  115e1e:    40 e0 01 01       		r0 = 0x101
                               	}			  ## p33.c:36:5
  115e22:    64 e8 00 40       	[r4+0x0] |= r0			  ## p33.c:36:5
  115e26:    b0 e1 08 34       	r0 = uextra(r3, p:0x8, l:0x2)			  ## p33.c:37:13
  115e2a:    30 25             	r0 |= 0x20			  ## p33.c:37:13
  115e2c:    bf ea 6e ff       	call -0x124 <p33_buf : 115d0c >			  ## p33.c:37:5
  115e30:    70 e1 7f 3c       	r0 = r3 & 0xFFFF00FF			  ## p33.c:38:5
  115e34:    bf ea 6a ff       	call -0x12c <p33_buf : 115d0c >			  ## p33.c:38:5
  115e38:    20 16             	r0 = r2			  ## p33.c:39:5
  115e3a:    bf ea 67 ff       	call -0x132 <p33_buf : 115d0c >			  ## p33.c:39:5
  115e3e:    40 e0 fe fe       	r0 = -0x102			  ## p33.c:40:5
  115e42:    64 e8 02 40       	[r4+0x0] &= r0			  ## p33.c:40:5
  115e46:    34 04             	{rets, r4} = [sp++]			  ## p33.c:40:5
  115e48:    ff ea f1 e5       	goto -0x341e <local_irq_enable : 112a2e >			  ## p33.c:40:5


p33_and_1byte:
  115e4c:    74 04             	[--sp] = {rets, r4}			  ## p33.c:26:0
  115e4e:    12 16             	r2 = r1			  ## p33.c:26:0
  115e50:    03 16             	r3 = r0			  ## p33.c:26:0
  115e52:    b9 17             	r1 = r3.l (s)			  ## p33.c:26:0
  115e54:    bf ea e4 e5       	call -0x3438 <os_code_begin : 112a20 >			  ## p33.c:27:5
  115e58:    c4 ff 08 3e 1e 00 	r4 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:27:5
  115e5e:    31 ed 00 50       	ifs (r1 >= 0x0) {			  ## p33.c:27:5
  115e62:    c0 ef 80 4f       		[r4+0x0] &= 0xFFFFFEFF			  ## p33.c:27:5
  115e66:    40 21             		r0 = 0x1
                               	} else {			  ## p33.c:27:5
  115e68:    40 e0 01 01       		r0 = 0x101
                               	}			  ## p33.c:27:5
  115e6c:    64 e8 00 40       	[r4+0x0] |= r0			  ## p33.c:27:5
  115e70:    b0 e1 08 34       	r0 = uextra(r3, p:0x8, l:0x2)			  ## p33.c:28:13
  115e74:    30 26             	r0 |= 0x40			  ## p33.c:28:13
  115e76:    bf ea 49 ff       	call -0x16e <p33_buf : 115d0c >			  ## p33.c:28:5
  115e7a:    70 e1 7f 3c       	r0 = r3 & 0xFFFF00FF			  ## p33.c:29:5
  115e7e:    bf ea 45 ff       	call -0x176 <p33_buf : 115d0c >			  ## p33.c:29:5
  115e82:    20 16             	r0 = r2			  ## p33.c:30:5
  115e84:    bf ea 42 ff       	call -0x17c <p33_buf : 115d0c >			  ## p33.c:30:5
  115e88:    40 e0 fe fe       	r0 = -0x102			  ## p33.c:31:5
  115e8c:    64 e8 02 40       	[r4+0x0] &= r0			  ## p33.c:31:5
  115e90:    34 04             	{rets, r4} = [sp++]			  ## p33.c:31:5
  115e92:    ff ea cc e5       	goto -0x3468 <local_irq_enable : 112a2e >			  ## p33.c:31:5


spi_cs_pu:
  115e96:    74 04             	[--sp] = {rets, r4}			  ## spi0.c:199:0
  115e98:    c1 ff fa 1b 03 00 	r1 = 0x31bfa <g_spi_boot_port : 31bfa >			  ## boot_init.c:92:12
  115e9e:    1a 40             	r2 = b[r1+0x0] (u)			  ## boot_init.c:92:12
  115ea0:    c1 ff 90 50 1e 00 	r1 = 0x1e5090 <__stub_LZ4_decompress_safe_continue+0xCD094 : 1e5090 >
  115ea6:    52 e8 0a 10       	if ((r2 & 0x4) == 0) goto 0x14 <spi_cs_pu+0x28 : 115ebe >
  115eaa:    d0 ec 10 34       	r3 = [r1+0x40]
  115eae:    74 e1 08 30       	r4 = r3 & 0xFFFFFFF7			  ## spi0.c:205:26
  115eb2:    33 23             	r3 |= 0x8			  ## spi0.c:203:26
  115eb4:    30 e8 00 00       	if (r0 == 0x0) {			  ## spi0.c:203:26
  115eb8:    43 16             		r3 = r4
                               	}			  ## spi0.c:202:13
  115eba:    d0 ec 11 34       	[r1+0x40] = r3			  ## spi0.c:202:13
  115ebe:    52 e8 08 18       	if ((r2 & 0x8) == 0) goto 0x10 <spi_cs_pu+0x3C : 115ed2 >
  115ec2:    12 60             	r2 = [r1+0x0] 
  115ec4:    73 e1 02 20       	r3 = r2 & 0xFFFFFFFD			  ## spi0.c:213:26
  115ec8:    32 21             	r2 |= 0x2			  ## spi0.c:211:26
  115eca:    30 e8 00 00       	if (r0 == 0x0) {			  ## spi0.c:211:26
  115ece:    32 16             		r2 = r3
                               	}			  ## spi0.c:210:13
  115ed0:    92 60             	[r1+0x0] = r2			  ## spi0.c:210:13
  115ed2:    54 04             	{pc, r4} = [sp++]			  ## spi0.c:217:1


udelay:
  115ed4:    c1 ff 00 04 1e 00 	r1 = 0x1e0400 <__stub_LZ4_decompress_safe_continue+0xC8404 : 1e0400 >			  ## timer.c:11:0
  115eda:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:17:20
  115ede:    41 ea 00 10       	[r1+0x4] = 0x0			  ## timer.c:18:20
  115ee2:    e0 e1 14 00       	r0 = r0 * 0x14			  ## timer.c:19:40
  115ee6:    90 62             	[r1+0x8] = r0			  ## timer.c:19:20
  115ee8:    40 ea 0d 10       	[r1+0x0] = 0xD			  ## timer.c:20:20
  115eec:    10 60             	r0 = [r1+0x0] 			  ## timer.c:21:24
  115eee:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <udelay+0x18 : 115eec >			  ## timer.c:21:5
  115ef2:    40 ea 80 1c       	[r1+0x0] = 0x4000			  ## timer.c:22:20
  115ef6:    80 00             	rts			  ## timer.c:24:1


flash_poweron:
  115ef8:    10 04             	[--sp] = rets			  ## norflash.c:386:0
  115efa:    40 21             	r0 = 0x1			  ## norflash.c:389:5
  115efc:    61 8c             	call -0x68 <spi_cs_pu : 115e96 >			  ## norflash.c:389:5
  115efe:    c2 ff c0 50 1e 00 	r2 = 0x1e50c0 <__stub_LZ4_decompress_safe_continue+0xCD0C4 : 1e50c0 >			  ## norflash.c:389:5
  115f04:    c5 ef 10 20       	[r2+0x14] &= 0xFFFFFFEF			  ## norflash.c:392:19
  115f08:    04 ef 10 20       	[r2+0x10] |= 0x10			  ## norflash.c:393:19
  115f0c:    02 ef 10 20       	[r2+0x8] |= 0x10			  ## norflash.c:394:19
  115f10:    c7 ef 10 20       	[r2+0x1c] &= 0xFFFFFFEF			  ## norflash.c:396:19
  115f14:    c6 ef 10 20       	[r2+0x18] &= 0xFFFFFFEF			  ## norflash.c:397:19
  115f18:    00 ef 10 20       	[r2+0x0] |= 0x10			  ## norflash.c:398:19
  115f1c:    c2 ef 10 20       	[r2+0x8] &= 0xFFFFFFEF			  ## norflash.c:399:19
  115f20:    40 34             	r0 = 0x14			  ## norflash.c:401:5
  115f22:    61 98             	call -0x50 <udelay : 115ed4 >			  ## norflash.c:401:5
  115f24:    07 ef 10 20       	[r2+0x1c] |= 0x10			  ## norflash.c:403:19
  115f28:    06 ef 10 20       	[r2+0x18] |= 0x10			  ## norflash.c:404:19
  115f2c:    00 04             	pc = [sp++]			  ## norflash.c:405:1


startup_init1:
  115f2e:    76 04             	[--sp] = {rets, r6-r4}			  ## boot_init.c:95:0
  115f30:    64 e0 00 0b       	r0 = icfg			  ## boot_init.c:97:5
  115f34:    30 29             	r0 |= 0x200			  ## boot_init.c:98:9
  115f36:    64 e0 80 0b       	icfg = r0			  ## boot_init.c:99:5
  115f3a:    bf ea 81 e5       	call -0x34fe <irq_init : 112a40 >			  ## boot_init.c:101:5
  115f3e:    bf ea 6f e5       	call -0x3522 <os_code_begin : 112a20 >			  ## boot_init.c:102:5
  115f42:    bf ea 74 e5       	call -0x3518 <local_irq_enable : 112a2e >			  ## boot_init.c:103:5
  115f46:    c5 ff f8 1b 03 00 	r5 = 0x31bf8 <g_soft_flag : 31bf8 >			  ## boot_init.c:103:5
  115f4c:    40 20             	r0 = 0x0			  ## boot_init.c:105:17
  115f4e:    d8 40             	b[r5+0x0] = r0			  ## boot_init.c:105:17
  115f50:    c6 ff f9 1b 03 00 	r6 = 0x31bf9 <g_soft_flag : 31bf8 >			  ## boot_init.c:105:17
  115f56:    e8 40             	b[r6+0x0] = r0			  ## boot_init.c:106:18
  115f58:    c0 ff fc 1b 03 00 	r0 = 0x31bfc <boot_arg_list : 31bfc >			  ## clock.c:228:28
  115f5e:    41 23             	r1 = 0x3			  ## clock.c:224:28
  115f60:    c2 ff 00 2d 31 01 	r2 = 0x1312d00 <__stub_LZ4_decompress_safe_continue+0x11FAD04 : 1312d00 >			  ## clock.c:228:28
  115f66:    23 d6             	r3 = r2  #			  ## clock.c:228:28
  115f68:    89 41             		 b[r0+0x1] = r1			  ## clock.c:224:28
  115f6a:    50 ec 05 20       	d[r0+0x4] = r3_r2			  ## clock.c:228:28
  115f6e:    48 30             	r0 = 0x30			  ## p33.c:105:15
  115f70:    bf ea 02 ff       	call -0x1fc <p33_rx_1byte : 115d78 >			  ## p33.c:105:15
  115f74:    50 e8 fb 39       	if ((r0 & 0x80) == 0) goto -0xa <startup_init1+0x40 : 115f6e >			  ## p33.c:106:13
  115f78:    c0 ff e4 1c 03 00 	r0 = 0x31ce4 <exception_irq_hook : 31ce4 >			  ## boot_init.c:49:24
  115f7e:    40 ea 00 00       	[r0+0x0] = 0x0			  ## boot_init.c:49:24
  115f82:    c1 ff 04 00 11 00 	r1 = 0x110004 <exception_irq_handler : 110004 >			  ## boot_init.c:51:5
  115f88:    40 21             	r0 = 0x1			  ## boot_init.c:51:5
  115f8a:    42 27             	r2 = 0x7			  ## boot_init.c:51:5
  115f8c:    bf ea 18 ff       	call -0x1d0 <HWI_Install : 115dc0 >			  ## boot_init.c:51:5
  115f90:    48 32             	r0 = 0x32			  ## p33_api.h:114:11
  115f92:    bf ea f1 fe       	call -0x21e <p33_rx_1byte : 115d78 >			  ## p33_api.h:114:11
  115f96:    d8 40             	b[r5+0x0] = r0			  ## boot_init.c:116:17
  115f98:    48 33             	r0 = 0x33			  ## p33_api.h:114:11
  115f9a:    bf ea ed fe       	call -0x226 <p33_rx_1byte : 115d78 >			  ## p33_api.h:114:11
  115f9e:    04 16             	r4 = r0			  ## p33_api.h:114:11
  115fa0:    ec 40             	b[r6+0x0] = r4			  ## boot_init.c:117:18
  115fa2:    48 31             	r0 = 0x31			  ## p33_api.h:114:11
  115fa4:    bf ea e8 fe       	call -0x230 <p33_rx_1byte : 115d78 >			  ## p33_api.h:114:11
  115fa8:    0a 17             	r2 = r0.b0 (s)			  ## p33_api.h:114:11
  115faa:    40 2c             	r0 = 0xc			  ## boot_init.c:80:9
  115fac:    41 2c             	r1 = 0xc			  ## boot_init.c:80:9
  115fae:    32 ed 00 00       	ifs (r2 >= 0x0) {			  ## boot_init.c:80:9
  115fb2:    59 40             		r1 = b[r5+0x0] (u)
                               	}			  ## boot_init.c:66:16
  115fb4:    31 ea 0c 00       	if ((r1 & 0xC) != 0) {			  ## boot_init.c:66:16
  115fb8:    10 16             		r0 = r1
                               	}			  ## boot_init.c:86:9
  115fba:    c1 ff fa 1b 03 00 	r1 = 0x31bfa <g_spi_boot_port : 31bfa >			  ## boot_init.c:87:25
  115fc0:    98 40             	b[r1+0x0] = r0			  ## boot_init.c:87:25
  115fc2:    54 e8 10 02       	if ((r4 & 0x1) != 0) goto 0x20 <startup_init1+0xB8 : 115fe6 >			  ## boot_init.c:87:25
  115fc6:    60 20             	r0 = 0x80			  ## wdt.c:4:5
  115fc8:    79 2f             	r1 = 0xef			  ## wdt.c:4:5
  115fca:    bf ea 1a ff       	call -0x1cc <p33_or_1byte : 115e02 >			  ## wdt.c:4:5
  115fce:    60 20             	r0 = 0x80			  ## wdt.c:5:5
  115fd0:    41 2c             	r1 = 0xc			  ## wdt.c:5:5
  115fd2:    bf ea a7 fe       	call -0x2b2 <p33_tx_1byte : 115d24 >			  ## wdt.c:5:5
  115fd6:    60 20             	r0 = 0x80			  ## wdt.c:6:5
  115fd8:    71 3f             	r1 = 0xdf			  ## wdt.c:6:5
  115fda:    bf ea 37 ff       	call -0x192 <p33_and_1byte : 115e4c >			  ## wdt.c:6:5
  115fde:    60 20             	r0 = 0x80			  ## wdt.c:7:5
  115fe0:    41 30             	r1 = 0x10			  ## wdt.c:7:5
  115fe2:    bf ea 0e ff       	call -0x1e4 <p33_or_1byte : 115e02 >			  ## wdt.c:7:5
  115fe6:    c0 ff 00 51 1e 00 	r0 = 0x1e5100 <__stub_LZ4_decompress_safe_continue+0xCD104 : 1e5100 >
  115fec:    34 ea 02 00       	if ((r4 & 0x2) != 0) {
  115ff0:    c0 ef 10 00       		[r0+0x0] &= 0xFFFFFFEF
                               	}			  ## boot_init.c:130:25
  115ff4:    34 ea 08 00       	if ((r4 & 0x8) != 0) {			  ## boot_init.c:130:25
  115ff8:    c0 ef 20 00       		[r0+0x0] &= 0xFFFFFFDF
                               	}			  ## boot_init.c:134:25
  115ffc:    34 ea 04 00       	if ((r4 & 0x4) != 0) {			  ## boot_init.c:134:25
  116000:    00 ef 40 00       		[r0+0x0] |= 0x40
                               	}			  ## boot_init.c:138:25
  116004:    34 ea 10 00       	if ((r4 & 0x10) != 0) {			  ## boot_init.c:138:25
  116008:    00 ef 80 00       		[r0+0x0] |= 0x80
                               	}			  ## boot_init.c:142:25
  11600c:    68 2f             	r0 = 0xaf			  ## boot_init.c:164:5
  11600e:    79 3d             	r1 = 0xfd			  ## boot_init.c:164:5
  116010:    bf ea 1c ff       	call -0x1c8 <p33_and_1byte : 115e4c >			  ## boot_init.c:164:5
  116014:    bf ea 70 ff       	call -0x120 <flash_poweron : 115ef8 >			  ## boot_init.c:165:5
  116018:    c0 ff 00 41 1e 00 	r0 = 0x1e4100 <__stub_LZ4_decompress_safe_continue+0xCC104 : 1e4100 >
  11601e:    42 ea 00 00       	[r0+0x8] = 0x0			  ## boot_flash.c:62:24
  116022:    c1 ff ff ff 00 00 	r1 = 0xffff <text_size+0x7FFE : fffe >			  ## boot_flash.c:63:24
  116028:    81 61             	[r0+0x4] = r1			  ## boot_flash.c:63:24
  11602a:    40 ea 80 00       	[r0+0x0] = 0x80			  ## boot_flash.c:64:24
  11602e:    56 04             	{pc, r6-r4} = [sp++]			  ## boot_init.c:169:1


change_capture_mode:
  116030:    c1 ff 00 05 1e 00 	r1 = 0x1e0500 <__stub_LZ4_decompress_safe_continue+0xC8504 : 1e0500 >			  ## uart_key.c:71:0
  116036:    40 ef 01 10       	[r1+0x0] ^= 0x1			  ## uart_key.c:72:18
  11603a:    41 21             	r1 = 0x1			  ## uart_key.c:72:18
  11603c:    b0 e8 02 00       	if (r0 != 0x2) {			  ## uart_key.c:72:18
  116040:    41 22             		r1 = 0x2
                               	}			  ## uart_key.c:74:14
  116042:    c0 ff c0 13 01 00 	r0 = 0x113c0 <var_bss_begin : 113c0 >			  ## uart_key.c:74:14
  116048:    81 63             	[r0+0xc] = r1
  11604a:    80 00             	rts			  ## uart_key.c:79:1


reset_status:
  11604c:    c0 ff c0 13 01 00 	r0 = 0x113c0 <var_bss_begin : 113c0 >			  ## uart_key.c:93:0
  116052:    41 20             	r1 = 0x0			  ## uart_key.c:97:17
  116054:    89 60             	h[r0+0x0] = r1			  ## uart_key.c:94:13
  116056:    42 20             	r2 = 0x0			  ## uart_key.c:95:14
  116058:    43 20             	r3 = 0x0			  ## uart_key.c:95:14
  11605a:    50 ec 01 21       	d[r0+0x10] = r3_r2			  ## uart_key.c:95:14
  11605e:    81 66             	[r0+0x18] = r1			  ## uart_key.c:97:17
  116060:    80 00             	rts			  ## uart_key.c:98:1


mdelay:
  116062:    10 04             	[--sp] = rets			  ## timer.c:27:0
  116064:    02 16             	r2 = r0			  ## timer.c:27:0
  116066:    04 85             	goto 0xa <mdelay+0x10 : 116072 >			  ## timer.c:27:0
  116068:    40 e0 e8 03       	r0 = 0x3e8			  ## timer.c:29:9
  11606c:    bf ea 32 ff       	call -0x19c <udelay : 115ed4 >			  ## timer.c:29:9
  116070:    fa 3f             	r2 += -0x1			  ## timer.c:28:5
  116072:    f2 5a             	if (r2 != 0) goto -0xc <mdelay+0x6 : 116068 >			  ## timer.c:28:5
  116074:    00 04             	pc = [sp++]			  ## timer.c:31:1


clk_get:
  116076:    76 04             	[--sp] = {rets, r6-r4}			  ## clock.c:235:0
  116078:    04 16             	r4 = r0			  ## clock.c:235:0
  11607a:    c5 ff c0 5c 11 00 	r5 = 0x115cc0 <iCos_Tab+0x8 : 115cc0 >			  ## clock.c:235:0
  116080:    51 16             	r1 = r5			  ## clock.c:236:9
  116082:    bf ea b0 d9       	call -0x4ca0 <strcmp : 1113e6 >			  ## clock.c:236:9
  116086:    c6 ff fc 1b 03 00 	r6 = 0x31bfc <boot_arg_list : 31bfc >			  ## clock.c:236:9
  11608c:    00 50             	if (r0 == 0) goto 0x20 <clk_get+0x38 : 1160ae >			  ## clock.c:236:9
  11608e:    59 84             	r1 = r5 + 0x4			  ## clock.c:238:16
  116090:    40 16             	r0 = r4			  ## clock.c:238:16
  116092:    bf ea a8 d9       	call -0x4cb0 <strcmp : 1113e6 >			  ## clock.c:238:16
  116096:    00 4d             	if (r0 == 0) goto 0x1a <clk_get+0x3C : 1160b2 >			  ## clock.c:238:16
  116098:    59 8d             	r1 = r5 + 0xd			  ## clock.c:240:16
  11609a:    40 16             	r0 = r4			  ## clock.c:240:16
  11609c:    bf ea a3 d9       	call -0x4cba <strcmp : 1113e6 >			  ## clock.c:240:16
  1160a0:    b0 e8 00 10       	if (r0 != 0x0) {			  ## clock.c:240:16
  1160a4:    60 62             		r0 = [r6+0x8] 
                               	} else {			  ## clock.c:246:26
  1160a6:    c0 ff 00 36 6e 01 		r0 = 0x16e3600
                               	} <__stub_LZ4_decompress_safe_continue+0x15CB604 : 16e3600 >			  ## clock.c:240:16
  1160ac:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:240:16
  1160ae:    68 88             	r0 = r6 + 0x8
  1160b0:    04 81             	goto 0x2 <clk_get+0x3E : 1160b4 >
  1160b2:    68 84             	r0 = r6 + 0x4
  1160b4:    00 60             	r0 = [r0+0x0] 
  1160b6:    56 04             	{pc, r6-r4} = [sp++]			  ## clock.c:247:1


set_cap_timeout:
  1160b8:    74 04             	[--sp] = {rets, r4}			  ## boot_mode.c:32:0
  1160ba:    c4 ff 00 06 1e 00 	r4 = 0x1e0600 <__stub_LZ4_decompress_safe_continue+0xC8604 : 1e0600 >			  ## boot_mode.c:32:0
  1160c0:    40 ea 80 4c       	[r4+0x0] = 0x4000			  ## boot_mode.c:33:17
  1160c4:    41 ea 00 40       	[r4+0x4] = 0x0			  ## boot_mode.c:34:17
  1160c8:    c0 ff c0 5c 11 00 	r0 = 0x115cc0 <iCos_Tab+0x8 : 115cc0 >			  ## boot_mode.c:35:26
  1160ce:    61 93             	call -0x5a <clk_get : 116076 >			  ## boot_mode.c:35:26
  1160d0:    60 e0 7a 1c       	r1 = 0xFA00			  ## boot_mode.c:35:46
  1160d4:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## boot_mode.c:35:46
  1160d8:    e0 e1 0a 00       	r0 = r0 * 0xA			  ## boot_mode.c:35:22
  1160dc:    c0 62             	[r4+0x8] = r0			  ## boot_mode.c:35:17
  1160de:    00 ef 31 40       	[r4+0x0] |= 0x31			  ## boot_mode.c:36:17
  1160e2:    54 04             	{pc, r4} = [sp++]			  ## boot_mode.c:37:1


capture_isr:
  1160e4:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_key.c:108:0
  1160e6:    d8 e8 ff 03       	[--sp] = {r9-r0}			  ## uart_key.c:108:0
  1160ea:    c3 ff 00 05 1e 00 	r3 = 0x1e0500 <__stub_LZ4_decompress_safe_continue+0xC8504 : 1e0500 >			  ## uart_key.c:108:0
  1160f0:    00 ef 80 3c       	[r3+0x0] |= 0x4000			  ## uart_key.c:109:5
  1160f4:    31 62             	r1 = [r3+0x8] 			  ## uart_key.c:112:15
  1160f6:    c4 ff c0 13 01 00 	r4 = 0x113c0 <var_bss_begin : 113c0 >
  1160fc:    42 62             	r2 = [r4+0x8] 			  ## uart_key.c:115:21
  1160fe:    95 de             	r5 = r1 - r2  #			  ## uart_key.c:115:19
  116100:    c1 62             		 [r4+0x8] = r1			  ## uart_key.c:116:13
  116102:    40 63             	r0 = [r4+0xc] 			  ## uart_key.c:124:27
  116104:    00 f8 29 04       	if (r0 == 0x2) goto 0x52 <capture_isr+0x76 : 11615a >			  ## uart_key.c:124:9
  116108:    80 f8 2a 02       	if (r0 != 0x1) goto 0x54 <capture_isr+0x7C : 116160 >
  11610c:    40 23             	r0 = 0x3			  ## uart_key.c:125:9
  11610e:    41 90             	call -0xe0 <change_capture_mode : 116030 >			  ## uart_key.c:125:9
  116110:    40 64             	r0 = [r4+0x10] 			  ## uart_key.c:126:13
  116112:    10 46             	if (r0 == 0) goto 0x4c <capture_isr+0x7C : 116160 >			  ## uart_key.c:126:13
  116114:    09 1d             	r1 = r0 + r5			  ## uart_key.c:131:25
  116116:    32 e1 30 18       	r2 = r1 + -0x7d0			  ## uart_key.c:134:39
  11611a:    46 e0 31 75       	r6 = 0x7531			  ## uart_key.c:134:39
  11611e:    06 e9 19 20       	if (r2 >= r6) goto 0x32 <capture_isr+0x70 : 116154 >			  ## uart_key.c:134:39
  116122:    42 65             	r2 = [r4+0x14] 			  ## uart_key.c:142:13
  116124:    12 42             	if (r2 == 0) goto 0x44 <capture_isr+0x86 : 11616a >
  116126:    46 66             	r6 = [r4+0x18] 			  ## uart_key.c:147:21
  116128:    16 18             	r6 += r1			  ## uart_key.c:147:21
  11612a:    c6 66             	[r4+0x18] = r6			  ## uart_key.c:147:21
  11612c:    4f 60             	r7 = h[r4+0x0] (u)			  ## uart_key.c:148:17
  11612e:    c7 21             	r7 += 0x1			  ## uart_key.c:148:17
  116130:    b4 f0 12 92       	r9 = r1 - r2  #			  ## uart_key.c:25:18
  116134:    cf 60             		 h[r4+0x0] = r7			  ## uart_key.c:148:17
  116136:    b4 e0 22 81       	r8 = r2 - r1			  ## uart_key.c:23:18
  11613a:    92 ec 00 01       	if (r2 <= r1) {			  ## uart_key.c:23:18
  11613e:    98 16             		r8 = r9
                               	}			  ## uart_key.c:22:9
  116140:    f1 17             	r1 = r7.l (u)			  ## uart_key.c:151:58
  116142:    f4 e1 60 11       	r1 = r6 / r1 (u)			  ## uart_key.c:151:56
  116146:    e1 e1 0a 10       	r1 = r1 * 0xA			  ## uart_key.c:151:67
  11614a:    5a 24             	r2 = 0x64			  ## uart_key.c:151:72
  11614c:    f4 e1 10 12       	r1 = r1 / r2 (u)			  ## uart_key.c:151:72
  116150:    81 ec 0d 80       	if (r8 <= r1) goto 0x1a <capture_isr+0x8A : 11616e >			  ## uart_key.c:151:72
  116154:    bf ea 7a ff       	call -0x10c <reset_status : 11604c >
  116158:    04 84             	goto 0x8 <capture_isr+0x7E : 116162 >
  11615a:    40 22             	r0 = 0x2			  ## uart_key.c:186:9
  11615c:    bf ea 68 ff       	call -0x130 <change_capture_mode : 116030 >			  ## uart_key.c:186:9
  116160:    c5 64             	[r4+0x10] = r5
  116162:    d4 e8 ff 03       	{r9-r0} = [sp++]			  ## uart_key.c:191:1
  116166:    a9 04             	{psr, rets, reti} = [sp++]			  ## uart_key.c:191:1
  116168:    81 00             	rti			  ## uart_key.c:191:1
  11616a:    c1 65             	[r4+0x14] = r1			  ## uart_key.c:143:24
  11616c:    f7 9a             	goto -0xc <capture_isr+0x7E : 116162 >			  ## uart_key.c:143:24
  11616e:    e1 e1 03 50       	r1 = r5 * 0x3			  ## uart_key.c:158:28
  116172:    81 ec 09 00       	if (r0 <= r1) goto 0x12 <capture_isr+0xA4 : 116188 >			  ## uart_key.c:158:28
  116176:    e1 e1 05 50       	r1 = r5 * 0x5			  ## uart_key.c:159:28
  11617a:    01 e9 05 00       	if (r0 >= r1) goto 0xa <capture_isr+0xA4 : 116188 >			  ## uart_key.c:159:28
  11617e:    49 61             	r1 = h[r4+0x2] (u)			  ## uart_key.c:161:28
  116180:    40 21             	r0 = 0x1			  ## uart_key.c:161:28
  116182:    a0 e1 fc 10       	r0 <= insert(r1, p:0x1, l:0x1f)			  ## uart_key.c:161:46
  116186:    04 8a             	goto 0x14 <capture_isr+0xB8 : 11619c >			  ## uart_key.c:161:46
  116188:    e1 e1 03 00       	r1 = r0 * 0x3			  ## uart_key.c:162:31
  11618c:    05 e9 e2 11       	if (r1 >= r5) goto -0x3c <capture_isr+0x70 : 116154 >			  ## uart_key.c:162:31
  116190:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_key.c:163:30
  116194:    85 ec de 01       	if (r0 <= r5) goto -0x44 <capture_isr+0x70 : 116154 >			  ## uart_key.c:163:30
  116198:    48 61             	r0 = h[r4+0x2] (u)			  ## uart_key.c:165:28
  11619a:    00 a1             	r0 = r0 << 0x1			  ## uart_key.c:165:40
  11619c:    c8 61             	h[r4+0x2] = r0
  11619e:    41 f0 af 68       	r1 = 0x68af  #			  ## uart_key.c:171:20
  1161a2:    48 61             		 r0 = h[r4+0x2] (u)			  ## uart_key.c:171:23
  1161a4:    81 e8 0d 00       	if (r0 != r1) goto 0x1a <capture_isr+0xDE : 1161c2 >			  ## uart_key.c:171:13
  1161a8:    c0 ff 40 50 1e 00 	r0 = 0x1e5040 <__stub_LZ4_decompress_safe_continue+0xCD044 : 1e5040 >
  1161ae:    00 ef 20 00       	[r0+0x0] |= 0x20			  ## uart_key.c:173:27
  1161b2:    c2 ef 20 00       	[r0+0x8] &= 0xFFFFFFDF			  ## uart_key.c:174:27
  1161b6:    40 22             	r0 = 0x2			  ## uart_key.c:175:13
  1161b8:    bf ea 53 ff       	call -0x15a <mdelay : 116062 >			  ## uart_key.c:175:13
  1161bc:    40 ea 80 3c       	[r3+0x0] = 0x4000			  ## uart_key.c:83:18
  1161c0:    e7 90             	goto -0x60 <capture_isr+0x7E : 116162 >			  ## uart_key.c:83:18
  1161c2:    40 67             	r0 = [r4+0x1c] 			  ## uart_key.c:180:19
  1161c4:    09 81             	r1 = r0 + 0x1			  ## uart_key.c:180:19
  1161c6:    c1 67             	[r4+0x1c] = r1			  ## uart_key.c:180:19
  1161c8:    00 fc ca c7       	if (r0 > 0x63) goto -0x6c <capture_isr+0x7C : 116160 >			  ## uart_key.c:180:19
  1161cc:    bf ea 74 ff       	call -0x118 <set_cap_timeout : 1160b8 >			  ## uart_key.c:181:13
  1161d0:    e7 87             	goto -0x72 <capture_isr+0x7C : 116160 >			  ## uart_key.c:181:13


osc_clk_init:
  1161d2:    10 04             	[--sp] = rets			  ## clock.c:98:0
  1161d4:    40 22             	r0 = 0x2			  ## p33.c:77:5
  1161d6:    41 30             	r1 = 0x10			  ## p33.c:77:5
  1161d8:    bf ea 13 fe       	call -0x3da <p33_or_1byte : 115e02 >			  ## p33.c:77:5
  1161dc:    c0 ff 20 19 1e 00 	r0 = 0x1e1920 <__stub_LZ4_decompress_safe_continue+0xC9924 : 1e1920 >
  1161e2:    42 f0 00 e0       	r2 = -0x2000  #			  ## clock.c:90:5
  1161e6:    01 61             		 r1 = [r0+0x4] 			  ## clock.c:90:5
  1161e8:    a1 19             	r1 &= r2			  ## clock.c:90:5
  1161ea:    42 e0 06 07       	r2 = 0x706			  ## clock.c:90:5
  1161ee:    21 19             	r1 |= r2			  ## clock.c:90:5
  1161f0:    81 61             	[r0+0x4] = r1			  ## clock.c:90:5
  1161f2:    c1 ff ca 9c 19 33 	r1 = 0x33199cca <__stub_LZ4_decompress_safe_continue+0x33081CCE : 33199cca >			  ## clock.c:91:22
  1161f8:    81 60             	[r0+0x0] = r1			  ## clock.c:91:22
  1161fa:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## clock.c:92:22
  1161fe:    00 04             	pc = [sp++]			  ## clock.c:100:1


set_timer3_captrue_dp:
  116200:    c1 ff 00 51 1e 00 	r1 = 0x1e5100 <__stub_LZ4_decompress_safe_continue+0xCD104 : 1e5100 >			  ## clock.c:297:0
  116206:    00 ef 00 1e       	[r1+0x0] |= 0x800			  ## clock.c:298:21
  11620a:    c2 ff 00 18 1e 00 	r2 = 0x1e1800 <__stub_LZ4_decompress_safe_continue+0xC9804 : 1e1800 >			  ## clock.c:299:18
  116210:    00 ef 01 20       	[r2+0x0] |= 0x1			  ## clock.c:299:18
  116214:    00 4c             	if (r0 == 0) goto 0x18 <set_timer3_captrue_dp+0x2E : 11622e >			  ## clock.c:299:18
  116216:    00 ef c0 1e       	[r1+0x0] |= 0x600			  ## clock.c:302:25
  11621a:    c0 ef 03 10       	[r1+0x0] &= 0xFFFFFFFC			  ## clock.c:303:25
  11621e:    00 ef 0c 10       	[r1+0x0] |= 0xC			  ## clock.c:304:25
  116222:    c0 ef 30 10       	[r1+0x0] &= 0xFFFFFFCF			  ## clock.c:305:25
  116226:    c0 ef c0 10       	[r1+0x0] &= 0xFFFFFF3F			  ## clock.c:306:25
  11622a:    00 ef 40 10       	[r1+0x0] |= 0x40			  ## clock.c:307:25
  11622e:    c8 ef 7c 19       	[r1+0x20] &= 0xFFC0FFFF			  ## clock.c:310:20
  116232:    08 ef 74 19       	[r1+0x20] |= 0x3D0000			  ## clock.c:311:20
  116236:    06 ef 00 17       	[r1+0x18] |= 0x2000000			  ## clock.c:312:20
  11623a:    20 e1 00 2f       	r0 = r2 + -0x1100			  ## clock.c:313:20
  11623e:    40 ea 80 0c       	[r0+0x0] = 0x4000			  ## clock.c:313:20
  116242:    80 00             	rts			  ## clock.c:314:1


check_key_type:
  116244:    41 e0 ef 16       	r1 = 0x16ef			  ## boot_mode.c:49:0
  116248:    10 e8 00 41       	if (r0 == r1) {			  ## boot_mode.c:50:9
  11624c:    40 21             		r0 = 0x1			  ## boot_mode.c:50:9
  11624e:    80 00             		rts
                               	}			  ## boot_mode.c:58:1
  116250:    41 e0 af 68       	r1 = 0x68af			  ## boot_mode.c:58:1
  116254:    01 e8 07 00       	if (r0 == r1) goto 0xe <check_key_type+0x22 : 116266 >			  ## boot_mode.c:58:1
  116258:    41 e0 7c 6b       	r1 = 0x6b7c
  11625c:    90 e8 00 11       	if (r0 != r1) {
  116260:    40 20             		r0 = 0x0
                               	} else {
  116262:    40 25             		r0 = 0x5
                               	}
  116264:    80 00             	rts			  ## boot_mode.c:58:1
  116266:    40 24             	r0 = 0x4
  116268:    80 00             	rts			  ## boot_mode.c:58:1


wdt_clr:
  11626a:    60 20             	r0 = 0x80			  ## wdt.c:11:0
  11626c:    51 20             	r1 = 0x40			  ## wdt.c:12:5
  11626e:    e6 89             	goto -0x46e <p33_or_1byte : 115e02 >			  ## wdt.c:12:5


uart_set_dma_dir:
  116270:    00 49             	if (r0 == 0) goto 0x12 <uart_set_dma_dir+0x14 : 116284 >			  ## uart_upgrade.c:23:0
  116272:    10 2f             	r0 = -0x11			  ## uart_upgrade.c:23:0
  116274:    c1 ff 04 20 1e 00 	r1 = 0x1e2004 <__stub_LZ4_decompress_safe_continue+0xCA008 : 1e2004 >			  ## uart_upgrade.c:23:0
  11627a:    4a 20             	r2 = 0x20			  ## uart_upgrade.c:23:0
  11627c:    c3 ff 48 50 1e 00 	r3 = 0x1e5048 <__stub_LZ4_decompress_safe_continue+0xCD04C : 1e5048 >			  ## uart_upgrade.c:23:0
  116282:    04 89             	goto 0x12 <uart_set_dma_dir+0x26 : 116296 >			  ## uart_upgrade.c:23:0
  116284:    40 e0 df ff       	r0 = -0x21			  ## uart_upgrade.c:23:0
  116288:    c1 ff 48 50 1e 00 	r1 = 0x1e5048 <__stub_LZ4_decompress_safe_continue+0xCD04C : 1e5048 >			  ## uart_upgrade.c:23:0
  11628e:    42 30             	r2 = 0x10			  ## uart_upgrade.c:23:0
  116290:    c3 ff 04 20 1e 00 	r3 = 0x1e2004 <__stub_LZ4_decompress_safe_continue+0xCA008 : 1e2004 >			  ## uart_upgrade.c:23:0
  116296:    64 e8 00 32       	[r3+0x0] |= r2			  ## uart_upgrade.c:23:0
  11629a:    64 e8 02 10       	[r1+0x0] &= r0			  ## uart_upgrade.c:23:0
  11629e:    80 00             	rts			  ## uart_upgrade.c:36:1


uart_rx_data:
  1162a0:    75 04             	[--sp] = {rets, r5, r4}			  ## uart_upgrade.c:56:0
  1162a2:    14 16             	r4 = r1			  ## uart_upgrade.c:56:0
  1162a4:    05 16             	r5 = r0			  ## uart_upgrade.c:56:0
  1162a6:    71 81             	call -0x3e <wdt_clr : 11626a >			  ## uart_upgrade.c:57:5
  1162a8:    40 21             	r0 = 0x1			  ## uart_upgrade.c:58:5
  1162aa:    71 82             	call -0x3c <uart_set_dma_dir : 116270 >			  ## uart_upgrade.c:58:5
  1162ac:    60 e0 f1 09       	r0 = 0x1E2000			  ## uart_upgrade.c:58:5
  1162b0:    51 dd             	r1 = r5 + r4  #			  ## uart_upgrade.c:61:33
  1162b2:    85 67             		 [r0+0x1c] = r5			  ## uart_upgrade.c:60:18
  1162b4:    c1 23             	r1 += 0x3			  ## uart_upgrade.c:61:40
  1162b6:    71 e1 03 10       	r1 = r1 & 0xFFFFFFFC			  ## uart_upgrade.c:61:49
  1162ba:    81 68             	[r0+0x20] = r1			  ## uart_upgrade.c:61:18
  1162bc:    84 69             	[r0+0x24] = r4			  ## uart_upgrade.c:63:17
  1162be:    20 00             	csync			  ## uart_upgrade.c:64:5
  1162c0:    01 60             	r1 = [r0+0x0] 			  ## uart_upgrade.c:68:19
  1162c2:    51 e8 fd 71       	if ((r1 & 0x4000) == 0) goto -0x6 <uart_rx_data+0x20 : 1162c0 >			  ## uart_upgrade.c:68:13
  1162c6:    00 ef a0 0d       	[r0+0x0] |= 0x1400			  ## uart_upgrade.c:72:16
  1162ca:    55 04             	{pc, r5, r4} = [sp++]			  ## uart_upgrade.c:74:1


chip_crc16:
  1162cc:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_LZ4_decompress_safe_continue+0xCB504 : 1e3500 >			  ## crc.c:3:0
  1162d2:    41 ea 00 20       	[r2+0x4] = 0x0			  ## crc.c:5:17
  1162d6:    04 84             	goto 0x8 <chip_crc16+0x14 : 1162e0 >			  ## crc.c:5:17
  1162d8:    0b 40             	r3 = b[r0+0x0] (u)			  ## crc.c:8:24
  1162da:    a3 60             	[r2+0x0] = r3			  ## crc.c:8:22
  1162dc:    c0 21             	r0 += 0x1			  ## crc.c:8:26
  1162de:    f9 3f             	r1 += -0x1			  ## crc.c:7:15
  1162e0:    f1 5b             	if (r1 != 0) goto -0xa <chip_crc16+0xC : 1162d8 >
  1162e2:    20 00             	csync			  ## crc.c:10:5
  1162e4:    20 61             	r0 = [r2+0x4] 			  ## crc.c:12:20
  1162e6:    80 17             	r0 = r0.l (u)			  ## crc.c:12:5
  1162e8:    80 00             	rts			  ## crc.c:12:5


uart_cmd_verify:
  1162ea:    74 04             	[--sp] = {rets, r4}			  ## uart_upgrade.c:109:0
  1162ec:    c0 ff c8 14 01 00 	r0 = 0x114c8 <ut_cmd : 114c8 >			  ## uart_upgrade.c:109:0
  1162f2:    50 ee 00 11       	r1 = b[r0+0x10] (u)			  ## uart_upgrade.c:110:18
  1162f6:    0c 4f             	r4 = b[r0+0xf] (u)			  ## uart_upgrade.c:110:18
  1162f8:    a4 e1 20 14       	r4 <= insert(r1, p:0x8, l:0x8)			  ## uart_upgrade.c:110:18
  1162fc:    34 e8 00 40       	if (r4 == 0x0) {			  ## uart_upgrade.c:110:18
  116300:    40 20             		r0 = 0x0			  ## uart_upgrade.c:115:1
  116302:    54 04             		{pc, r4} = [sp++]
                               	}			  ## uart_upgrade.c:115:1
  116304:    c0 25             	r0 += 0x5			  ## uart_upgrade.c:111:30
  116306:    41 2a             	r1 = 0xa			  ## uart_upgrade.c:111:30
  116308:    71 81             	call -0x3e <chip_crc16 : 1162cc >			  ## uart_upgrade.c:111:30
  11630a:    01 16             	r1 = r0			  ## uart_upgrade.c:111:30
  11630c:    40 21             	r0 = 0x1			  ## uart_upgrade.c:111:27
  11630e:    94 e8 00 01       	if (r4 != r1) {			  ## uart_upgrade.c:111:27
  116312:    40 20             		r0 = 0x0
                               	}			  ## uart_upgrade.c:111:27
  116314:    54 04             	{pc, r4} = [sp++]			  ## uart_upgrade.c:110:9


CrcDecode:
  116316:    77 04             	[--sp] = {rets, r7-r4}			  ## crc.c:28:0
  116318:    c3 ff ff ff 00 00 	r3 = 0xffff <text_size+0x7FFE : fffe >			  ## crc.c:36:17
  11631e:    c2 ff 00 35 1e 00 	r2 = 0x1e3500 <__stub_LZ4_decompress_safe_continue+0xCB504 : 1e3500 >
  116324:    a3 61             	[r2+0x4] = r3			  ## crc.c:36:17
  116326:    7b 3f             	r3 = 0xff			  ## crc.c:38:18
  116328:    a3 60             	[r2+0x0] = r3			  ## crc.c:38:18
  11632a:    a3 60             	[r2+0x0] = r3			  ## crc.c:39:18
  11632c:    44 20             	r4 = 0x0			  ## crc.c:39:18
  11632e:    c3 ff fb 5c 11 00 	r3 = 0x115cfb <nor_flash_boot_table+0x16 : 115cfa >			  ## crc.c:39:18
  116334:    04 90             	goto 0x20 <CrcDecode+0x40 : 116356 >			  ## crc.c:39:18
  116336:    46 17             	r6 = r4.b0 (u)			  ## crc.c:43:24
  116338:    d8 ee 60 53       	r5 = b[r6+r3] (u)			  ## crc.c:43:24
  11633c:    a5 60             	[r2+0x0] = r5			  ## crc.c:43:22
  11633e:    20 00             	csync			  ## crc.c:49:9
  116340:    0d 40             	r5 = b[r0+0x0] (u)			  ## crc.c:50:24
  116342:    27 61             	r7 = [r2+0x4] 			  ## crc.c:50:51
  116344:    7d 19             	r5 ^= r7			  ## crc.c:50:37
  116346:    8d 40             	b[r0+0x0] = r5			  ## crc.c:50:22
  116348:    4d 81             	r5 = r4 + 0x1			  ## crc.c:45:14
  11634a:    44 20             	r4 = 0x0			  ## crc.c:45:13
  11634c:    b6 ec 0e 00       	if (r6 <= 0xe) {			  ## crc.c:45:13
  116350:    54 16             		r4 = r5
                               	}			  ## crc.c:45:13
  116352:    c0 21             	r0 += 0x1			  ## crc.c:52:27
  116354:    f9 3f             	r1 += -0x1			  ## crc.c:42:15
  116356:    95 17             	r5 = r1.l (u)			  ## crc.c:42:5
  116358:    f5 4e             	if (r5 != 0) goto -0x24 <CrcDecode+0x20 : 116336 >			  ## crc.c:42:5
  11635a:    57 04             	{pc, r7-r4} = [sp++]			  ## crc.c:56:1


uart_recv_loader:
  11635c:    e2 9e             	sp += -0x8			  ## uart_upgrade.c:138:0
  11635e:    40 25             	r0 = 0x5			  ## uart_upgrade.c:140:5
  116360:    44 25             	r4 = 0x5			  ## uart_upgrade.c:140:5
  116362:    bf ea 7e fe       	call -0x304 <mdelay : 116062 >			  ## uart_upgrade.c:140:5
  116366:    c6 ff c0 5c 11 00 	r6 = 0x115cc0 <iCos_Tab+0x8 : 115cc0 >			  ## uart_upgrade.c:140:5
  11636c:    68 4c             	r0 = b[r6+0xc] (u)			  ## uart_upgrade.c:52:5
  11636e:    61 62             	r1 = [r6+0x8] 			  ## uart_upgrade.c:52:5
  116370:    de e9 04 00       	b[sp+4] = r0			  ## uart_upgrade.c:52:5
  116374:    81 20             	[sp] = r1			  ## uart_upgrade.c:52:5
  116376:    40 20             	r0 = 0x0			  ## uart_upgrade.c:40:5
  116378:    bf ea 7a ff       	call -0x10c <uart_set_dma_dir : 116270 >			  ## uart_upgrade.c:40:5
  11637c:    88 80             	r0 = sp + 0			  ## uart_upgrade.c:40:5
  11637e:    60 e0 f1 59       	r5 = 0x1E2000			  ## uart_upgrade.c:40:5
  116382:    d0 65             	[r5+0x14] = r0			  ## uart_upgrade.c:42:17
  116384:    d4 66             	[r5+0x18] = r4			  ## uart_upgrade.c:43:17
  116386:    20 00             	csync			  ## uart_upgrade.c:44:5
  116388:    50 60             	r0 = [r5+0x0] 			  ## uart_upgrade.c:45:19
  11638a:    50 e8 fd 79       	if ((r0 & 0x8000) == 0) goto -0x6 <uart_recv_loader+0x2C : 116388 >			  ## uart_upgrade.c:45:5
  11638e:    00 ef 00 5d       	[r5+0x0] |= 0x2000			  ## uart_upgrade.c:47:16
  116392:    40 22             	r0 = 0x2			  ## uart_upgrade.c:144:5
  116394:    bf ea 65 fe       	call -0x336 <mdelay : 116062 >			  ## uart_upgrade.c:144:5
  116398:    c4 ff c8 14 01 00 	r4 = 0x114c8 <ut_cmd : 114c8 >			  ## uart_upgrade.c:144:5
  11639e:    50 ee 42 01       	r0 = b[r4+0x12] (u)			  ## uart_upgrade.c:146:16
  1163a2:    30 e8 00 40       	if (r0 == 0x0) {			  ## uart_upgrade.c:146:16
  1163a6:    40 2a             		r0 = 0xa			  ## uart_upgrade.c:146:16
  1163a8:    52 ee 42 01       		b[r4+0x12] = r0
                               	}			  ## uart_upgrade.c:147:21
  1163ac:    41 e0 10 27       	r1 = 0x2710			  ## uart_upgrade.c:150:43
  1163b0:    f0 e1 00 71       	r7 = r0 * r1			  ## uart_upgrade.c:150:43
  1163b4:    68 8d             	r0 = r6 + 0xd			  ## uart_upgrade.c:150:19
  1163b6:    bf ea 5e fe       	call -0x344 <clk_get : 116076 >			  ## uart_upgrade.c:150:19
  1163ba:    f4 e1 00 07       	r0 = r0 / r7 (u)			  ## uart_upgrade.c:150:28
  1163be:    80 a2             	r0 = r0 >> 0x2			  ## uart_upgrade.c:150:53
  1163c0:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:150:57
  1163c2:    d0 62             	[r5+0x8] = r0			  ## uart_upgrade.c:150:16
  1163c4:    bf ea 51 ff       	call -0x15e <wdt_clr : 11626a >			  ## uart_upgrade.c:151:5
  1163c8:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:152:25
  1163ca:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:152:25
  1163cc:    a2 f1 20 04       	r2 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:152:25
  1163d0:    48 45             		 r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:152:25
  1163d2:    50 ee 46 80       	r8 = b[r4+0x6] (u)			  ## uart_upgrade.c:152:25
  1163d6:    a0 f1 20 84       	r0 <= insert(r8, p:0x8, l:0x8)  #			  ## uart_upgrade.c:152:25
  1163da:    4e 4c             		 r6 = b[r4+0xc] (u)			  ## uart_upgrade.c:152:38
  1163dc:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:152:25
  1163e0:    4f 4b             		 r7 = b[r4+0xb] (u)			  ## uart_upgrade.c:152:38
  1163e2:    a7 f1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)  #			  ## uart_upgrade.c:152:38
  1163e6:    4b 4a             		 r3 = b[r4+0xa] (u)			  ## uart_upgrade.c:152:38
  1163e8:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:152:38
  1163ea:    a1 e1 20 34       	r1 <= insert(r3, p:0x8, l:0x8)			  ## uart_upgrade.c:152:38
  1163ee:    a1 e1 40 78       	r1 <= insert(r7, p:0x10, l:0x10)			  ## uart_upgrade.c:152:38
  1163f2:    bf ea 55 ff       	call -0x156 <uart_rx_data : 1162a0 >			  ## uart_upgrade.c:152:5
  1163f6:    40 ea 00 50       	[r5+0x0] = 0x0			  ## uart_upgrade.c:154:16
  1163fa:    49 48             	r1 = b[r4+0x8] (u)			  ## uart_upgrade.c:156:57
  1163fc:    4a 47             	r2 = b[r4+0x7] (u)			  ## uart_upgrade.c:156:57
  1163fe:    a2 f1 20 14       	r2 <= insert(r1, p:0x8, l:0x8)  #			  ## uart_upgrade.c:156:57
  116402:    4b 46             		 r3 = b[r4+0x6] (u)			  ## uart_upgrade.c:156:57
  116404:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:156:57
  116406:    a0 f1 20 34       	r0 <= insert(r3, p:0x8, l:0x8)  #			  ## uart_upgrade.c:156:57
  11640a:    4b 4b             		 r3 = b[r4+0xb] (u)			  ## uart_upgrade.c:156:70
  11640c:    a0 f1 40 28       	r0 <= insert(r2, p:0x10, l:0x10)  #			  ## uart_upgrade.c:156:57
  116410:    4a 4c             		 r2 = b[r4+0xc] (u)			  ## uart_upgrade.c:156:70
  116412:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:156:70
  116416:    4d 4a             		 r5 = b[r4+0xa] (u)			  ## uart_upgrade.c:156:70
  116418:    49 49             	r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:156:70
  11641a:    a1 f1 20 54       	r1 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:156:70
  11641e:    4e 4e             		 r6 = b[r4+0xe] (u)			  ## uart_upgrade.c:156:16
  116420:    a1 f1 40 38       	r1 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:156:70
  116424:    4f 4d             		 r7 = b[r4+0xd] (u)			  ## uart_upgrade.c:156:16
  116426:    bf ea 51 ff       	call -0x15e <chip_crc16 : 1162cc >			  ## uart_upgrade.c:156:31
  11642a:    a7 e1 20 64       	r7 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:156:16
  11642e:    80 e8 20 70       	if (r7 != r0) goto 0x40 <uart_recv_loader+0x116 : 116472 >			  ## uart_upgrade.c:156:16
  116432:    50 ee 41 01       	r0 = b[r4+0x11] (u)			  ## uart_upgrade.c:169:16
  116436:    50 e8 10 08       	if ((r0 & 0x2) == 0) goto 0x20 <uart_recv_loader+0xFE : 11645a >			  ## uart_upgrade.c:169:16
  11643a:    4a 48             	r2 = b[r4+0x8] (u)			  ## uart_upgrade.c:170:34
  11643c:    4b 47             	r3 = b[r4+0x7] (u)			  ## uart_upgrade.c:170:34
  11643e:    a3 f1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)  #			  ## uart_upgrade.c:170:34
  116442:    4d 46             		 r5 = b[r4+0x6] (u)			  ## uart_upgrade.c:170:34
  116444:    48 45             	r0 = b[r4+0x5] (u)			  ## uart_upgrade.c:170:34
  116446:    a0 f1 20 54       	r0 <= insert(r5, p:0x8, l:0x8)  #			  ## uart_upgrade.c:170:34
  11644a:    4e 4a             		 r6 = b[r4+0xa] (u)			  ## uart_upgrade.c:170:9
  11644c:    a0 f1 40 38       	r0 <= insert(r3, p:0x10, l:0x10)  #			  ## uart_upgrade.c:170:34
  116450:    49 49             		 r1 = b[r4+0x9] (u)			  ## uart_upgrade.c:170:9
  116452:    a1 e1 20 64       	r1 <= insert(r6, p:0x8, l:0x8)			  ## uart_upgrade.c:170:9
  116456:    bf ea 5e ff       	call -0x144 <CrcDecode : 116316 >			  ## uart_upgrade.c:170:9
  11645a:    48 48             	r0 = b[r4+0x8] (u)			  ## uart_upgrade.c:176:30
  11645c:    49 47             	r1 = b[r4+0x7] (u)			  ## uart_upgrade.c:176:30
  11645e:    a1 f1 20 04       	r1 <= insert(r0, p:0x8, l:0x8)  #			  ## uart_upgrade.c:176:30
  116462:    4a 46             		 r2 = b[r4+0x6] (u)			  ## uart_upgrade.c:176:30
  116464:    40 d6             	r0 = r4  #			  ## uart_upgrade.c:176:5
  116466:    4b 45             		 r3 = b[r4+0x5] (u)			  ## uart_upgrade.c:176:30
  116468:    a3 e1 20 24       	r3 <= insert(r2, p:0x8, l:0x8)			  ## uart_upgrade.c:176:30
  11646c:    a3 e1 40 18       	r3 <= insert(r1, p:0x10, l:0x10)			  ## uart_upgrade.c:176:30
  116470:    c3 00             	call r3			  ## uart_upgrade.c:176:5
  116472:    bf ea 51 d8       	call -0x4f5e <chip_reset : 111518 >			  ## uart_upgrade.c:179:5


uart_upgrade_init:
  116476:    76 04             	[--sp] = {rets, r6-r4}			  ## uart_upgrade.c:206:0
  116478:    c1 ff 18 51 1e 00 	r1 = 0x1e5118 <__stub_LZ4_decompress_safe_continue+0xCD11C : 1e5118 >			  ## uart_upgrade.c:206:0
  11647e:    c0 ef 18 10       	[r1+0x0] &= 0xFFFFFFE7			  ## uart_upgrade.c:209:20
  116482:    00 ef 10 10       	[r1+0x0] |= 0x10			  ## uart_upgrade.c:210:20
  116486:    03 ef 08 10       	[r1+0xc] |= 0x8			  ## uart_upgrade.c:211:20
  11648a:    31 e1 30 1f       	r1 = r1 + -0xd0			  ## uart_upgrade.c:211:20
  11648e:    05 ef 20 10       	[r1+0x14] |= 0x20			  ## uart_upgrade.c:213:18
  116492:    02 ef 20 10       	[r1+0x8] |= 0x20			  ## uart_upgrade.c:214:18
  116496:    c3 ef 20 10       	[r1+0xc] &= 0xFFFFFFDF			  ## uart_upgrade.c:215:18
  11649a:    00 ef 20 10       	[r1+0x0] |= 0x20			  ## uart_upgrade.c:216:19
  11649e:    c1 ff 10 00 1e 00 	r1 = 0x1e0010 <__stub_LZ4_decompress_safe_continue+0xC8014 : 1e0010 >			  ## uart_upgrade.c:216:19
  1164a4:    c0 ef 40 1e       	[r1+0x0] &= 0xFFFFF3FF			  ## uart_upgrade.c:218:24
  1164a8:    00 ef 80 1e       	[r1+0x0] |= 0x400			  ## uart_upgrade.c:219:24
  1164ac:    60 e0 f1 69       	r6 = 0x1E2000			  ## uart_upgrade.c:219:24
  1164b0:    40 ea 50 6d       	[r6+0x0] = 0x3400			  ## uart_upgrade.c:221:16
  1164b4:    05 16             	r5 = r0			  ## uart_upgrade.c:221:16
  1164b6:    c4 ff cd 5c 11 00 	r4 = 0x115ccd <ack_cmd+0x4 : 115ccc >
  1164bc:    40 16             	r0 = r4			  ## uart_upgrade.c:223:19
  1164be:    bf ea da fd       	call -0x44c <clk_get : 116076 >			  ## uart_upgrade.c:223:19
  1164c2:    60 e0 16 1c       	r1 = 0x9600			  ## uart_upgrade.c:223:36
  1164c6:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:223:36
  1164ca:    f8 3f             	r0 += -0x1			  ## uart_upgrade.c:223:40
  1164cc:    e0 62             	[r6+0x8] = r0			  ## uart_upgrade.c:223:16
  1164ce:    40 ea 41 60       	[r6+0x0] = 0x41			  ## uart_upgrade.c:225:16
  1164d2:    00 ef 50 6d       	[r6+0x0] |= 0x3400			  ## uart_upgrade.c:226:16
  1164d6:    15 41             	if (r5 == 0) goto 0x42 <uart_upgrade_init+0xA4 : 11651a >			  ## uart_upgrade.c:226:16
  1164d8:    c1 ff c0 76 11 00 	r1 = 0x1176c0 <uart_isr : 1176c0 >			  ## uart_upgrade.c:230:9
  1164de:    40 32             	r0 = 0x12			  ## uart_upgrade.c:230:9
  1164e0:    42 23             	r2 = 0x3			  ## uart_upgrade.c:230:9
  1164e2:    bf ea 6d fc       	call -0x726 <HWI_Install : 115dc0 >			  ## uart_upgrade.c:230:9
  1164e6:    40 16             	r0 = r4			  ## uart_upgrade.c:232:28
  1164e8:    bf ea c5 fd       	call -0x476 <clk_get : 116076 >			  ## uart_upgrade.c:232:28
  1164ec:    41 e0 e8 03       	r1 = 0x3e8			  ## uart_upgrade.c:232:37
  1164f0:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## uart_upgrade.c:232:37
  1164f4:    e0 e1 05 00       	r0 = r0 * 0x5			  ## uart_upgrade.c:232:25
  1164f8:    e0 64             	[r6+0x10] = r0			  ## uart_upgrade.c:232:21
  1164fa:    40 21             	r0 = 0x1			  ## uart_upgrade.c:234:9
  1164fc:    bf ea b8 fe       	call -0x290 <uart_set_dma_dir : 116270 >			  ## uart_upgrade.c:234:9
  116500:    00 ef 20 60       	[r6+0x0] |= 0x20			  ## uart_upgrade.c:236:20
  116504:    c0 ff e0 14 01 00 	r0 = 0x114e0 <uart_dma_buffer : 114e0 >			  ## uart_upgrade.c:105:18
  11650a:    e0 67             	[r6+0x1c] = r0			  ## uart_upgrade.c:104:18
  11650c:    d0 23             	r0 += 0x43			  ## uart_upgrade.c:105:18
  11650e:    70 e1 03 00       	r0 = r0 & 0xFFFFFFFC			  ## uart_upgrade.c:105:18
  116512:    e0 68             	[r6+0x20] = r0			  ## uart_upgrade.c:105:18
  116514:    49 ea 40 60       	[r6+0x24] = 0x40			  ## uart_upgrade.c:106:17
  116518:    56 04             	{pc, r6-r4} = [sp++]			  ## uart_upgrade.c:260:1
  11651a:    c0 ff c8 14 01 00 	r0 = 0x114c8 <ut_cmd : 114c8 >			  ## uart_upgrade.c:246:5
  116520:    41 35             	r1 = 0x15			  ## uart_upgrade.c:246:5
  116522:    bf ea bd fe       	call -0x286 <uart_rx_data : 1162a0 >			  ## uart_upgrade.c:246:5
  116526:    bf ea e0 fe       	call -0x240 <uart_cmd_verify : 1162ea >			  ## uart_upgrade.c:247:9
  11652a:    80 42             	if (r0 != 0) goto 0x4 <uart_upgrade_init+0xBA : 116530 >			  ## uart_upgrade.c:247:9
  11652c:    bf ea f4 d7       	call -0x5018 <chip_reset : 111518 >			  ## uart_upgrade.c:259:5
  116530:    bf ea 14 ff       	call -0x1d8 <uart_recv_loader : 11635c >			  ## uart_upgrade.c:257:5


check_usb_sof:
  116534:    7e 04             	[--sp] = {rets, r14-r4}			  ## clock.c:325:0
  116536:    c7 ff c0 13 01 00 	r7 = 0x113c0 <var_bss_begin : 113c0 >			  ## clock.c:325:0
  11653c:    44 20             	r4 = 0x0			  ## clock.c:325:0
  11653e:    c2 14             	r10 = 0			  ## clock.c:325:0
  116540:    c3 14             	r11 = 0			  ## clock.c:325:0
  116542:    c9 ff 38 71 11 00 	r9 = 0x117138 <tmr3_isr : 117138 >			  ## clock.c:325:0
  116548:    c6 ff 00 07 1e 00 	r6 = 0x1e0700 <__stub_LZ4_decompress_safe_continue+0xC8704 : 1e0700 >			  ## clock.c:325:0
  11654e:    cc ff c0 5c 11 00 	r12 = 0x115cc0 <iCos_Tab+0x8 : 115cc0 >			  ## clock.c:325:0
  116554:    35 e1 00 6f       	r5 = r6 + -0x100			  ## clock.c:325:0
  116558:    4d e0 01 40       	r13 = 0x4001			  ## clock.c:325:0
  11655c:    e8 e0 96 5c       	r8 = r5 + 0x4B00			  ## clock.c:325:0
  116560:    0e 16             	r14 = r0			  ## clock.c:325:0
  116562:    bf ea 82 fe       	call -0x2fc <wdt_clr : 11626a >			  ## clock.c:328:9
  116566:    f4 68             	[r7+0x20] = r4			  ## clock.c:332:25
  116568:    91 d6             	r1 = r9  #			  ## clock.c:344:9
  11656a:    f4 6c             		 [r7+0x30] = r4			  ## clock.c:333:22
  11656c:    50 ec 75 a2       	d[r7+0x24] = r11_r10			  ## clock.c:334:18
  116570:    f4 6b             	[r7+0x2c] = r4			  ## clock.c:336:19
  116572:    40 27             	r0 = 0x7			  ## clock.c:344:9
  116574:    42 20             	r2 = 0x0			  ## clock.c:344:9
  116576:    bf ea 23 fc       	call -0x7ba <HWI_Install : 115dc0 >			  ## clock.c:344:9
  11657a:    40 21             	r0 = 0x1			  ## clock.c:345:9
  11657c:    bf ea 40 fe       	call -0x380 <set_timer3_captrue_dp : 116200 >			  ## clock.c:345:9
  116580:    e4 61             	[r6+0x4] = r4			  ## clock.c:347:24
  116582:    e4 62             	[r6+0x8] = r4			  ## clock.c:348:24
  116584:    40 ea 1a 60       	[r6+0x0] = 0x1A			  ## clock.c:349:24
  116588:    c0 16             	r0 = r12			  ## clock.c:350:26
  11658a:    bf ea 74 fd       	call -0x518 <clk_get : 116076 >			  ## clock.c:350:26
  11658e:    41 e0 e8 03       	r1 = 0x3e8			  ## clock.c:350:26
  116592:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## clock.c:350:41
  116596:    d0 62             	[r5+0x8] = r0			  ## clock.c:350:24
  116598:    d4 61             	[r5+0x4] = r4			  ## clock.c:351:24
  11659a:    d0 ec 51 d0       	[r5+0x0] = r13			  ## clock.c:352:24
  11659e:    90 17             	r0 = r1.l (u)			  ## clock.c:356:9
  1165a0:    00 4a             	if (r0 == 0) goto 0x14 <check_usb_sof+0x82 : 1165b6 >			  ## clock.c:356:9
  1165a2:    00 ef 80 5c       	[r5+0x0] |= 0x4000			  ## clock.c:359:28
  1165a6:    f9 3f             	r1 += -0x1			  ## clock.c:356:23
  1165a8:    50 60             	r0 = [r5+0x0] 			  ## clock.c:362:32
  1165aa:    88 17             	r0 = r0.l (s)			  ## clock.c:362:47
  1165ac:    80 fd f7 01       	ifs (r0 < 0x0) goto -0x12 <check_usb_sof+0x6A : 11659e >			  ## clock.c:362:47
  1165b0:    70 6c             	r0 = [r7+0x30] 			  ## clock.c:363:21
  1165b2:    70 5a             	if (r0 == 0) goto -0xc <check_usb_sof+0x74 : 1165a8 >			  ## clock.c:363:21
  1165b4:    04 8e             	goto 0x1c <check_usb_sof+0x9E : 1165d2 >			  ## clock.c:363:21
  1165b6:    c0 ef 40 80       	[r8+0x0] &= 0xFFFFFFBF			  ## clock.c:371:25
  1165ba:    40 ea 80 6c       	[r6+0x0] = 0x4000			  ## clock.c:372:24
  1165be:    70 28             	r0 = 0xc8			  ## clock.c:375:9
  1165c0:    bf ea 4f fd       	call -0x562 <mdelay : 116062 >			  ## clock.c:375:9
  1165c4:    30 e1 ff ef       	r0 = r14 + -0x1			  ## clock.c:385:19
  1165c8:    61 ff ff e0 c9 ff 	if ((r14 & 0xFF) != 0) goto -0x6e <check_usb_sof+0x2C : 116560 >			  ## clock.c:385:19
  1165ce:    40 20             	r0 = 0x0
  1165d0:    04 83             	goto 0x6 <check_usb_sof+0xA4 : 1165d8 >
  1165d2:    40 ea 80 5c       	[r5+0x0] = 0x4000			  ## clock.c:364:36
  1165d6:    40 21             	r0 = 0x1			  ## clock.c:364:36
  1165d8:    c0 ef 40 80       	[r8+0x0] &= 0xFFFFFFBF			  ## clock.c:318:25
  1165dc:    40 ea 80 6c       	[r6+0x0] = 0x4000			  ## clock.c:321:20
  1165e0:    5e 04             	{pc, r14-r4} = [sp++]			  ## clock.c:399:1


spi_set_port:
  1165e2:    c1 ff 18 51 1e 00 	r1 = 0x1e5118 <__stub_LZ4_decompress_safe_continue+0xCD11C : 1e5118 >			  ## spi0.c:39:0
  1165e8:    12 60             	r2 = [r1+0x0] 			  ## spi0.c:39:0
  1165ea:    43 e1 04 20       	r3 = r2 | 0x4			  ## spi0.c:45:24
  1165ee:    ba 22             	r2 &= 0xfffffffb			  ## spi0.c:42:24
  1165f0:    b0 e8 00 00       	if (r0 != 0x0) {			  ## spi0.c:42:24
  1165f4:    32 16             		r2 = r3
                               	}			  ## spi0.c:40:9
  1165f6:    92 60             	[r1+0x0] = r2			  ## spi0.c:40:9
  1165f8:    80 00             	rts			  ## spi0.c:49:1


spi_get_port:
  1165fa:    c0 ff 18 51 1e 00 	r0 = 0x1e5118 <__stub_LZ4_decompress_safe_continue+0xCD11C : 1e5118 >			  ## spi0.c:34:0
  116600:    00 60             	r0 = [r0+0x0] 			  ## spi0.c:35:27
  116602:    b0 e1 04 01       	r0 = uextra(r0, p:0x2, l:0x1)			  ## spi0.c:35:38
  116606:    80 00             	rts			  ## spi0.c:36:5


SPI0_cs:
  116608:    10 04             	[--sp] = rets			  ## spi0.c:185:0
  11660a:    01 16             	r1 = r0			  ## spi0.c:185:0
  11660c:    71 96             	call -0x14 <spi_get_port : 1165fa >			  ## spi0.c:186:16
  11660e:    c2 ff 80 50 1e 00 	r2 = 0x1e5080 <__stub_LZ4_decompress_safe_continue+0xCD084 : 1e5080 >
  116614:    00 4b             	if (r0 == 0) goto 0x16 <SPI0_cs+0x24 : 11662c >
  116616:    c2 ef 02 20       	[r2+0x8] &= 0xFFFFFFFD			  ## spi0.c:191:23
  11661a:    20 60             	r0 = [r2+0x0] 			  ## spi0.c:191:23
  11661c:    73 e1 02 00       	r3 = r0 & 0xFFFFFFFD			  ## spi0.c:192:64
  116620:    30 21             	r0 |= 0x2			  ## spi0.c:192:29
  116622:    31 e8 00 00       	if (r1 == 0x0) {			  ## spi0.c:192:29
  116626:    30 16             		r0 = r3
                               	}			  ## spi0.c:192:9
  116628:    a0 60             	[r2+0x0] = r0			  ## spi0.c:192:9
  11662a:    00 04             	pc = [sp++]			  ## spi0.c:194:1
  11662c:    d2 ef 08 20       	[r2+0x48] &= 0xFFFFFFF7			  ## spi0.c:188:23
  116630:    00 e1 40 20       	r0 = r2 + 0x40			  ## spi0.c:188:23
  116634:    02 60             	r2 = [r0+0x0] 
  116636:    73 e1 08 20       	r3 = r2 & 0xFFFFFFF7			  ## spi0.c:189:64
  11663a:    32 23             	r2 |= 0x8			  ## spi0.c:189:29
  11663c:    31 e8 00 00       	if (r1 == 0x0) {			  ## spi0.c:189:29
  116640:    32 16             		r2 = r3
                               	}			  ## spi0.c:189:9
  116642:    82 60             	[r0+0x0] = r2			  ## spi0.c:189:9
  116644:    00 04             	pc = [sp++]			  ## spi0.c:194:1


spi0_wait_ok:
  116646:    c0 ff 00 1c 1e 00 	r0 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## spi0.c:243:0
  11664c:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:244:23
  11664e:    51 e8 fd 79       	if ((r1 & 0x8000) == 0) goto -0x6 <spi0_wait_ok+0x6 : 11664c >			  ## spi0.c:244:5
  116652:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## spi0.c:246:18
  116656:    80 00             	rts			  ## spi0.c:246:18


SPI0_WriteByte:
  116658:    c1 ff 00 1c 1e 00 	r1 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## spi0.c:266:0
  11665e:    c0 ef 80 1d       	[r1+0x0] &= 0xFFFFEFFF			  ## spi0.c:267:18
  116662:    90 62             	[r1+0x8] = r0			  ## spi0.c:268:18
  116664:    f7 90             	goto -0x20 <spi0_wait_ok : 116646 >			  ## spi0.c:269:5


SPI0_ReadByte:
  116666:    10 04             	[--sp] = rets			  ## spi0.c:286:0
  116668:    c2 ff 00 1c 1e 00 	r2 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## spi0.c:286:0
  11666e:    00 ef 80 2d       	[r2+0x0] |= 0x1000			  ## spi0.c:288:18
  116672:    40 2a             	r0 = 0xa			  ## spi0.c:289:5
  116674:    bf ea 2e fc       	call -0x7a4 <udelay : 115ed4 >			  ## spi0.c:289:5
  116678:    42 ea ff 20       	[r2+0x8] = 0xFF			  ## spi0.c:290:18
  11667c:    71 84             	call -0x38 <spi0_wait_ok : 116646 >			  ## spi0.c:291:5
  11667e:    20 62             	r0 = [r2+0x8] 			  ## spi0.c:292:25
  116680:    00 17             	r0 = r0.b0 (u)			  ## spi0.c:294:5
  116682:    00 04             	pc = [sp++]			  ## spi0.c:294:5


SPI0_4WriteByte:
  116684:    10 04             	[--sp] = rets			  ## spi0.c:325:0
  116686:    c2 ff 00 1c 1e 00 	r2 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## spi0.c:325:0
  11668c:    c0 ef 80 2e       	[r2+0x0] &= 0xFFFFFBFF			  ## spi0.c:327:18
  116690:    00 ef 00 2e       	[r2+0x0] |= 0x800			  ## spi0.c:328:18
  116694:    c0 ef 80 2d       	[r2+0x0] &= 0xFFFFEFFF			  ## spi0.c:330:18
  116698:    a0 62             	[r2+0x8] = r0			  ## spi0.c:331:18
  11669a:    61 95             	call -0x56 <spi0_wait_ok : 116646 >			  ## spi0.c:333:5
  11669c:    c0 ef 40 2e       	[r2+0x0] &= 0xFFFFF3FF			  ## spi0.c:336:18
  1166a0:    00 04             	pc = [sp++]			  ## spi0.c:337:1


LZ4_decompress_safe_continue:
  1166a2:    7f 04             	[--sp] = {rets, r15-r4}			  ## lz4.c:658:0
  1166a4:    e2 9a             	sp += -0x18			  ## lz4.c:658:0
  1166a6:    d0 ec 0c c0       	r12 = [r0+0xc]			  ## lz4.c:658:0
  1166aa:    2b d6             	r11 = r2  #			  ## lz4.c:658:0
  1166ac:    05 62             		 r5 = [r0+0x8] 			  ## lz4.c:662:16
  1166ae:    04 33             	r4 = [sp+76]			  ## lz4.c:662:16
  1166b0:    80 25             	[sp+20] = r0			  ## lz4.c:662:9
  1166b2:    81 24             	[sp+16] = r1			  ## lz4.c:662:9
  1166b4:    02 e8 b8 50       	if (r5 == r2) goto 0x170 <LZ4_decompress_safe_continue+0x186 : 116828 >			  ## lz4.c:662:9
  1166b8:    b4 e0 52 2c       	r2 = r5 - r12			  ## lz4.c:673:48
  1166bc:    20 eb 04 10       	[r0+] = {r12, r2}			  ## lz4.c:672:28
  1166c0:    00 ff 00 40 84 01 	if (r4 == 0x0) goto 0x308 <LZ4_decompress_safe_continue+0x32C : 1169ce >
  1166c6:    b4 f0 b0 24       	r2 = r11 + r4  #			  ## lz4.c:425:27
  1166ca:    85 23             		 [sp+12] = r5
  1166cc:    98 1c             	r0 = r1 + r3			  ## lz4.c:422:33
  1166ce:    38 f1 f1 0f       	r8 = r0 + -0xf  #
  1166d2:    80 21             		 [sp+4] = r0
  1166d4:    3f f1 fb 0f       	r15 = r0 + -0x5  #
  1166d8:    82 22             		 [sp+8] = r2
  1166da:    3a e1 fb 2f       	r10 = r2 + -0x5
  1166de:    3e e1 f8 0f       	r14 = r0 + -0x8
  1166e2:    39 e1 f4 2f       	r9 = r2 + -0xc
  1166e6:    c5 14             	r13 = 0
  1166e8:    b4 16             	r4 = r11
  1166ea:    15 16             	r5 = r1
  1166ec:    34 91             	goto 0xe2 <LZ4_decompress_safe_continue+0x12E : 1167d0 >
  1166ee:    12 03             	rep 0x4 r2 {			  ## lz4.c:323:5
  1166f0:    51 07             		r1 = b[r5++=0x1] (u)			  ## lz4.c:323:5
  1166f2:    c1 07             		b[r4++=0x1] = r1
                               	}			  ## lz4.c:323:5
  1166f4:    f2 5c             	if (r2 != 0) goto -0x8 <LZ4_decompress_safe_continue+0x4C : 1166ee >			  ## lz4.c:323:5
  1166f6:    39 41             	r1 = b[r3+0x1] (u)			  ## lz4.c:499:18
  1166f8:    3c 40             	r4 = b[r3+0x0] (u)			  ## lz4.c:499:18
  1166fa:    a4 e1 20 14       	r4 <= insert(r1, p:0x8, l:0x8)			  ## lz4.c:499:18
  1166fe:    71 1f             	r1 = r7 - r4			  ## lz4.c:501:20
  116700:    c0 e1 c0 59       	r5 = r12 >> 0x10			  ## lz4.c:502:27
  116704:    3a 82             	r2 = r3 + 0x2			  ## lz4.c:500:12
  116706:    85 45             	if (r5 != 0) goto 0xa <LZ4_decompress_safe_continue+0x70 : 116712 >
  116708:    b4 e0 10 3c       	r3 = r1 + r12			  ## lz4.c:502:31
  11670c:    43 ff 00 3b 45 01 	if (r3 < r11) goto 0x28a <LZ4_decompress_safe_continue+0x2FA : 11699c >			  ## lz4.c:502:31
  116712:    52 ee 73 d0       	b[r7+0x3] = r13			  ## lz4.c:234:30
  116716:    52 ee 72 d0       	b[r7+0x2] = r13			  ## lz4.c:234:30
  11671a:    c3 a8             	r3 = r4 >> 0x8			  ## lz4.c:234:30
  11671c:    70 f1 f0 00       	r0 = r0 & 0xFFFFFF0F  #			  ## lz4.c:508:24
  116720:    fc 40             		 b[r7+0x0] = r4			  ## lz4.c:234:30
  116722:    fb 41             	b[r7+0x1] = r3			  ## lz4.c:234:30
  116724:    80 f8 11 1e       	if (r0 != 0xf) goto 0x22 <LZ4_decompress_safe_continue+0xA8 : 11674a >			  ## lz4.c:234:30
  116728:    40 2f             	r0 = 0xf
  11672a:    2d 81             	r5 = r2 + 0x1			  ## lz4.c:512:24
  11672c:    48 ff 00 5f 36 01 	if (r5 > r15) goto 0x26c <LZ4_decompress_safe_continue+0x2FC : 11699e >
  116732:    52 d6             	r2 = r5  #
  116734:    2b 40             		 r3 = b[r2+0x0] (u)			  ## lz4.c:512:21
  116736:    30 18             	r0 += r3			  ## lz4.c:516:24
  116738:    13 f8 f7 ff       	if (r3 == 0xff) goto -0x12 <LZ4_decompress_safe_continue+0x88 : 11672a >
  11673c:    8b 1d             	r3 = r0 + r7
  11673e:    42 21             	r2 = 0x1
  116740:    13 e9 00 00       	if (r3 >= r0) {
  116744:    42 20             		r2 = 0x0
                               	}
  116746:    02 42             	if (r2 == 0) goto 0x4 <LZ4_decompress_safe_continue+0xAA : 11674c >
  116748:    94 8a             	goto 0x254 <LZ4_decompress_safe_continue+0x2FC : 11699e >
  11674a:    25 16             	r5 = r2
  11674c:    0e 84             	r6 = r0 + 0x4			  ## lz4.c:522:16
  11674e:    f4 1d             	r4 = r7 + r6
  116750:    0b e9 25 10       	if (r1 >= r11) goto 0x4a <LZ4_decompress_safe_continue+0xFC : 11679e >			  ## lz4.c:525:36
  116754:    48 ff 00 4a 22 01 	if (r4 > r10) goto 0x244 <LZ4_decompress_safe_continue+0x2FC : 11699e >
  11675a:    9d 16             	r13 = r9
  11675c:    e9 16             	r9 = r14
  11675e:    ae 16             	r14 = r10
  116760:    b4 e0 b2 a1       	r10 = r11 - r1			  ## lz4.c:530:46
  116764:    8a ec 22 60       	if (r6 <= r10) goto 0x44 <LZ4_decompress_safe_continue+0x10A : 1167ac >
  116768:    a2 d6             	r2 = r10  #			  ## lz4.c:538:17
  11676a:    00 23             		 r0 = [sp+12]			  ## lz4.c:538:36
  11676c:    b4 e0 02 1a       	r1 = r0 - r10			  ## lz4.c:538:36
  116770:    70 16             	r0 = r7			  ## lz4.c:538:17
  116772:    bf ea 91 d5       	call -0x54de <memmove : 111298 >			  ## lz4.c:538:17
  116776:    b4 e0 62 6a       	r6 = r6 - r10			  ## lz4.c:537:48
  11677a:    b4 e0 70 4a       	r4 = r7 + r10			  ## lz4.c:539:20
  11677e:    b4 e0 42 0b       	r0 = r4 - r11			  ## lz4.c:540:44
  116782:    80 ec 1b 60       	if (r6 <= r0) goto 0x36 <LZ4_decompress_safe_continue+0x11A : 1167bc >			  ## lz4.c:540:21
  116786:    c0 1d             	r0 = r4 + r6			  ## lz4.c:541:49
  116788:    b1 16             	r1 = r11
  11678a:    ea 16             	r10 = r14
  11678c:    9e 16             	r14 = r9
  11678e:    d9 16             	r9 = r13
  116790:    c5 14             	r13 = 0
  116792:    04 82             	goto 0x4 <LZ4_decompress_safe_continue+0xF6 : 116798 >
  116794:    12 07             	r2 = b[r1++=0x1] (u)			  ## lz4.c:544:33
  116796:    c2 07             	b[r4++=0x1] = r2			  ## lz4.c:544:31
  116798:    80 e9 fc 41       	if (r4 < r0) goto -0x8 <LZ4_decompress_safe_continue+0xF2 : 116794 >
  11679c:    04 99             	goto 0x32 <LZ4_decompress_safe_continue+0x12E : 1167d0 >
  11679e:    0a ec fe 40       	if (r4 > r10) goto 0x1fc <LZ4_decompress_safe_continue+0x2FC : 11699e >
  1167a2:    16 03             	rep 0x4 r6 {			  ## lz4.c:323:5
  1167a4:    10 07             		r0 = b[r1++=0x1] (u)			  ## lz4.c:323:5
  1167a6:    f0 07             		b[r7++=0x1] = r0
                               	}			  ## lz4.c:323:5
  1167a8:    f6 5c             	if (r6 != 0) goto -0x8 <LZ4_decompress_safe_continue+0x100 : 1167a2 >			  ## lz4.c:323:5
  1167aa:    04 92             	goto 0x24 <LZ4_decompress_safe_continue+0x12E : 1167d0 >			  ## lz4.c:323:5
  1167ac:    62 d6             	r2 = r6  #			  ## lz4.c:532:17
  1167ae:    00 23             		 r0 = [sp+12]			  ## lz4.c:532:37
  1167b0:    b4 e0 02 1a       	r1 = r0 - r10			  ## lz4.c:532:37
  1167b4:    70 16             	r0 = r7			  ## lz4.c:532:17
  1167b6:    bf ea 6f d5       	call -0x5522 <memmove : 111298 >			  ## lz4.c:532:17
  1167ba:    04 86             	goto 0xc <LZ4_decompress_safe_continue+0x126 : 1167c8 >			  ## lz4.c:532:17
  1167bc:    40 16             	r0 = r4			  ## lz4.c:547:21
  1167be:    b1 16             	r1 = r11			  ## lz4.c:547:21
  1167c0:    62 16             	r2 = r6			  ## lz4.c:547:21
  1167c2:    bf ea 69 d5       	call -0x552e <memmove : 111298 >			  ## lz4.c:547:21
  1167c6:    64 18             	r4 += r6			  ## lz4.c:548:24
  1167c8:    ea 16             	r10 = r14
  1167ca:    9e 16             	r14 = r9
  1167cc:    d9 16             	r9 = r13
  1167ce:    c5 14             	r13 = 0
  1167d0:    58 40             	r0 = b[r5+0x0] (u)			  ## lz4.c:455:32
  1167d2:    82 a4             	r2 = r0 >> 0x4			  ## lz4.c:456:30
  1167d4:    c5 21             	r5 += 0x1			  ## lz4.c:455:35
  1167d6:    82 f8 15 1e       	if (r2 != 0xf) goto 0x2a <LZ4_decompress_safe_continue+0x162 : 116804 >
  1167da:    42 2f             	r2 = 0xf
  1167dc:    51 07             	r1 = b[r5++=0x1] (u)			  ## lz4.c:459:21
  1167de:    12 18             	r2 += r1			  ## lz4.c:460:24
  1167e0:    91 f8 02 fe       	if (r1 != 0xff) goto 0x4 <LZ4_decompress_safe_continue+0x146 : 1167e8 >
  1167e4:    88 e9 fa 51       	if (r5 < r8) goto -0xc <LZ4_decompress_safe_continue+0x13A : 1167dc >
  1167e8:    23 1d             	r3 = r2 + r4
  1167ea:    41 21             	r1 = 0x1
  1167ec:    13 e9 00 02       	if (r3 >= r2) {
  1167f0:    41 20             		r1 = 0x0
                               	}
  1167f2:    81 f8 d4 00       	if (r1 != 0x0) goto 0x1a8 <LZ4_decompress_safe_continue+0x2FC : 11699e >
  1167f6:    2b 1d             	r3 = r2 + r5
  1167f8:    41 21             	r1 = 0x1
  1167fa:    13 e9 00 02       	if (r3 >= r2) {
  1167fe:    41 20             		r1 = 0x0
                               	}
  116800:    81 f8 cd 00       	if (r1 != 0x0) goto 0x19a <LZ4_decompress_safe_continue+0x2FC : 11699e >
  116804:    c7 1c             	r7 = r4 + r2			  ## lz4.c:471:18
  116806:    d3 1c             	r3 = r5 + r2			  ## lz4.c:472:89
  116808:    09 ec 02 70       	if (r7 > r9) goto 0x4 <LZ4_decompress_safe_continue+0x16E : 116810 >
  11680c:    8e ec 6f 31       	if (r3 <= r14) goto -0x122 <LZ4_decompress_safe_continue+0x4C : 1166ee >
  116810:    00 22             	r0 = [sp+8]
  116812:    00 ec c4 70       	if (r7 > r0) goto 0x188 <LZ4_decompress_safe_continue+0x2FC : 11699e >
  116816:    00 21             	r0 = [sp+4]
  116818:    80 e8 c1 30       	if (r3 != r0) goto 0x182 <LZ4_decompress_safe_continue+0x2FC : 11699e >
  11681c:    40 15             	r1_r0 = r5_r4			  ## lz4.c:489:13
  11681e:    bf ea 3b d5       	call -0x558a <memmove : 111298 >			  ## lz4.c:489:13
  116822:    b4 e0 72 0b       	r0 = r7 - r11			  ## lz4.c:603:35
  116826:    54 9e             	goto 0x17c <LZ4_decompress_safe_continue+0x302 : 1169a4 >			  ## lz4.c:603:35
  116828:    04 f8 d1 00       	if (r4 == 0x0) goto 0x1a2 <LZ4_decompress_safe_continue+0x32C : 1169ce >
  11682c:    00 eb 01 40       	{r14, r0} = [r0+]			  ## lz4.c:665:121
  116830:    24 18             	r4 += r2			  ## lz4.c:425:27
  116832:    9a 1c             	r2 = r1 + r3			  ## lz4.c:422:33
  116834:    b4 e0 b2 ac       	r10 = r11 - r12			  ## lz4.c:665:72
  116838:    e0 18             	r0 += r14			  ## lz4.c:429:57
  11683a:    36 f1 f1 2f       	r6 = r2 + -0xf  #
  11683e:    80 23             		 [sp+12] = r0
  116840:    3f f1 fb 2f       	r15 = r2 + -0x5  #
  116844:    82 20             		 [sp] = r2
  116846:    3c f1 fb 4f       	r12 = r4 + -0x5  #
  11684a:    84 21             		 [sp+4] = r4
  11684c:    39 e1 f8 2f       	r9 = r2 + -0x8
  116850:    3d e1 f4 4f       	r13 = r4 + -0xc
  116854:    b4 16             	r4 = r11
  116856:    15 16             	r5 = r1
  116858:    d4 e9 09 e0       	[sp+8] = r14
  11685c:    34 95             	goto 0xea <LZ4_decompress_safe_continue+0x2A6 : 116948 >
  11685e:    12 03             	rep 0x4 r2 {			  ## lz4.c:323:5
  116860:    51 07             		r1 = b[r5++=0x1] (u)			  ## lz4.c:323:5
  116862:    c1 07             		b[r4++=0x1] = r1
                               	}			  ## lz4.c:323:5
  116864:    f2 5c             	if (r2 != 0) goto -0x8 <LZ4_decompress_safe_continue+0x1BC : 11685e >			  ## lz4.c:323:5
  116866:    39 41             	r1 = b[r3+0x1] (u)			  ## lz4.c:499:18
  116868:    3c 40             	r4 = b[r3+0x0] (u)			  ## lz4.c:499:18
  11686a:    a4 e1 20 14       	r4 <= insert(r1, p:0x8, l:0x8)			  ## lz4.c:499:18
  11686e:    71 1f             	r1 = r7 - r4			  ## lz4.c:501:20
  116870:    c0 e1 e0 59       	r5 = r14 >> 0x10			  ## lz4.c:502:27
  116874:    3a 82             	r2 = r3 + 0x2			  ## lz4.c:500:12
  116876:    85 44             	if (r5 != 0) goto 0x8 <LZ4_decompress_safe_continue+0x1DE : 116880 >
  116878:    b4 e0 10 3e       	r3 = r1 + r14			  ## lz4.c:502:31
  11687c:    8a e9 99 30       	if (r3 < r10) goto 0x132 <LZ4_decompress_safe_continue+0x310 : 1169b2 >			  ## lz4.c:502:31
  116880:    43 20             	r3 = 0x0
  116882:    fb 43             	b[r7+0x3] = r3			  ## lz4.c:234:30
  116884:    fb 42             	b[r7+0x2] = r3			  ## lz4.c:234:30
  116886:    c3 a8             	r3 = r4 >> 0x8			  ## lz4.c:234:30
  116888:    70 f1 f0 00       	r0 = r0 & 0xFFFFFF0F  #			  ## lz4.c:508:24
  11688c:    fc 40             		 b[r7+0x0] = r4			  ## lz4.c:234:30
  11688e:    fb 41             	b[r7+0x1] = r3			  ## lz4.c:234:30
  116890:    80 f8 10 1e       	if (r0 != 0xf) goto 0x20 <LZ4_decompress_safe_continue+0x212 : 1168b4 >			  ## lz4.c:234:30
  116894:    40 2f             	r0 = 0xf
  116896:    2d 81             	r5 = r2 + 0x1			  ## lz4.c:512:24
  116898:    0f ec 8c 50       	if (r5 > r15) goto 0x118 <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  11689c:    52 d6             	r2 = r5  #
  11689e:    2b 40             		 r3 = b[r2+0x0] (u)			  ## lz4.c:512:21
  1168a0:    30 18             	r0 += r3			  ## lz4.c:516:24
  1168a2:    13 f8 f8 ff       	if (r3 == 0xff) goto -0x10 <LZ4_decompress_safe_continue+0x1F4 : 116896 >
  1168a6:    8b 1d             	r3 = r0 + r7
  1168a8:    42 21             	r2 = 0x1
  1168aa:    13 e9 00 00       	if (r3 >= r0) {
  1168ae:    42 20             		r2 = 0x0
                               	}
  1168b0:    02 42             	if (r2 == 0) goto 0x4 <LZ4_decompress_safe_continue+0x214 : 1168b6 >
  1168b2:    44 80             	goto 0x100 <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  1168b4:    25 16             	r5 = r2
  1168b6:    08 e1 04 00       	r8 = r0 + 0x4			  ## lz4.c:522:16
  1168ba:    b4 e0 70 48       	r4 = r7 + r8
  1168be:    0a e9 28 10       	if (r1 >= r10) goto 0x50 <LZ4_decompress_safe_continue+0x270 : 116912 >			  ## lz4.c:525:36
  1168c2:    0c ec 77 40       	if (r4 > r12) goto 0xee <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  1168c6:    de 16             	r14 = r13
  1168c8:    9d 16             	r13 = r9
  1168ca:    c9 16             	r9 = r12
  1168cc:    b4 e0 a2 c1       	r12 = r10 - r1			  ## lz4.c:530:46
  1168d0:    8c ec 27 80       	if (r8 <= r12) goto 0x4e <LZ4_decompress_safe_continue+0x280 : 116922 >
  1168d4:    c2 d6             	r2 = r12  #			  ## lz4.c:538:17
  1168d6:    00 23             		 r0 = [sp+12]			  ## lz4.c:538:36
  1168d8:    b4 e0 02 1c       	r1 = r0 - r12			  ## lz4.c:538:36
  1168dc:    70 16             	r0 = r7			  ## lz4.c:538:17
  1168de:    bf ea db d4       	call -0x564a <memmove : 111298 >			  ## lz4.c:538:17
  1168e2:    b4 e0 82 8c       	r8 = r8 - r12			  ## lz4.c:537:48
  1168e6:    b4 e0 70 4c       	r4 = r7 + r12			  ## lz4.c:539:20
  1168ea:    b4 e0 42 0a       	r0 = r4 - r10			  ## lz4.c:540:44
  1168ee:    80 ec 20 80       	if (r8 <= r0) goto 0x40 <LZ4_decompress_safe_continue+0x290 : 116932 >			  ## lz4.c:540:21
  1168f2:    b4 e0 40 08       	r0 = r4 + r8			  ## lz4.c:541:49
  1168f6:    a3 16             	r3 = r10
  1168f8:    9c 16             	r12 = r9
  1168fa:    d9 16             	r9 = r13
  1168fc:    ed 16             	r13 = r14
  1168fe:    d4 e9 08 e0       	r14 = [sp+8]
  116902:    04 83             	goto 0x6 <LZ4_decompress_safe_continue+0x268 : 11690a >
  116904:    d0 ee a1 20       	r2 = b[r10++=0x1] (u)			  ## lz4.c:544:33
  116908:    c2 07             	b[r4++=0x1] = r2			  ## lz4.c:544:31
  11690a:    80 e9 fb 41       	if (r4 < r0) goto -0xa <LZ4_decompress_safe_continue+0x262 : 116904 >
  11690e:    3a 16             	r10 = r3
  116910:    04 9b             	goto 0x36 <LZ4_decompress_safe_continue+0x2A6 : 116948 >
  116912:    0c ec 4f 40       	if (r4 > r12) goto 0x9e <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  116916:    18 03             	rep 0x4 r8 {			  ## lz4.c:323:5
  116918:    10 07             		r0 = b[r1++=0x1] (u)			  ## lz4.c:323:5
  11691a:    f0 07             		b[r7++=0x1] = r0
                               	}			  ## lz4.c:323:5
  11691c:    88 f8 fb 01       	if (r8 != 0x0) goto -0xa <LZ4_decompress_safe_continue+0x274 : 116916 >			  ## lz4.c:323:5
  116920:    04 93             	goto 0x26 <LZ4_decompress_safe_continue+0x2A6 : 116948 >			  ## lz4.c:323:5
  116922:    82 d6             	r2 = r8  #			  ## lz4.c:532:17
  116924:    00 23             		 r0 = [sp+12]			  ## lz4.c:532:37
  116926:    b4 e0 02 1c       	r1 = r0 - r12			  ## lz4.c:532:37
  11692a:    70 16             	r0 = r7			  ## lz4.c:532:17
  11692c:    bf ea b4 d4       	call -0x5698 <memmove : 111298 >			  ## lz4.c:532:17
  116930:    04 86             	goto 0xc <LZ4_decompress_safe_continue+0x29C : 11693e >			  ## lz4.c:532:17
  116932:    40 16             	r0 = r4			  ## lz4.c:547:21
  116934:    a1 16             	r1 = r10			  ## lz4.c:547:21
  116936:    82 16             	r2 = r8			  ## lz4.c:547:21
  116938:    bf ea ae d4       	call -0x56a4 <memmove : 111298 >			  ## lz4.c:547:21
  11693c:    84 18             	r4 += r8			  ## lz4.c:548:24
  11693e:    9c 16             	r12 = r9
  116940:    d9 16             	r9 = r13
  116942:    ed 16             	r13 = r14
  116944:    d4 e9 08 e0       	r14 = [sp+8]
  116948:    58 40             	r0 = b[r5+0x0] (u)			  ## lz4.c:455:32
  11694a:    82 a4             	r2 = r0 >> 0x4			  ## lz4.c:456:30
  11694c:    c5 21             	r5 += 0x1			  ## lz4.c:455:35
  11694e:    82 f8 13 1e       	if (r2 != 0xf) goto 0x26 <LZ4_decompress_safe_continue+0x2D6 : 116978 >
  116952:    42 2f             	r2 = 0xf
  116954:    51 07             	r1 = b[r5++=0x1] (u)			  ## lz4.c:459:21
  116956:    12 18             	r2 += r1			  ## lz4.c:460:24
  116958:    91 f8 02 fe       	if (r1 != 0xff) goto 0x4 <LZ4_decompress_safe_continue+0x2BE : 116960 >
  11695c:    86 e9 fa 51       	if (r5 < r6) goto -0xc <LZ4_decompress_safe_continue+0x2B2 : 116954 >
  116960:    23 1d             	r3 = r2 + r4
  116962:    41 21             	r1 = 0x1
  116964:    13 e9 00 02       	if (r3 >= r2) {
  116968:    41 20             		r1 = 0x0
                               	}
  11696a:    91 44             	if (r1 != 0) goto 0x48 <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  11696c:    2b 1d             	r3 = r2 + r5
  11696e:    41 21             	r1 = 0x1
  116970:    13 e9 00 02       	if (r3 >= r2) {
  116974:    41 20             		r1 = 0x0
                               	}
  116976:    81 5e             	if (r1 != 0) goto 0x3c <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  116978:    c7 1c             	r7 = r4 + r2			  ## lz4.c:471:18
  11697a:    d3 1c             	r3 = r5 + r2			  ## lz4.c:472:89
  11697c:    0d ec 02 70       	if (r7 > r13) goto 0x4 <LZ4_decompress_safe_continue+0x2E2 : 116984 >
  116980:    89 ec 6d 31       	if (r3 <= r9) goto -0x126 <LZ4_decompress_safe_continue+0x1BC : 11685e >
  116984:    00 21             	r0 = [sp+4]
  116986:    00 ec 15 70       	if (r7 > r0) goto 0x2a <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  11698a:    00 20             	r0 = [sp]
  11698c:    80 e8 12 30       	if (r3 != r0) goto 0x24 <LZ4_decompress_safe_continue+0x312 : 1169b4 >
  116990:    40 15             	r1_r0 = r5_r4			  ## lz4.c:489:13
  116992:    bf ea 81 d4       	call -0x56fe <memmove : 111298 >			  ## lz4.c:489:13
  116996:    b4 e0 72 0b       	r0 = r7 - r11			  ## lz4.c:603:35
  11699a:    04 8f             	goto 0x1e <LZ4_decompress_safe_continue+0x318 : 1169ba >
  11699c:    25 16             	r5 = r2
  11699e:    00 24             	r0 = [sp+16]			  ## lz4.c:610:18
  1169a0:    f8 3f             	r0 += -0x1			  ## lz4.c:610:18
  1169a2:    08 1f             	r0 = r0 - r5			  ## lz4.c:610:47
  1169a4:    02 25             	r2 = [sp+20]
  1169a6:    80 fd 10 02       	ifs (r0 < 0x1) goto 0x20 <LZ4_decompress_safe_continue+0x328 : 1169ca >
  1169aa:    b4 f0 b0 10       	r1 = r11 + r0  #			  ## lz4.c:681:42
  1169ae:    a0 63             		 [r2+0xc] = r0			  ## lz4.c:680:27
  1169b0:    04 8b             	goto 0x16 <LZ4_decompress_safe_continue+0x326 : 1169c8 >			  ## lz4.c:680:27
  1169b2:    25 16             	r5 = r2
  1169b4:    00 24             	r0 = [sp+16]			  ## lz4.c:610:18
  1169b6:    f8 3f             	r0 += -0x1			  ## lz4.c:610:18
  1169b8:    08 1f             	r0 = r0 - r5			  ## lz4.c:610:47
  1169ba:    02 25             	r2 = [sp+20]
  1169bc:    80 fd 05 02       	ifs (r0 < 0x1) goto 0xa <LZ4_decompress_safe_continue+0x328 : 1169ca >
  1169c0:    68 e8 0c 20       	[r2+0xc] += r0			  ## lz4.c:669:27
  1169c4:    21 62             	r1 = [r2+0x8] 			  ## lz4.c:670:27
  1169c6:    01 18             	r1 += r0			  ## lz4.c:670:27
  1169c8:    a1 62             	[r2+0x8] = r1			  ## lz4.c:670:27
  1169ca:    02 86             	sp += 0x18
  1169cc:    5f 04             	{pc, r15-r4} = [sp++]			  ## lz4.c:685:1
  1169ce:    40 21             	r0 = 0x1
  1169d0:    83 f8 04 02       	if (r3 != 0x1) goto 0x8 <LZ4_decompress_safe_continue+0x33A : 1169dc >
  1169d4:    19 40             	r1 = b[r1+0x0] (u)
  1169d6:    31 e8 00 00       	if (r1 == 0x0) {
  1169da:    10 16             		r0 = r1
                               	}
  1169dc:    a0 e0 00 00       	r0 = 0x0 - r0
  1169e0:    f7 94             	goto -0x18 <LZ4_decompress_safe_continue+0x328 : 1169ca >


Run_App:
  1169e2:    7e 04             	[--sp] = {rets, r14-r4}			  ## bankSwitch.c:15:0
  1169e4:    c2 9f             	sp += -0x84			  ## bankSwitch.c:15:0
  1169e6:    04 16             	r4 = r0			  ## bankSwitch.c:15:0
  1169e8:    04 eb 05 00       	{r2, r0} = [r4+]			  ## sdfile.c:29:60
  1169ec:    ed 84             	r5 = sp + 100			  ## sdfile.c:29:60
  1169ee:    4b 20             	r3 = 0x20			  ## sdfile.c:29:5
  1169f0:    51 d6             	r1 = r5  #			  ## sdfile.c:29:5
  1169f2:    46 63             		 r6 = [r4+0xc] 			  ## sdfile.c:29:11
  1169f4:    c6 00             	call r6			  ## sdfile.c:29:5
  1169f6:    40 e1 02 50       	r0 = r5 | 0x2			  ## sdfile.c:31:24
  1169fa:    41 3e             	r1 = 0x1e			  ## sdfile.c:31:12
  1169fc:    bf ea 66 fc       	call -0x734 <chip_crc16 : 1162cc >			  ## sdfile.c:31:12
  116a00:    00 f8 82 00       	if (r0 == 0x0) goto 0x104 <Run_App+0x126 : 116b08 >			  ## sdfile.c:31:12
  116a04:    d8 e9 64 10       	r1 = h[sp+100] (u)			  ## sdfile.c:34:29
  116a08:    80 e8 7e 10       	if (r1 != r0) goto 0xfc <Run_App+0x126 : 116b08 >			  ## sdfile.c:34:29
  116a0c:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## sdfile.c:35:31
  116a10:    02 f1 20 10       	r2 = r1 + 0x20  #			  ## sdfile.c:36:64
  116a14:    46 63             		 r6 = [r4+0xc] 			  ## sdfile.c:35:15
  116a16:    cd 84             	r5 = sp + 68			  ## sdfile.c:35:15
  116a18:    4b 20             	r3 = 0x20			  ## sdfile.c:35:9
  116a1a:    51 16             	r1 = r5			  ## sdfile.c:35:9
  116a1c:    c6 00             	call r6			  ## sdfile.c:35:9
  116a1e:    f8 e8 34 80       	r8 = sp + 52			  ## sdfile.c:35:9
  116a22:    17 3c             	r7 = -0x4			  ## sdfile.c:35:9
  116a24:    04 93             	goto 0x26 <Run_App+0x6A : 116a4c >			  ## sdfile.c:35:9
  116a26:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:32:57
  116a2a:    52 61             	r2 = [r5+0x4] 			  ## bankSwitch.c:32:75
  116a2c:    12 d8             	r2 += r1  #			  ## bankSwitch.c:32:68
  116a2e:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:32:19
  116a30:    a9 94             	r1 = sp + 52			  ## bankSwitch.c:32:19
  116a32:    43 30             	r3 = 0x10			  ## bankSwitch.c:32:13
  116a34:    c6 00             	call r6			  ## bankSwitch.c:32:13
  116a36:    00 49             	if (r0 == 0) goto 0x12 <Run_App+0x68 : 116a4a >			  ## bankSwitch.c:32:13
  116a38:    a8 94             	r0 = sp + 52
  116a3a:    41 2e             	r1 = 0xe			  ## bankSwitch.c:33:19
  116a3c:    bf ea 46 fc       	call -0x774 <chip_crc16 : 1162cc >			  ## bankSwitch.c:33:19
  116a40:    00 44             	if (r0 == 0) goto 0x8 <Run_App+0x68 : 116a4a >			  ## bankSwitch.c:33:19
  116a42:    50 ed 8e 10       	r1 = h[r8+0xe] (u)			  ## bankSwitch.c:35:32
  116a46:    00 e8 03 10       	if (r1 == r0) goto 0x6 <Run_App+0x6E : 116a50 >			  ## bankSwitch.c:35:32
  116a4a:    c7 21             	r7 += 0x1			  ## bankSwitch.c:30:9
  116a4c:    f7 4c             	if (r7 != 0) goto -0x28 <Run_App+0x44 : 116a26 >
  116a4e:    24 9c             	goto 0xb8 <Run_App+0x126 : 116b08 >
  116a50:    50 61             	r0 = [r5+0x4] 			  ## bankSwitch.c:36:35
  116a52:    01 2f             	r1 = [sp+60]			  ## bankSwitch.c:36:49
  116a54:    d4 e9 38 80       	r8 = [sp+56]			  ## bankSwitch.c:38:35
  116a58:    dc e9 50 20       	r2 = b[sp+80] (u)			  ## bankSwitch.c:50:14
  116a5c:    d8 e9 36 a0       	r10 = h[sp+54] (u)			  ## bankSwitch.c:37:29
  116a60:    b4 e0 10 c0       	r12 = r1 + r0			  ## bankSwitch.c:36:40
  116a64:    f8 e8 44 90       	r9 = sp + 68
  116a68:    8e 16             	r14 = r8
  116a6a:    52 e8 0a 30       	if ((r2 & 0x40) == 0) goto 0x14 <Run_App+0xA0 : 116a82 >
  116a6e:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:51:68
  116a72:    b4 f0 10 2c       	r2 = r1 + r12  #			  ## bankSwitch.c:51:79
  116a76:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:51:15
  116a78:    a9 84             	r1 = sp + 36			  ## bankSwitch.c:51:15
  116a7a:    43 30             	r3 = 0x10			  ## bankSwitch.c:51:9
  116a7c:    c6 00             	call r6			  ## bankSwitch.c:51:9
  116a7e:    d4 e9 2c e0       	r14 = [sp+44]			  ## bankSwitch.c:52:35
  116a82:    f8 e8 34 b0       	r11 = sp + 52
  116a86:    17 3c             	r7 = -0x4
  116a88:    cd ff 04 35 1e 00 	r13 = 0x1e3504 <__stub_LZ4_decompress_safe_continue+0xCB508 : 1e3504 >
  116a8e:    04 92             	goto 0x24 <Run_App+0xD2 : 116ab4 >
  116a90:    50 ec 40 00       	r1_r0 = d[r4+0x0]			  ## bankSwitch.c:58:67
  116a94:    b4 f0 10 2c       	r2 = r1 + r12  #			  ## bankSwitch.c:58:78
  116a98:    46 63             		 r6 = [r4+0xc] 			  ## bankSwitch.c:58:19
  116a9a:    e1 16             	r1 = r14			  ## bankSwitch.c:58:13
  116a9c:    a3 16             	r3 = r10			  ## bankSwitch.c:58:13
  116a9e:    c6 00             	call r6			  ## bankSwitch.c:58:13
  116aa0:    00 48             	if (r0 == 0) goto 0x10 <Run_App+0xD0 : 116ab2 >			  ## bankSwitch.c:58:13
  116aa2:    d0 ec d0 00       	r0 = [r13+0x0]			  ## bankSwitch.c:67:27
  116aa6:    50 ed bc 10       	r1 = h[r11+0xc] (u)			  ## bankSwitch.c:70:24
  116aaa:    80 17             	r0 = r0.l (u)			  ## bankSwitch.c:70:28
  116aac:    80 e8 01 10       	if (r1 != r0) goto 0x2 <Run_App+0xD0 : 116ab2 >			  ## bankSwitch.c:70:28
  116ab0:    80 43             	if (r0 != 0) goto 0x6 <Run_App+0xD6 : 116ab8 >
  116ab2:    c7 21             	r7 += 0x1			  ## bankSwitch.c:30:9
  116ab4:    f7 4d             	if (r7 != 0) goto -0x26 <Run_App+0xAE : 116a90 >
  116ab6:    14 88             	goto 0x50 <Run_App+0x126 : 116b08 >
  116ab8:    50 ee 9c 00       	r0 = b[r9+0xc] (u)			  ## bankSwitch.c:82:14
  116abc:    50 e8 18 30       	if ((r0 & 0x40) == 0) goto 0x30 <Run_App+0x10E : 116af0 >			  ## bankSwitch.c:82:14
  116ac0:    d0 e9 24 00       	r1_r0 = d[sp+36]			  ## bankSwitch.c:85:82
  116ac4:    10 d8             	r0 += r1  #			  ## lz4.c:643:50
  116ac6:    80 24             		 [sp+16] = r0			  ## lz4.c:642:23
  116ac8:    01 2b             	r1 = [sp+44]			  ## bankSwitch.c:88:91
  116aca:    80 23             	[sp+12] = r0			  ## lz4.c:643:22
  116acc:    42 20             	r2 = 0x0			  ## lz4.c:644:25
  116ace:    43 20             	r3 = 0x0			  ## lz4.c:644:25
  116ad0:    d0 e9 05 20       	d[sp+4] = r3_r2			  ## lz4.c:644:25
  116ad4:    b4 e0 12 28       	r2 = r1 - r8			  ## bankSwitch.c:88:101
  116ad8:    01 f1 10 e0       	r1 = r14 + 0x10  #			  ## bankSwitch.c:87:77
  116adc:    82 20             		 [sp] = r2			  ## bankSwitch.c:87:24
  116ade:    33 e1 f0 af       	r3 = r10 + -0x10			  ## bankSwitch.c:88:52
  116ae2:    88 84             	r0 = sp + 4			  ## bankSwitch.c:88:52
  116ae4:    82 16             	r2 = r8			  ## bankSwitch.c:87:24
  116ae6:    bf ea dc fd       	call -0x448 <LZ4_decompress_safe_continue : 1166a2 >			  ## bankSwitch.c:87:24
  116aea:    01 2c             	r1 = [sp+48]			  ## bankSwitch.c:90:39
  116aec:    81 e8 0c 00       	if (r0 != r1) goto 0x18 <Run_App+0x126 : 116b08 >
  116af0:    64 e0 00 0b       	r0 = icfg			  ## bankSwitch.c:104:5
  116af4:    b8 28             	r0 &= 0xfffffeff			  ## bankSwitch.c:105:9
  116af6:    64 e0 80 0b       	icfg = r0			  ## bankSwitch.c:106:5
  116afa:    60 00             	cli			  ## bankSwitch.c:107:5
  116afc:    40 d6             	r0 = r4  #			  ## bankSwitch.c:110:5
  116afe:    51 61             		 r1 = [r5+0x4] 			  ## bankSwitch.c:110:57
  116b00:    c2 ff fc 1b 03 00 	r2 = 0x31bfc <boot_arg_list : 31bfc >			  ## bankSwitch.c:110:5
  116b06:    c8 00             	call r8			  ## bankSwitch.c:110:5
  116b08:    22 81             	sp += 0x84
  116b0a:    5e 04             	{pc, r14-r4} = [sp++]			  ## bankSwitch.c:113:1


spi_portd_a:
  116b0c:    7a 04             	[--sp] = {rets, r10-r4}			  ## boot_flash.c:75:0
  116b0e:    c7 ff d4 5c 11 00 	r7 = 0x115cd4 <spi_flash_io_nor : 115cd4 >			  ## boot_flash.c:75:0
  116b14:    c4 ff e8 1b 03 00 	r4 = 0x31be8 <spi_flash_io : 31be8 >			  ## boot_flash.c:75:0
  116b1a:    40 16             	r0 = r4			  ## boot_flash.c:79:5
  116b1c:    71 16             	r1 = r7			  ## boot_flash.c:79:5
  116b1e:    10 83             	rep 0x4 0x4 {			  ## boot_flash.c:79:5
  116b20:    12 05             		r2 = [r1++=0x4] 			  ## boot_flash.c:79:5
  116b22:    82 05             		[r0++=0x4] = r2
                               	}			  ## boot_flash.c:79:5
  116b24:    c0 ff e0 1b 03 00 	r0 = 0x31be0 <spi0_port : 31be0 >			  ## boot_flash.c:81:27
  116b2a:    05 60             	r5 = [r0+0x0] 			  ## boot_flash.c:81:27
  116b2c:    c0 ff 00 02 1f 00 	r0 = 0x1f0200 <__stub_LZ4_decompress_safe_continue+0xD8204 : 1f0200 >			  ## spi0.c:220:17
  116b32:    40 ea 00 00       	[r0+0x0] = 0x0			  ## spi0.c:220:17
  116b36:    c8 ff 00 1c 1e 00 	r8 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## spi0.c:220:17
  116b3c:    40 ea 20 80       	[r8+0x0] = 0x20			  ## spi0.c:221:18
  116b40:    58 41             	r0 = b[r5+0x1] (u)			  ## spi0.c:222:28
  116b42:    d0 ec 85 00       	[r8+0x4] = r0			  ## spi0.c:222:19
  116b46:    58 60             	r0 = h[r5+0x0] (u)			  ## spi0.c:224:26
  116b48:    86 a3             	r6 = r0 >> 0x3			  ## spi0.c:224:26
  116b4a:    60 e1 1f 60       	r0 = r6 & 0x1F			  ## spi0.c:224:26
  116b4e:    bf ea 48 fd       	call -0x570 <spi_set_port : 1165e2 >			  ## spi0.c:54:2
  116b52:    c9 ff 88 50 1e 00 	r9 = 0x1e5088 <__stub_LZ4_decompress_safe_continue+0xCD08C : 1e5088 >			  ## spi0.c:54:2
  116b58:    60 ff 1f 60 0b 00 	if ((r6 & 0x1F) == 0) goto 0x16 <spi_portd_a+0x68 : 116b74 >			  ## spi0.c:54:2
  116b5e:    00 e1 0c 90       	r0 = r9 + 0xc
  116b62:    31 e1 fc 0f       	r1 = r0 + -0x4
  116b66:    13 3d             	r3 = -0x3
  116b68:    4a e0 02 00       	r10 = 0x2
  116b6c:    36 e1 ec 0f       	r6 = r0 + -0x14
  116b70:    92 16             	r2 = r9
  116b72:    04 8b             	goto 0x16 <spi_portd_a+0x7E : 116b8a >
  116b74:    00 e1 4c 90       	r0 = r9 + 0x4c
  116b78:    31 e1 fc 0f       	r1 = r0 + -0x4
  116b7c:    13 37             	r3 = -0x9
  116b7e:    32 e1 f4 0f       	r2 = r0 + -0xc
  116b82:    4a e0 08 00       	r10 = 0x8
  116b86:    36 e1 ec 0f       	r6 = r0 + -0x14
  116b8a:    64 e8 00 6a       	[r6+0x0] |= r10
  116b8e:    64 e8 02 23       	[r2+0x0] &= r3
  116b92:    64 e8 02 13       	[r1+0x0] &= r3
  116b96:    64 e8 02 03       	[r0+0x0] &= r3
  116b9a:    d2 ef 01 90       	[r9+0x48] &= 0xFFFFFFFE
  116b9e:    d3 ef 01 90       	[r9+0x4c] &= 0xFFFFFFFE
  116ba2:    d0 ef 01 90       	[r9+0x40] &= 0xFFFFFFFE
  116ba6:    12 ef 02 90       	[r9+0x48] |= 0x2
  116baa:    d3 ef 02 90       	[r9+0x4c] &= 0xFFFFFFFD
  116bae:    10 ef 02 90       	[r9+0x40] |= 0x2
  116bb2:    00 ef 04 10       	[r1+0x0] |= 0x4
  116bb6:    c0 ef 04 00       	[r0+0x0] &= 0xFFFFFFFB
  116bba:    00 ef 04 20       	[r2+0x0] |= 0x4
  116bbe:    00 ef 10 90       	[r9+0x0] |= 0x10
  116bc2:    02 ef 10 90       	[r9+0x8] |= 0x10
  116bc6:    c3 ef 10 90       	[r9+0xc] &= 0xFFFFFFEF
  116bca:    5a 60             	r2 = h[r5+0x0] (u)			  ## spi0.c:228:16
  116bcc:    d0 ec 80 10       	r1 = [r8+0x0]			  ## spi0.c:228:16
  116bd0:    00 e1 94 90       	r0 = r9 + 0x94			  ## spi0.c:228:16
  116bd4:    60 ff 07 20 06 00 	if ((r2 & 0x7) == 0) goto 0xc <spi_portd_a+0xDA : 116be6 >			  ## spi0.c:228:9
  116bda:    31 23             	r1 |= 0x8			  ## spi0.c:229:22
  116bdc:    d0 ec 81 10       	[r8+0x0] = r1			  ## spi0.c:229:22
  116be0:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:230:24
  116be2:    b9 21             	r1 &= 0xfffffffd			  ## spi0.c:230:24
  116be4:    04 85             	goto 0xa <spi_portd_a+0xE4 : 116bf0 >			  ## spi0.c:230:24
  116be6:    b9 23             	r1 &= 0xfffffff7			  ## spi0.c:233:22
  116be8:    d0 ec 81 10       	[r8+0x0] = r1			  ## spi0.c:233:22
  116bec:    01 60             	r1 = [r0+0x0] 			  ## spi0.c:234:24
  116bee:    31 21             	r1 |= 0x2			  ## spi0.c:234:24
  116bf0:    81 60             	[r0+0x0] = r1
  116bf2:    00 ef 01 80       	[r8+0x0] |= 0x1			  ## spi0.c:237:18
  116bf6:    40 21             	r0 = 0x1			  ## spi0.c:238:5
  116bf8:    bf ea 06 fd       	call -0x5f4 <SPI0_cs : 116608 >			  ## spi0.c:238:5
  116bfc:    40 20             	r0 = 0x0			  ## norflash.c:219:5
  116bfe:    bf ea 03 fd       	call -0x5fa <SPI0_cs : 116608 >			  ## norflash.c:219:5
  116c02:    68 2b             	r0 = 0xab			  ## norflash.c:221:5
  116c04:    bf ea 28 fd       	call -0x5b0 <SPI0_WriteByte : 116658 >			  ## norflash.c:221:5
  116c08:    78 3f             	r0 = 0xff			  ## norflash.c:224:5
  116c0a:    bf ea 25 fd       	call -0x5b6 <SPI0_WriteByte : 116658 >			  ## norflash.c:224:5
  116c0e:    78 3f             	r0 = 0xff			  ## norflash.c:225:5
  116c10:    bf ea 22 fd       	call -0x5bc <SPI0_WriteByte : 116658 >			  ## norflash.c:225:5
  116c14:    78 3f             	r0 = 0xff			  ## norflash.c:226:5
  116c16:    bf ea 1f fd       	call -0x5c2 <SPI0_WriteByte : 116658 >			  ## norflash.c:226:5
  116c1a:    bf ea 24 fd       	call -0x5b8 <SPI0_ReadByte : 116666 >			  ## norflash.c:228:5
  116c1e:    40 21             	r0 = 0x1			  ## norflash.c:229:5
  116c20:    bf ea f2 fc       	call -0x61c <SPI0_cs : 116608 >			  ## norflash.c:229:5
  116c24:    46 e0 6a ff       	r6 = -0x96
  116c28:    04 92             	goto 0x24 <spi_portd_a+0x142 : 116c4e >
  116c2a:    40 20             	r0 = 0x0			  ## norflash.c:56:9
  116c2c:    bf ea ec fc       	call -0x628 <SPI0_cs : 116608 >			  ## norflash.c:56:9
  116c30:    40 25             	r0 = 0x5			  ## norflash.c:57:9
  116c32:    bf ea 11 fd       	call -0x5de <SPI0_WriteByte : 116658 >			  ## norflash.c:57:9
  116c36:    bf ea 16 fd       	call -0x5d4 <SPI0_ReadByte : 116666 >			  ## norflash.c:58:19
  116c3a:    05 16             	r5 = r0			  ## norflash.c:58:19
  116c3c:    40 21             	r0 = 0x1			  ## norflash.c:59:9
  116c3e:    bf ea e3 fc       	call -0x63a <SPI0_cs : 116608 >			  ## norflash.c:59:9
  116c42:    55 e8 05 00       	if ((r5 & 0x1) == 0) goto 0xa <spi_portd_a+0x144 : 116c50 >			  ## norflash.c:59:9
  116c46:    40 21             	r0 = 0x1			  ## norflash.c:64:9
  116c48:    bf ea 0b fa       	call -0xbea <mdelay : 116062 >			  ## norflash.c:64:9
  116c4c:    c6 21             	r6 += 0x1			  ## norflash.c:64:9
  116c4e:    f6 4d             	if (r6 != 0) goto -0x26 <spi_portd_a+0x11E : 116c2a >
  116c50:    40 20             	r0 = 0x0			  ## norflash.c:235:5
  116c52:    45 20             	r5 = 0x0			  ## norflash.c:235:5
  116c54:    bf ea d8 fc       	call -0x650 <SPI0_cs : 116608 >			  ## norflash.c:235:5
  116c58:    58 26             	r0 = 0x66			  ## norflash.c:237:5
  116c5a:    bf ea 13 fd       	call -0x5da <SPI0_4WriteByte : 116684 >			  ## norflash.c:237:5
  116c5e:    40 21             	r0 = 0x1			  ## norflash.c:239:5
  116c60:    bf ea d2 fc       	call -0x65c <SPI0_cs : 116608 >			  ## norflash.c:239:5
  116c64:    40 20             	r0 = 0x0			  ## norflash.c:241:5
  116c66:    bf ea cf fc       	call -0x662 <SPI0_cs : 116608 >			  ## norflash.c:241:5
  116c6a:    60 39             	r0 = 0x99			  ## norflash.c:243:5
  116c6c:    bf ea 0a fd       	call -0x5ec <SPI0_4WriteByte : 116684 >			  ## norflash.c:243:5
  116c70:    40 21             	r0 = 0x1			  ## norflash.c:245:5
  116c72:    bf ea c9 fc       	call -0x66e <SPI0_cs : 116608 >			  ## norflash.c:245:5
  116c76:    40 20             	r0 = 0x0			  ## norflash.c:252:5
  116c78:    bf ea c6 fc       	call -0x674 <SPI0_cs : 116608 >			  ## norflash.c:252:5
  116c7c:    58 26             	r0 = 0x66			  ## norflash.c:253:5
  116c7e:    bf ea eb fc       	call -0x62a <SPI0_WriteByte : 116658 >			  ## norflash.c:253:5
  116c82:    40 21             	r0 = 0x1			  ## norflash.c:255:5
  116c84:    bf ea c0 fc       	call -0x680 <SPI0_cs : 116608 >			  ## norflash.c:255:5
  116c88:    40 20             	r0 = 0x0			  ## norflash.c:257:5
  116c8a:    bf ea bd fc       	call -0x686 <SPI0_cs : 116608 >			  ## norflash.c:257:5
  116c8e:    60 39             	r0 = 0x99			  ## norflash.c:259:5
  116c90:    bf ea e2 fc       	call -0x63c <SPI0_WriteByte : 116658 >			  ## norflash.c:259:5
  116c94:    40 21             	r0 = 0x1			  ## norflash.c:261:5
  116c96:    bf ea b7 fc       	call -0x692 <SPI0_cs : 116608 >			  ## norflash.c:261:5
  116c9a:    40 22             	r0 = 0x2			  ## norflash.c:262:5
  116c9c:    bf ea e1 f9       	call -0xc3e <mdelay : 116062 >			  ## norflash.c:262:5
  116ca0:    c5 61             	[r4+0x4] = r5			  ## boot_flash.c:83:29
  116ca2:    c0 ff fc 1b 03 00 	r0 = 0x31bfc <boot_arg_list : 31bfc >			  ## boot_flash.c:83:29
  116ca8:    8d 42             	b[r0+0x2] = r5			  ## boot_flash.c:84:28
  116caa:    04 88             	goto 0x10 <spi_portd_a+0x1B0 : 116cbc >			  ## boot_flash.c:84:28
  116cac:    40 16             	r0 = r4			  ## boot_flash.c:87:9
  116cae:    bf ea 98 fe       	call -0x2d0 <Run_App : 1169e2 >			  ## boot_flash.c:87:9
  116cb2:    78 90             	r0 = r7 + 0x10			  ## boot_flash.c:88:35
  116cb4:    d8 ec 0a 05       	r0 = [r0+r5<<2]			  ## boot_flash.c:88:35
  116cb8:    c0 61             	[r4+0x4] = r0			  ## boot_flash.c:88:33
  116cba:    c5 21             	r5 += 0x1			  ## boot_flash.c:86:37
  116cbc:    85 f8 f6 0b       	if (r5 != 0x5) goto -0x14 <spi_portd_a+0x1A0 : 116cac >
  116cc0:    40 ea 00 80       	[r8+0x0] = 0x0			  ## spi0.c:125:18
  116cc4:    bf ea 99 fc       	call -0x6ce <spi_get_port : 1165fa >			  ## spi0.c:129:16
  116cc8:    d2 ef 03 90       	[r9+0x48] &= 0xFFFFFFFC			  ## spi0.c:129:16
  116ccc:    d3 ef 03 90       	[r9+0x4c] &= 0xFFFFFFFC			  ## spi0.c:129:16
  116cd0:    01 e1 40 90       	r1 = r9 + 0x40			  ## spi0.c:129:16
  116cd4:    12 60             	r2 = [r1+0x0] 			  ## spi0.c:129:16
  116cd6:    00 48             	if (r0 == 0) goto 0x10 <spi_portd_a+0x1DC : 116ce8 >
  116cd8:    73 e1 03 20       	r3 = r2 & 0xFFFFFFFC			  ## spi0.c:160:23
  116cdc:    40 22             	r0 = 0x2			  ## spi0.c:160:23
  116cde:    12 3d             	r2 = -0x3
  116ce0:    96 16             	r6 = r9
  116ce2:    6c 8c             	r4 = r6 + 0xc
  116ce4:    6d 88             	r5 = r6 + 0x8
  116ce6:    04 87             	goto 0xe <spi_portd_a+0x1EA : 116cf6 >
  116ce8:    43 e1 03 20       	r3 = r2 | 0x3			  ## spi0.c:134:23
  116cec:    40 28             	r0 = 0x8			  ## spi0.c:134:23
  116cee:    12 37             	r2 = -0x9
  116cf0:    1c 8c             	r4 = r1 + 0xc
  116cf2:    1d 88             	r5 = r1 + 0x8
  116cf4:    16 16             	r6 = r1
  116cf6:    93 60             	[r1+0x0] = r3
  116cf8:    c0 ef 04 50       	[r5+0x0] &= 0xFFFFFFFB
  116cfc:    c0 ef 04 40       	[r4+0x0] &= 0xFFFFFFFB
  116d00:    00 ef 04 60       	[r6+0x0] |= 0x4
  116d04:    c2 ef 10 90       	[r9+0x8] &= 0xFFFFFFEF
  116d08:    c3 ef 10 90       	[r9+0xc] &= 0xFFFFFFEF
  116d0c:    00 ef 10 90       	[r9+0x0] |= 0x10
  116d10:    64 e8 02 42       	[r4+0x0] &= r2
  116d14:    64 e8 00 50       	[r5+0x0] |= r0
  116d18:    64 e8 00 60       	[r6+0x0] |= r0
  116d1c:    5a 04             	{pc, r10-r4} = [sp++]			  ## boot_flash.c:92:1


delay:
  116d1e:    e2 9f             	sp += -0x4			  ## timer.c:34:0
  116d20:    80 20             	[sp] = r0			  ## timer.c:34:0
  116d22:    04 81             	goto 0x2 <delay+0x8 : 116d26 >			  ## timer.c:34:0
  116d24:    00 00             	nop			  ## timer.c:39:9
  116d26:    00 20             	r0 = [sp]			  ## timer.c:38:16
  116d28:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## timer.c:38:16
  116d2c:    81 20             	[sp] = r1			  ## timer.c:38:16
  116d2e:    f0 5a             	if (r0 != 0) goto -0xc <delay+0x6 : 116d24 >			  ## timer.c:38:16
  116d30:    02 81             	sp += 0x4
  116d32:    80 00             	rts			  ## timer.c:42:1


_pll_init:
  116d34:    10 04             	[--sp] = rets			  ## clock.c:126:0
  116d36:    c2 ff fc 1b 03 00 	r2 = 0x31bfc <boot_arg_list : 31bfc >			  ## clock.c:158:27
  116d3c:    20 61             	r0 = [r2+0x4] 			  ## clock.c:129:25
  116d3e:    c1 ff 80 84 1e 00 	r1 = 0x1e8480 <__stub_LZ4_decompress_safe_continue+0xD0484 : 1e8480 >			  ## clock.c:129:25
  116d44:    f4 e1 00 01       	r0 = r0 / r1 (u)			  ## clock.c:129:25
  116d48:    00 a2             	r0 = r0 << 0x2			  ## clock.c:129:25
  116d4a:    f8 38             	r0 += -0x8			  ## clock.c:129:25
  116d4c:    40 e1 51 05       	r0 = r0 | 0x34400000			  ## clock.c:129:25
  116d50:    c3 ff 0c 00 1e 00 	r3 = 0x1e000c <__stub_LZ4_decompress_safe_continue+0xC8010 : 1e000c >			  ## clock.c:129:25
  116d56:    b0 6d             	[r3+0x34] = r0			  ## clock.c:129:23
  116d58:    c0 ff ee 30 a0 1f 	r0 = 0x1fa030ee <__stub_LZ4_decompress_safe_continue+0x1F8EB0F2 : 1fa030ee >			  ## clock.c:130:24
  116d5e:    b0 6e             	[r3+0x38] = r0			  ## clock.c:130:24
  116d60:    0d ef 01 30       	[r3+0x34] |= 0x1			  ## clock.c:132:23
  116d64:    40 2a             	r0 = 0xa			  ## clock.c:134:5
  116d66:    bf ea b5 f8       	call -0xe96 <udelay : 115ed4 >			  ## clock.c:134:5
  116d6a:    0d ef 02 30       	[r3+0x34] |= 0x2			  ## clock.c:135:23
  116d6e:    68 20             	r0 = 0xa0			  ## clock.c:136:5
  116d70:    bf ea b0 f8       	call -0xea0 <udelay : 115ed4 >			  ## clock.c:136:5
  116d74:    c1 ef 03 30       	[r3+0x4] &= 0xFFFFFFFC			  ## clock.c:144:24
  116d78:    c2 ef 03 30       	[r3+0x8] &= 0xFFFFFFFC			  ## clock.c:148:24
  116d7c:    c2 ef 3c 30       	[r3+0x8] &= 0xFFFFFFC3			  ## clock.c:149:24
  116d80:    02 ef 20 30       	[r3+0x8] |= 0x20			  ## clock.c:150:24
  116d84:    00 ef c0 30       	[r3+0x0] |= 0xC0			  ## clock.c:152:24
  116d88:    40 2a             	r0 = 0xa			  ## clock.c:154:5
  116d8a:    61 89             	call -0x6e <delay : 116d1e >			  ## clock.c:154:5
  116d8c:    00 ef 80 3f       	[r3+0x0] |= 0x100			  ## clock.c:155:24
  116d90:    40 2a             	r0 = 0xa			  ## clock.c:156:5
  116d92:    61 85             	call -0x76 <delay : 116d1e >			  ## clock.c:156:5
  116d94:    c0 ff 00 6c dc 02 	r0 = 0x2dc6c00 <__stub_LZ4_decompress_safe_continue+0x2CAEC04 : 2dc6c00 >			  ## clock.c:158:27
  116d9a:    a0 62             	[r2+0x8] = r0			  ## clock.c:158:27
  116d9c:    48 32             	r0 = 0x32			  ## clock.c:159:5
  116d9e:    88 04             	{rets} = [sp++]			  ## clock.c:159:5
  116da0:    ff ea 5f f9       	goto -0xd42 <mdelay : 116062 >			  ## clock.c:159:5


main:
  116da4:    bf ea 15 fa       	call -0xbd6 <osc_clk_init : 1161d2 >			  ## main.c:81:0
  116da8:    c0 ff dc 1c 03 00 	r0 = 0x31cdc <mask_putchar : 31cdc >			  ## uart.c:51:18
  116dae:    c1 ff 12 71 11 00 	r1 = 0x117112 <ut_empty : 117112 >			  ## uart.c:51:18
  116db4:    81 60             	[r0+0x0] = r1			  ## uart.c:51:18
  116db6:    58 32             	r0 = 0x72			  ## p33.c:94:5
  116db8:    41 30             	r1 = 0x10			  ## p33.c:94:5
  116dba:    bf ea b3 f7       	call -0x109a <p33_tx_1byte : 115d24 >			  ## p33.c:94:5
  116dbe:    58 32             	r0 = 0x72			  ## p33.c:95:5
  116dc0:    41 21             	r1 = 0x1			  ## p33.c:95:5
  116dc2:    48 e0 01 00       	r8 = 0x1			  ## p33.c:95:5
  116dc6:    bf ea ad f7       	call -0x10a6 <p33_tx_1byte : 115d24 >			  ## p33.c:95:5
  116dca:    bf ea aa d3       	call -0x58ac <nvram_boot_state : 111522 >			  ## boot_mode.c:108:25
  116dce:    c9 ff c0 13 01 00 	r9 = 0x113c0 <var_bss_begin : 113c0 >
  116dd4:    c5 ff 00 06 1e 00 	r5 = 0x1e0600 <__stub_LZ4_decompress_safe_continue+0xC8604 : 1e0600 >
  116dda:    06 e1 00 51       	r6 = r5 + 0x100
  116dde:    c7 ff c8 50 1e 00 	r7 = 0x1e50c8 <__stub_LZ4_decompress_safe_continue+0xCD0CC : 1e50c8 >
  116de4:    b0 44             	if (r0 != 0) goto 0xc8 <main+0x10A : 116eae >
  116de6:    c0 ff ff ff 00 00 	r0 = 0xffff <text_size+0x7FFE : fffe >			  ## usb_key.c:57:16
  116dec:    50 ed 95 00       	h[r9+0x4] = r0			  ## usb_key.c:57:16
  116df0:    0e ef 04 70       	[r7+0x38] |= 0x4			  ## usb_key.c:59:5
  116df4:    0e ef 08 70       	[r7+0x38] |= 0x8			  ## usb_key.c:60:5
  116df8:    0e ef 00 7f       	[r7+0x38] |= 0x200			  ## usb_key.c:63:5
  116dfc:    0e ef 80 7e       	[r7+0x38] |= 0x400			  ## usb_key.c:64:5
  116e00:    c1 ff 02 70 11 00 	r1 = 0x117002 <usb_key_isr : 117002 >			  ## usb_key.c:67:5
  116e06:    40 27             	r0 = 0x7			  ## usb_key.c:67:5
  116e08:    42 20             	r2 = 0x0			  ## usb_key.c:67:5
  116e0a:    44 20             	r4 = 0x0			  ## usb_key.c:67:5
  116e0c:    bf ea d8 f7       	call -0x1050 <HWI_Install : 115dc0 >			  ## usb_key.c:67:5
  116e10:    40 20             	r0 = 0x0			  ## usb_key.c:68:5
  116e12:    bf ea f5 f9       	call -0xc16 <set_timer3_captrue_dp : 116200 >			  ## usb_key.c:68:5
  116e16:    e4 62             	[r6+0x8] = r4			  ## usb_key.c:70:20
  116e18:    e4 61             	[r6+0x4] = r4			  ## usb_key.c:71:20
  116e1a:    40 ea 02 60       	[r6+0x0] = 0x2			  ## usb_key.c:72:20
  116e1e:    30 e1 80 7f       	r0 = r7 + -0x80			  ## usb_key.c:72:20
  116e22:    c2 ef 20 00       	[r0+0x8] &= 0xFFFFFFDF			  ## uart_key.c:212:18
  116e26:    c3 ef 20 00       	[r0+0xc] &= 0xFFFFFFDF			  ## uart_key.c:213:18
  116e2a:    00 ef 20 00       	[r0+0x0] |= 0x20			  ## uart_key.c:214:19
  116e2e:    d0 ec 99 40       	[r9+0x8] = r4			  ## uart_key.c:198:13
  116e32:    bf ea 0b f9       	call -0xdea <reset_status : 11604c >			  ## uart_key.c:199:5
  116e36:    d4 ef 00 78       	[r7+0x50] &= 0xFF7FFFFF			  ## uart_key.c:201:5
  116e3a:    3a e1 00 5f       	r10 = r5 + -0x100			  ## uart_key.c:201:5
  116e3e:    40 ea 80 ac       	[r10+0x0] = 0x4000			  ## uart_key.c:203:18
  116e42:    c1 ff e4 60 11 00 	r1 = 0x1160e4 <capture_isr : 1160e4 >			  ## uart_key.c:204:5
  116e48:    40 25             	r0 = 0x5			  ## uart_key.c:204:5
  116e4a:    42 20             	r2 = 0x0			  ## uart_key.c:204:5
  116e4c:    bf ea b8 f7       	call -0x1090 <HWI_Install : 115dc0 >			  ## uart_key.c:204:5
  116e50:    d0 ec 9d 80       	[r9+0xc] = r8			  ## uart_key.c:205:15
  116e54:    d0 ec a5 40       	[r10+0x4] = r4			  ## uart_key.c:206:18
  116e58:    d0 ec a9 40       	[r10+0x8] = r4			  ## uart_key.c:207:18
  116e5c:    00 ef 02 a0       	[r10+0x0] |= 0x2			  ## uart_key.c:208:18
  116e60:    bf ea 2a f9       	call -0xdac <set_cap_timeout : 1160b8 >			  ## boot_mode.c:72:5
  116e64:    51 60             	r1 = [r5+0x0] 			  ## boot_mode.c:40:21
  116e66:    99 17             	r1 = r1.l (s)			  ## boot_mode.c:73:12
  116e68:    81 fd 0f 00       	ifs (r1 < 0x0) goto 0x1e <main+0xE6 : 116e8a >			  ## boot_mode.c:73:12
  116e6c:    50 ed 94 00       	r0 = h[r9+0x4] (u)			  ## boot_mode.c:76:35
  116e70:    bf ea e8 f9       	call -0xc30 <check_key_type : 116244 >			  ## boot_mode.c:76:20
  116e74:    00 f8 08 02       	if (r0 == 0x1) goto 0x10 <main+0xE4 : 116e88 >
  116e78:    50 ed 92 00       	r0 = h[r9+0x2] (u)			  ## boot_mode.c:83:35
  116e7c:    bf ea e2 f9       	call -0xc3c <check_key_type : 116244 >			  ## boot_mode.c:83:20
  116e80:    80 f8 f0 09       	if (r0 != 0x4) goto -0x20 <main+0xC0 : 116e64 >
  116e84:    40 24             	r0 = 0x4
  116e86:    04 81             	goto 0x2 <main+0xE6 : 116e8a >
  116e88:    40 21             	r0 = 0x1
  116e8a:    41 e0 00 40       	r1 = 0x4000			  ## boot_mode.c:44:17
  116e8e:    d1 60             	[r5+0x0] = r1			  ## boot_mode.c:44:17
  116e90:    e1 60             	[r6+0x0] = r1			  ## clock.c:321:20
  116e92:    0e ef 04 70       	[r7+0x38] |= 0x4			  ## usb_key.c:78:5
  116e96:    0e ef 08 70       	[r7+0x38] |= 0x8			  ## usb_key.c:79:5
  116e9a:    ce ef 10 70       	[r7+0x38] &= 0xFFFFFFEF			  ## usb_key.c:81:5
  116e9e:    ce ef 20 70       	[r7+0x38] &= 0xFFFFFFDF			  ## usb_key.c:82:5
  116ea2:    ce ef 40 70       	[r7+0x38] &= 0xFFFFFFBF			  ## usb_key.c:84:5
  116ea6:    ce ef 80 70       	[r7+0x38] &= 0xFFFFFF7F			  ## usb_key.c:85:5
  116eaa:    d0 ec a1 10       	[r10+0x0] = r1			  ## uart_key.c:83:18
  116eae:    31 e1 ff 0f       	r1 = r0 + -0x1			  ## main.c:107:5
  116eb2:    c2 ff fc 1b 03 00 	r2 = 0x31bfc <boot_arg_list : 31bfc >
  116eb8:    81 f9 07 04       	if (r1 < 0x2) goto 0xe <main+0x126 : 116eca >			  ## main.c:107:5
  116ebc:    f8 3d             	r0 += -0x3
  116ebe:    00 fc 08 02       	if (r0 > 0x1) goto 0x10 <main+0x12E : 116ed2 >
  116ec2:    40 20             	r0 = 0x0			  ## main.c:112:9
  116ec4:    bf ea d7 fa       	call -0xa52 <uart_upgrade_init : 116476 >			  ## main.c:112:9
  116ec8:    34 95             	goto 0xea <main+0x210 : 116fb4 >			  ## main.c:112:9
  116eca:    40 23             	r0 = 0x3			  ## main.c:119:9
  116ecc:    bf ea 32 fb       	call -0x99c <check_usb_sof : 116534 >			  ## main.c:119:9
  116ed0:    34 91             	goto 0xe2 <main+0x210 : 116fb4 >			  ## main.c:119:9
  116ed2:    c2 14             	r10 = 0
  116ed4:    52 ee 20 a0       	b[r2+0x0] = r10			  ## main.c:34:31
  116ed8:    cb ff fa 1b 03 00 	r11 = 0x31bfa <g_spi_boot_port : 31bfa >			  ## main.c:34:31
  116ede:    cf ff e0 1b 03 00 	r15 = 0x31be0 <spi0_port : 31be0 >			  ## main.c:34:31
  116ee4:    4c e0 01 00       	r12 = 0x1			  ## main.c:34:31
  116ee8:    4d e0 00 40       	r13 = 0x4000			  ## main.c:34:31
  116eec:    c6 14             	r14 = 0			  ## main.c:34:31
  116eee:    04 88             	goto 0x10 <main+0x15C : 116f00 >			  ## main.c:34:31
  116ef0:    bf ea bb f9       	call -0xc8a <wdt_clr : 11626a >			  ## main.c:61:9
  116ef4:    bf ea 00 f8       	call -0x1000 <flash_poweron : 115ef8 >			  ## main.c:63:9
  116ef8:    40 2a             	r0 = 0xa			  ## main.c:65:9
  116efa:    bf ea b2 f8       	call -0xe9c <mdelay : 116062 >			  ## main.c:65:9
  116efe:    8e 16             	r14 = r8			  ## main.c:65:9
  116f00:    50 ee b0 40       	r4 = b[r11+0x0] (u)			  ## boot_init.c:92:12
  116f04:    34 ea 04 c0       	if ((r4 & 0x4) != 0) {
  116f08:    52 ee f4 c0       		b[r15+0x4] = r12			  ## boot_flash.c:106:25
  116f0c:    c0 ff b0 5c 11 00 		r0 = 0x115cb0 <norflash_check_in.spi0_porta_config : 115cb0 >			  ## boot_flash.c:107:33
  116f12:    d0 ec f1 00       		[r15+0x0] = r0			  ## boot_flash.c:107:33
  116f16:    bf ea f9 fd       		call -0x40e
                               	} <spi_portd_a : 116b0c >			  ## boot_flash.c:108:9
  116f1a:    34 ea 08 c0       	if ((r4 & 0x8) != 0) {			  ## boot_flash.c:108:9
  116f1e:    52 ee f4 c0       		b[r15+0x4] = r12			  ## boot_flash.c:118:25
  116f22:    c0 ff b4 5c 11 00 		r0 = 0x115cb4 <norflash_check_in.spi0_portb_config : 115cb4 >			  ## boot_flash.c:119:33
  116f28:    d0 ec f1 00       		[r15+0x0] = r0			  ## boot_flash.c:119:33
  116f2c:    bf ea ee fd       		call -0x424
                               	} <spi_portd_a : 116b0c >			  ## boot_flash.c:120:9
  116f30:    c5 ef 10 70       	[r7+0x14] &= 0xFFFFFFEF			  ## norflash.c:409:19
  116f34:    c4 ef 10 70       	[r7+0x10] &= 0xFFFFFFEF			  ## norflash.c:410:19
  116f38:    00 ef 10 70       	[r7+0x0] |= 0x10			  ## norflash.c:411:19
  116f3c:    c2 ef 10 70       	[r7+0x8] &= 0xFFFFFFEF			  ## norflash.c:412:19
  116f40:    03 ef 10 70       	[r7+0xc] |= 0x10			  ## norflash.c:413:19
  116f44:    40 21             	r0 = 0x1			  ## norflash.c:415:5
  116f46:    bf ea 8c f8       	call -0xee8 <mdelay : 116062 >			  ## norflash.c:415:5
  116f4a:    40 20             	r0 = 0x0			  ## norflash.c:416:5
  116f4c:    bf ea a3 f7       	call -0x10ba <spi_cs_pu : 115e96 >			  ## norflash.c:416:5
  116f50:    8e f8 2b 00       	if (r14 != 0x0) goto 0x56 <main+0x206 : 116faa >			  ## norflash.c:416:5
  116f54:    d0 ec 51 d0       	[r5+0x0] = r13			  ## clock.c:182:20
  116f58:    d0 ec 61 d0       	[r6+0x0] = r13			  ## clock.c:183:20
  116f5c:    30 e1 0c 5a       	r0 = r5 + -0x5f4			  ## clock.c:186:24
  116f60:    c0 ef 30 00       	[r0+0x0] &= 0xFFFFFFCF			  ## clock.c:186:24
  116f64:    42 ea ff 63       	[r6+0x8] = 0xFFFFFFFF			  ## clock.c:187:20
  116f68:    d0 ec 65 a0       	[r6+0x4] = r10			  ## clock.c:188:20
  116f6c:    40 e0 89 40       	r0 = 0x4089			  ## clock.c:189:20
  116f70:    e0 60             	[r6+0x0] = r0			  ## clock.c:189:20
  116f72:    42 ea fa 5c       	[r5+0x8] = 0x7D00			  ## clock.c:191:20
  116f76:    d0 ec 55 a0       	[r5+0x4] = r10			  ## clock.c:192:20
  116f7a:    40 e0 01 40       	r0 = 0x4001			  ## clock.c:193:20
  116f7e:    d0 60             	[r5+0x0] = r0			  ## clock.c:193:20
  116f80:    c0 d4             	r8 = 0  #
  116f82:    50 60             		 r0 = [r5+0x0] 			  ## clock.c:197:24
  116f84:    88 17             	r0 = r0.l (s)			  ## clock.c:197:28
  116f86:    80 fd 06 00       	ifs (r0 < 0x0) goto 0xc <main+0x1F2 : 116f96 >			  ## clock.c:197:28
  116f8a:    60 61             	r0 = [r6+0x4] 			  ## clock.c:201:24
  116f8c:    80 f9 f8 17       	if (r0 < 0xb) goto -0x10 <main+0x1DC : 116f80 >			  ## clock.c:201:24
  116f90:    4e e0 01 00       	r14 = 0x1
  116f94:    04 81             	goto 0x2 <main+0x1F4 : 116f98 >
  116f96:    c6 14             	r14 = 0
  116f98:    d0 ec 61 d0       	[r6+0x0] = r13			  ## clock.c:207:20
  116f9c:    d0 ec 51 d0       	[r5+0x0] = r13			  ## clock.c:208:20
  116fa0:    40 21             	r0 = 0x1			  ## main.c:49:13
  116fa2:    bf ea 68 fa       	call -0xb30 <uart_upgrade_init : 116476 >			  ## main.c:49:13
  116fa6:    0e f8 a3 01       	if (r14 == 0x0) goto -0xba <main+0x14C : 116ef0 >
  116faa:    40 20             	r0 = 0x0			  ## main.c:55:23
  116fac:    bf ea c2 fa       	call -0xa7c <check_usb_sof : 116534 >			  ## main.c:55:23
  116fb0:    e8 16             	r8 = r14
  116fb2:    40 5e             	if (r0 == 0) goto -0xc4 <main+0x14C : 116ef0 >
  116fb4:    d0 ec 90 12       	r1 = [r9+0x20]
  116fb8:    c6 ff fc 1b 03 00 	r6 = 0x31bfc <boot_arg_list : 31bfc >
  116fbe:    41 ea 00 60       	[r6+0x4] = 0x0			  ## clock.c:110:28
  116fc2:    30 e1 60 10       	r0 = r1 + -0xfa0			  ## clock.c:112:10
  116fc6:    a2 e0 00 10       	r2 = 0x0 - r1			  ## clock.c:112:10
  116fca:    43 e0 a0 0f       	r3 = 0xfa0			  ## clock.c:112:10
  116fce:    c1 ff 00 09 3d 00 	r1 = 0x3d0900 <__stub_LZ4_decompress_safe_continue+0x2B8904 : 3d0900 >			  ## clock.c:112:10
  116fd4:    e4 e0 fd 5c       	r4 = r5 + 0x7E80			  ## clock.c:112:10
  116fd8:    04 85             	goto 0xa <main+0x240 : 116fe4 >			  ## clock.c:112:10
  116fda:    41 18             	r1 += r4			  ## clock.c:112:5
  116fdc:    30 e1 30 08       	r0 = r0 + -0x7d0			  ## clock.c:112:5
  116fe0:    03 e1 d0 37       	r3 = r3 + 0x7d0			  ## clock.c:112:43
  116fe4:    b5 a7             	r5 = r3 >> 0x7			  ## clock.c:112:5
  116fe6:    25 fc 08 ec       	if (r5 > 0x176) goto 0x10 <main+0x256 : 116ffa >			  ## clock.c:112:5
  116fea:    ad 1c             	r5 = r2 + r3			  ## clock.c:114:13
  116fec:    b5 ee ff 0f       	ifs (r5 <= -0x1) {			  ## clock.c:114:13
  116ff0:    05 16             		r5 = r0
                               	}			  ## clock.c:114:13
  116ff2:    0c ff e8 53 f1 ff 	ifs (r5 > 0x3e8) goto -0x1e <main+0x236 : 116fda >			  ## clock.c:114:13
  116ff8:    e1 61             	[r6+0x4] = r1			  ## clock.c:115:36
  116ffa:    bf ea 9b fe       	call -0x2ca <_pll_init : 116d34 >			  ## clock.c:178:5
  116ffe:    bf ea 6e f1       	call -0x1d24 <usb_slave_mode : 1152de >			  ## main.c:131:5


usb_key_isr:
  117002:    e9 04             	[--sp] = {psr, rets, reti}			  ## usb_key.c:30:0
  117004:    60 04             	[--sp] = {r3-r0}			  ## usb_key.c:33:20
  117006:    c0 ff 00 07 1e 00 	r0 = 0x1e0700 <__stub_LZ4_decompress_safe_continue+0xC8704 : 1e0700 >			  ## usb_key.c:33:20
  11700c:    00 ef 80 0c       	[r0+0x0] |= 0x4000			  ## usb_key.c:33:20
  117010:    e0 e0 94 0c       	r0 = r0 + 0x4A00			  ## usb_key.c:33:20
  117014:    01 61             	r1 = [r0+0x4] 			  ## usb_key.c:35:9
  117016:    c2 ff c0 13 01 00 	r2 = 0x113c0 <var_bss_begin : 113c0 >			  ## usb_key.c:35:9
  11701c:    b1 f1 84 10       	r1 = uextra(r1, p:0x1, l:0x1)  #			  ## usb_key.c:35:9
  117020:    2b 62             		 r3 = h[r2+0x4] (u)			  ## usb_key.c:35:9
  117022:    a1 e1 fc 30       	r1 <= insert(r3, p:0x1, l:0x1f)			  ## usb_key.c:35:9
  117026:    a9 62             	h[r2+0x4] = r1			  ## usb_key.c:35:9
  117028:    42 f0 ef 16       	r2 = 0x16ef  #			  ## usb_key.c:41:20
  11702c:    29 62             		 r1 = h[r2+0x4] (u)			  ## usb_key.c:41:9
  11702e:    82 e8 0b 10       	if (r1 != r2) goto 0x16 <usb_key_isr+0x46 : 117048 >			  ## usb_key.c:41:9
  117032:    c0 ef 01 00       	[r0+0x0] &= 0xFFFFFFFE			  ## usb_key.c:43:9
  117036:    c0 ef 02 00       	[r0+0x0] &= 0xFFFFFFFD			  ## usb_key.c:44:9
  11703a:    c0 ef 04 00       	[r0+0x0] &= 0xFFFFFFFB			  ## usb_key.c:45:9
  11703e:    c0 ef 08 00       	[r0+0x0] &= 0xFFFFFFF7			  ## usb_key.c:46:9
  117042:    40 22             	r0 = 0x2			  ## usb_key.c:47:9
  117044:    bf ea 0d f8       	call -0xfe6 <mdelay : 116062 >			  ## usb_key.c:47:9
  117048:    40 04             	{r3-r0} = [sp++]			  ## usb_key.c:49:1
  11704a:    a9 04             	{psr, rets, reti} = [sp++]			  ## usb_key.c:49:1
  11704c:    81 00             	rti			  ## usb_key.c:49:1


sfc_suspend:
  11704e:    c1 ff 00 10 10 00 	r1 = 0x101000 <RAM_LIMIT_H+0xCF000 : 101000 >			  ## icache.c:12:0
  117054:    12 60             	r2 = [r1+0x0] 			  ## icache.c:14:22
  117056:    52 e8 fd 29       	if ((r2 & 0x20) == 0) goto -0x6 <sfc_suspend+0x6 : 117054 >			  ## icache.c:14:5
  11705a:    c1 ff 00 02 1f 00 	r1 = 0x1f0200 <__stub_LZ4_decompress_safe_continue+0xD8204 : 1f0200 >
  117060:    12 60             	r2 = [r1+0x0] 			  ## icache.c:16:20
  117062:    82 fd fd 01       	ifs (r2 < 0x0) goto -0x6 <sfc_suspend+0x12 : 117060 >			  ## icache.c:16:5
  117066:    c0 ef 01 10       	[r1+0x0] &= 0xFFFFFFFE			  ## icache.c:18:17
  11706a:    b0 e8 00 40       	if (r0 != 0x0) {			  ## icache.c:18:17
  11706e:    c0 ff 00 1c 1e 00 		r0 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## icache.c:20:22
  117074:    00 ef 01 00       		[r0+0x0] |= 0x1
                               	}			  ## icache.c:20:22
  117078:    80 00             	rts			  ## icache.c:22:1


sfc_resume:
  11707a:    b0 e8 00 40       	if (r0 != 0x0) {			  ## icache.c:25:0
  11707e:    c0 ff 00 1c 1e 00 		r0 = 0x1e1c00 <__stub_LZ4_decompress_safe_continue+0xC9C04 : 1e1c00 >			  ## icache.c:27:22
  117084:    c0 ef 01 00       		[r0+0x0] &= 0xFFFFFFFE
                               	}			  ## icache.c:27:22
  117088:    c0 ff 00 02 1f 00 	r0 = 0x1f0200 <__stub_LZ4_decompress_safe_continue+0xD8204 : 1f0200 >			  ## icache.c:29:17
  11708e:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## icache.c:29:17
  117092:    80 00             	rts			  ## icache.c:30:1


sfc_drop_cache:
  117094:    7b 04             	[--sp] = {rets, r11-r4}			  ## icache.c:32:0
  117096:    c8 ff 00 10 10 00 	r8 = 0x101000 <RAM_LIMIT_H+0xCF000 : 101000 >			  ## icache.c:32:0
  11709c:    d0 ec 80 90       	r9 = [r8+0x0]			  ## icache.c:33:33
  1170a0:    c0 ef e0 8e       	[r8+0x0] &= 0xFFFFF8FF			  ## icache.c:34:17
  1170a4:    74 e1 1f 00       	r4 = r0 & 0xFFFFFFE0			  ## icache.c:40:31
  1170a8:    00 1f             	r0 = r0 - r4			  ## icache.c:41:27
  1170aa:    a3 e0 20 00       	r3 = 0x20 - r0			  ## icache.c:43:32
  1170ae:    c2 14             	r10 = 0			  ## icache.c:43:32
  1170b0:    02 16             	r2 = r0			  ## icache.c:43:9
  1170b2:    13 e9 00 01       	if (r3 >= r1) {			  ## icache.c:43:9
  1170b6:    42 20             		r2 = 0x0
                               	}			  ## icache.c:43:9
  1170b8:    30 e8 00 00       	if (r0 == 0x0) {			  ## icache.c:43:9
  1170bc:    02 16             		r2 = r0
                               	}			  ## icache.c:43:9
  1170be:    90 1c             	r0 = r1 + r2			  ## icache.c:43:9
  1170c0:    c0 3f             	r0 += 0x1f			  ## icache.c:48:35
  1170c2:    70 e1 1f 00       	r0 = r0 & 0xFFFFFFE0			  ## icache.c:48:40
  1170c6:    01 1d             	r1 = r0 + r4
  1170c8:    60 e0 7c 5a       	r5 = 0xFC000
  1170cc:    c6 ff 00 f0 ff 01 	r6 = 0x1fff000 <__stub_LZ4_decompress_safe_continue+0x1EE7004 : 1fff000 >
  1170d2:    c3 14             	r11 = 0
  1170d4:    04 99             	goto 0x32 <sfc_drop_cache+0x74 : 117108 >
  1170d6:    c0 e1 a5 20       	r2 = r10 << 0x5
  1170da:    43 24             	r3 = 0x4
  1170dc:    40 20             	r0 = 0x0
  1170de:    04 8e             	goto 0x1c <sfc_drop_cache+0x68 : 1170fc >
  1170e0:    d8 ec 5a 70       	r7 = [r5+r0<<2]			  ## icache.c:52:42
  1170e4:    77 ac             	r7 = r7 << 0xc			  ## icache.c:52:56
  1170e6:    e7 19             	r7 &= r6			  ## icache.c:52:56
  1170e8:    27 18             	r7 += r2			  ## icache.c:52:63
  1170ea:    01 ec 05 70       	if (r7 > r1) goto 0xa <sfc_drop_cache+0x64 : 1170f8 >
  1170ee:    cf 20             	r7 += 0x20			  ## icache.c:54:92
  1170f0:    17 e9 00 04       	if (r7 >= r4) {
  1170f4:    d8 ec 5b b0       		[r5+r0<<2] = r11
                               	}			  ## icache.c:55:20
  1170f8:    c0 21             	r0 += 0x1			  ## icache.c:51:9
  1170fa:    fb 3f             	r3 += -0x1			  ## icache.c:51:9
  1170fc:    61 ff ff 30 ef ff 	if ((r3 & 0xFF) != 0) goto -0x22 <sfc_drop_cache+0x4C : 1170e0 >
  117102:    0a e1 01 a0       	r10 = r10 + 0x1			  ## icache.c:50:27
  117106:    c5 30             	r5 += 0x10			  ## icache.c:36:10
  117108:    9a f8 e5 01       	if (r10 != 0x80) goto -0x36 <sfc_drop_cache+0x42 : 1170d6 >
  11710c:    d0 ec 81 90       	[r8+0x0] = r9			  ## icache.c:61:18
  117110:    5b 04             	{pc, r11-r4} = [sp++]			  ## icache.c:62:1


ut_empty:
  117112:    80 00             	rts			  ## uart.c:18:0


putchar:
  117114:    c1 ff dc 1c 03 00 	r1 = 0x31cdc <mask_putchar : 31cdc >			  ## uart.c:57:0
  11711a:    11 60             	r1 = [r1+0x0] 			  ## uart.c:58:5
  11711c:    d1 00             	goto r1			  ## uart.c:58:5


switch_to_hrc_asm:
  11711e:    c0 ff 0c 00 1e 00 	r0 = 0x1e000c <__stub_LZ4_decompress_safe_continue+0xC8010 : 1e000c >			  ## clock.c:214:0
  117124:    00 ef 01 00       	[r0+0x0] |= 0x1			  ## clock.c:215:24
  117128:    00 ef 02 00       	[r0+0x0] |= 0x2			  ## clock.c:216:24
  11712c:    00 00             	nop			  ## clock.c:217:5
  11712e:    00 00             	nop			  ## clock.c:218:5
  117130:    00 00             	nop			  ## clock.c:219:5
  117132:    c0 ef 80 0f       	[r0+0x0] &= 0xFFFFFEFF			  ## clock.c:220:24
  117136:    80 00             	rts			  ## clock.c:221:1


tmr3_isr:
  117138:    e9 04             	[--sp] = {psr, rets, reti}			  ## clock.c:261:0
  11713a:    d8 e8 1f 00       	[--sp] = {r4-r0}			  ## clock.c:266:5
  11713e:    58 24             	r0 = 0x64			  ## clock.c:266:5
  117140:    bf ea ed fd       	call -0x426 <delay : 116d1e >			  ## clock.c:266:5
  117144:    c2 ff 00 07 1e 00 	r2 = 0x1e0700 <__stub_LZ4_decompress_safe_continue+0xC8704 : 1e0700 >			  ## clock.c:266:5
  11714a:    00 ef 80 2c       	[r2+0x0] |= 0x4000			  ## clock.c:268:20
  11714e:    21 62             	r1 = [r2+0x8] 			  ## clock.c:270:30
  117150:    c0 ff c0 13 01 00 	r0 = 0x113c0 <var_bss_begin : 113c0 >			  ## clock.c:270:30
  117156:    04 69             	r4 = [r0+0x24] 			  ## clock.c:270:36
  117158:    11 df             	r1 = r1 - r4  #			  ## clock.c:270:34
  11715a:    23 62             		 r3 = [r2+0x8] 			  ## clock.c:271:27
  11715c:    83 69             	[r0+0x24] = r3			  ## clock.c:271:14
  11715e:    03 6a             	r3 = [r0+0x28] 			  ## clock.c:278:21
  117160:    34 e1 fc 3e       	r4 = r3 + -0x104			  ## clock.c:278:30
  117164:    84 ec 10 10       	if (r1 <= r4) goto 0x20 <tmr3_isr+0x50 : 117188 >			  ## clock.c:278:30
  117168:    03 e1 04 31       	r3 = r3 + 0x104			  ## clock.c:278:62
  11716c:    03 e9 0c 10       	if (r1 >= r3) goto 0x18 <tmr3_isr+0x50 : 117188 >			  ## clock.c:278:62
  117170:    68 e8 20 01       	[r0+0x20] += r1			  ## clock.c:279:23
  117174:    03 6b             	r3 = [r0+0x2c] 			  ## clock.c:281:16
  117176:    c3 21             	r3 += 0x1			  ## clock.c:281:16
  117178:    83 6b             	[r0+0x2c] = r3			  ## clock.c:281:16
  11717a:    33 e8 04 40       	if (r3 == 0x4) {			  ## clock.c:281:16
  11717e:    40 ea 80 2c       		[r2+0x0] = 0x4000			  ## clock.c:284:28
  117182:    4c ea 01 00       		[r0+0x30] = 0x1
                               	}			  ## clock.c:286:26
  117186:    04 83             	goto 0x6 <tmr3_isr+0x56 : 11718e >			  ## clock.c:286:26
  117188:    42 20             	r2 = 0x0
  11718a:    82 6b             	[r0+0x2c] = r2			  ## clock.c:289:17
  11718c:    82 68             	[r0+0x20] = r2			  ## clock.c:290:23
  11718e:    81 6a             	[r0+0x28] = r1			  ## clock.c:293:14
  117190:    d4 e8 1f 00       	{r4-r0} = [sp++]			  ## clock.c:294:1
  117194:    a9 04             	{psr, rets, reti} = [sp++]			  ## clock.c:294:1
  117196:    81 00             	rti			  ## clock.c:294:1


p33_xor_1byte:
  117198:    74 04             	[--sp] = {rets, r4}			  ## p33.c:17:0
  11719a:    12 16             	r2 = r1			  ## p33.c:17:0
  11719c:    03 16             	r3 = r0			  ## p33.c:17:0
  11719e:    b9 17             	r1 = r3.l (s)			  ## p33.c:17:0
  1171a0:    bf ea 3e dc       	call -0x4784 <os_code_begin : 112a20 >			  ## p33.c:18:5
  1171a4:    c4 ff 08 3e 1e 00 	r4 = 0x1e3e08 <__stub_LZ4_decompress_safe_continue+0xCBE0C : 1e3e08 >			  ## p33.c:18:5
  1171aa:    31 ed 00 50       	ifs (r1 >= 0x0) {			  ## p33.c:18:5
  1171ae:    c0 ef 80 4f       		[r4+0x0] &= 0xFFFFFEFF			  ## p33.c:18:5
  1171b2:    40 21             		r0 = 0x1
                               	} else {			  ## p33.c:18:5
  1171b4:    40 e0 01 01       		r0 = 0x101
                               	}			  ## p33.c:18:5
  1171b8:    64 e8 00 40       	[r4+0x0] |= r0			  ## p33.c:18:5
  1171bc:    b0 e1 08 34       	r0 = uextra(r3, p:0x8, l:0x2)			  ## p33.c:19:13
  1171c0:    40 e1 60 00       	r0 = r0 | 0x60			  ## p33.c:19:13
  1171c4:    bf ea a2 f5       	call -0x14bc <p33_buf : 115d0c >			  ## p33.c:19:5
  1171c8:    70 e1 7f 3c       	r0 = r3 & 0xFFFF00FF			  ## p33.c:20:5
  1171cc:    bf ea 9e f5       	call -0x14c4 <p33_buf : 115d0c >			  ## p33.c:20:5
  1171d0:    20 16             	r0 = r2			  ## p33.c:21:5
  1171d2:    bf ea 9b f5       	call -0x14ca <p33_buf : 115d0c >			  ## p33.c:21:5
  1171d6:    40 e0 fe fe       	r0 = -0x102			  ## p33.c:22:5
  1171da:    64 e8 02 40       	[r4+0x0] &= r0			  ## p33.c:22:5
  1171de:    34 04             	{rets, r4} = [sp++]			  ## p33.c:22:5
  1171e0:    ff ea 25 dc       	goto -0x47b6 <local_irq_enable : 112a2e >			  ## p33.c:22:5


P33_CON_SET:
  1171e4:    76 04             	[--sp] = {rets, r6-r4}			  ## p33.c:66:0
  1171e6:    04 16             	r4 = r0			  ## p33.c:66:0
  1171e8:    10 3f             	r0 = -0x1			  ## p33.c:69:5
  1171ea:    20 1a             	r0 <<= r2			  ## p33.c:69:5
  1171ec:    90 e1 33 20       	r2 = r3 & ~r0			  ## p33.c:69:5
  1171f0:    c8 e1 20 51       	r5 = r2 << r1			  ## p33.c:69:5
  1171f4:    88 19             	r0 = ~r0			  ## p33.c:69:5
  1171f6:    c8 e1 00 61       	r6 = r0 << r1			  ## p33.c:69:5
  1171fa:    40 16             	r0 = r4			  ## p33.c:68:11
  1171fc:    bf ea bc f5       	call -0x1488 <p33_rx_1byte : 115d78 >			  ## p33.c:68:11
  117200:    90 e1 03 06       	r0 = r0 & ~r6			  ## p33.c:69:5
  117204:    50 19             	r0 |= r5			  ## p33.c:69:5
  117206:    01 17             	r1 = r0.b0 (u)			  ## p33.c:70:5
  117208:    40 16             	r0 = r4			  ## p33.c:70:5
  11720a:    36 04             	{rets, r6-r4} = [sp++]			  ## p33.c:70:5
  11720c:    ff ea 8a f5       	goto -0x14ec <p33_tx_1byte : 115d24 >			  ## p33.c:70:5


skip_atoi:
  117210:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:18:0
  117212:    41 20             	r1 = 0x0			  ## printf-stdarg.c:18:0
  117214:    04 89             	goto 0x12 <skip_atoi+0x18 : 117228 >			  ## printf-stdarg.c:18:0
  117216:    2b 81             	r3 = r2 + 0x1			  ## printf-stdarg.c:21:29
  117218:    e1 f1 0a 10       	r1 = r1 * 0xA  #			  ## printf-stdarg.c:21:15
  11721c:    83 60             		 [r0+0x0] = r3			  ## printf-stdarg.c:21:29
  11721e:    54 ee 20 20       	r2 = b[r2+0x0] (s)			  ## printf-stdarg.c:21:22
  117222:    21 18             	r1 += r2			  ## printf-stdarg.c:21:20
  117224:    f1 30             	r1 += -0x30			  ## printf-stdarg.c:21:33
  117226:    32 16             	r2 = r3			  ## printf-stdarg.c:20:12
  117228:    2b 40             	r3 = b[r2+0x0] (u)			  ## printf-stdarg.c:20:12
  11722a:    f3 30             	r3 += -0x30			  ## printf-stdarg.c:20:12
  11722c:    33 17             	r3 = r3.b0 (u)			  ## printf-stdarg.c:20:12
  11722e:    83 fc f2 13       	if (r3 <= 0x9) goto -0x1c <skip_atoi+0x6 : 117216 >			  ## printf-stdarg.c:20:12
  117232:    10 16             	r0 = r1			  ## printf-stdarg.c:23:5
  117234:    80 00             	rts			  ## printf-stdarg.c:23:5


printchar:
  117236:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:29:0
  117238:    00 49             	if (r0 == 0) goto 0x12 <printchar+0x16 : 11724c >			  ## printf-stdarg.c:30:9
  11723a:    04 60             	r4 = [r0+0x0] 
  11723c:    01 43             	if (r1 == 0) goto 0x6 <printchar+0xE : 117244 >
  11723e:    43 20             	r3 = 0x0
  117240:    01 e9 0b 40       	if (r4 >= r1) goto 0x16 <printchar+0x24 : 11725a >
  117244:    ca 40             	b[r4+0x0] = r2			  ## printf-stdarg.c:34:15
  117246:    c0 eb 01 00       	[r0+0x0] += 0x1			  ## printf-stdarg.c:35:9
  11724a:    04 86             	goto 0xc <printchar+0x22 : 117258 >			  ## printf-stdarg.c:35:9
  11724c:    c0 ff dc 1c 03 00 	r0 = 0x31cdc <mask_putchar : 31cdc >			  ## uart.c:58:5
  117252:    28 d7             	r0 = r2.b0 (s)  #			  ## uart.c:58:5
  117254:    01 60             		 r1 = [r0+0x0] 			  ## uart.c:58:5
  117256:    c1 00             	call r1			  ## uart.c:58:5
  117258:    43 21             	r3 = 0x1
  11725a:    30 16             	r0 = r3			  ## printf-stdarg.c:45:1
  11725c:    54 04             	{pc, r4} = [sp++]			  ## printf-stdarg.c:45:1


prints:
  11725e:    79 04             	[--sp] = {rets, r9-r4}			  ## printf-stdarg.c:57:0
  117260:    36 16             	r6 = r3			  ## printf-stdarg.c:57:0
  117262:    27 16             	r7 = r2			  ## printf-stdarg.c:57:0
  117264:    19 16             	r9 = r1			  ## printf-stdarg.c:57:0
  117266:    05 16             	r5 = r0			  ## printf-stdarg.c:57:0
  117268:    86 fd 22 02       	ifs (r6 < 0x1) goto 0x44 <prints+0x52 : 1172b0 >			  ## printf-stdarg.c:57:0
  11726c:    01 27             	r1 = [sp+28]			  ## printf-stdarg.c:57:0
  11726e:    40 20             	r0 = 0x0			  ## printf-stdarg.c:57:0
  117270:    04 81             	goto 0x2 <prints+0x16 : 117274 >			  ## printf-stdarg.c:57:0
  117272:    c0 21             	r0 += 0x1			  ## printf-stdarg.c:64:13
  117274:    d8 ee 70 20       	r2 = b[r7+r0] (u)			  ## printf-stdarg.c:63:28
  117278:    f2 5c             	if (r2 != 0) goto -0x8 <prints+0x14 : 117272 >			  ## printf-stdarg.c:63:28
  11727a:    34 e4 61 20       	r2 = smax(r6, r0)			  ## printf-stdarg.c:71:13
  11727e:    22 1e             	r2 = r2 - r0			  ## printf-stdarg.c:71:13
  117280:    13 a3             	r3 = r1 << 0x3			  ## printf-stdarg.c:71:13
  117282:    63 e1 10 30       	r3 = r3 & 0x10			  ## printf-stdarg.c:71:13
  117286:    48 e1 20 30       	r8 = r3 | 0x20			  ## printf-stdarg.c:71:13
  11728a:    44 20             	r4 = 0x0
  11728c:    51 e8 14 02       	if ((r1 & 0x1) != 0) goto 0x28 <prints+0x5A : 1172b8 >
  117290:    82 fd 12 02       	ifs (r2 < 0x1) goto 0x24 <prints+0x5A : 1172b8 >
  117294:    60 1e             	r0 = r6 - r0			  ## printf-stdarg.c:69:19
  117296:    06 16             	r6 = r0
  117298:    50 16             	r0 = r5			  ## printf-stdarg.c:77:17
  11729a:    91 16             	r1 = r9			  ## printf-stdarg.c:77:17
  11729c:    82 16             	r2 = r8			  ## printf-stdarg.c:77:17
  11729e:    61 8b             	call -0x6a <printchar : 117236 >			  ## printf-stdarg.c:77:17
  1172a0:    00 52             	if (r0 == 0) goto 0x24 <prints+0x68 : 1172c6 >			  ## printf-stdarg.c:77:17
  1172a2:    30 e1 ff 6f       	r0 = r6 + -0x1			  ## printf-stdarg.c:76:27
  1172a6:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:80:13
  1172a8:    06 fe f5 03       	ifs (r6 > 0x1) goto -0x16 <prints+0x38 : 117296 >
  1172ac:    06 16             	r6 = r0
  1172ae:    04 8b             	goto 0x16 <prints+0x68 : 1172c6 >
  1172b0:    44 20             	r4 = 0x0
  1172b2:    48 e0 20 00       	r8 = 0x20
  1172b6:    04 87             	goto 0xe <prints+0x68 : 1172c6 >
  1172b8:    26 16             	r6 = r2
  1172ba:    04 85             	goto 0xa <prints+0x68 : 1172c6 >
  1172bc:    50 16             	r0 = r5			  ## printf-stdarg.c:84:13
  1172be:    91 16             	r1 = r9			  ## printf-stdarg.c:84:13
  1172c0:    51 9a             	call -0x8c <printchar : 117236 >			  ## printf-stdarg.c:84:13
  1172c2:    00 44             	if (r0 == 0) goto 0x8 <prints+0x6E : 1172cc >			  ## printf-stdarg.c:84:13
  1172c4:    c4 21             	r4 += 0x1			  ## printf-stdarg.c:87:9
  1172c6:    d4 ee 71 20       	r2 = b[r7++=0x1] (s)			  ## printf-stdarg.c:83:12
  1172ca:    f2 58             	if (r2 != 0) goto -0x10 <prints+0x5E : 1172bc >
  1172cc:    47 20             	r7 = 0x0
  1172ce:    04 86             	goto 0xc <prints+0x7E : 1172dc >
  1172d0:    50 16             	r0 = r5			  ## printf-stdarg.c:90:13
  1172d2:    91 16             	r1 = r9			  ## printf-stdarg.c:90:13
  1172d4:    82 16             	r2 = r8			  ## printf-stdarg.c:90:13
  1172d6:    51 8f             	call -0xa2 <printchar : 117236 >			  ## printf-stdarg.c:90:13
  1172d8:    00 44             	if (r0 == 0) goto 0x8 <prints+0x84 : 1172e2 >			  ## printf-stdarg.c:90:13
  1172da:    ff 3f             	r7 += -0x1			  ## printf-stdarg.c:89:5
  1172dc:    e8 1d             	r0 = r6 + r7			  ## printf-stdarg.c:89:18
  1172de:    00 fd f7 03       	ifs (r0 >= 0x1) goto -0x12 <prints+0x72 : 1172d0 >			  ## printf-stdarg.c:89:18
  1172e2:    c8 1f             	r0 = r4 - r7			  ## printf-stdarg.c:96:5
  1172e4:    59 04             	{pc, r9-r4} = [sp++]			  ## printf-stdarg.c:96:5


printi:
  1172e6:    7a 04             	[--sp] = {rets, r10-r4}			  ## printf-stdarg.c:103:0
  1172e8:    e2 9c             	sp += -0x10			  ## printf-stdarg.c:103:0
  1172ea:    d4 e9 38 a0       	r10 = [sp+56]			  ## printf-stdarg.c:103:0
  1172ee:    18 d6             	r8 = r1  #			  ## printf-stdarg.c:103:0
  1172f0:    04 2d             		 r4 = [sp+52]			  ## printf-stdarg.c:103:0
  1172f2:    09 16             	r9 = r0			  ## printf-stdarg.c:103:0
  1172f4:    12 5a             	if (r2 == 0) goto 0x74 <printi+0x84 : 11736a >			  ## printf-stdarg.c:103:0
  1172f6:    00 2c             	r0 = [sp+48]			  ## printf-stdarg.c:103:0
  1172f8:    41 20             	r1 = 0x0			  ## printf-stdarg.c:103:0
  1172fa:    de e9 0f 10       	b[sp+15] = r1			  ## printf-stdarg.c:121:8
  1172fe:    41 21             	r1 = 0x1			  ## printf-stdarg.c:121:8
  117300:    46 21             	r6 = 0x1			  ## printf-stdarg.c:115:17
  117302:    b3 e8 0a 00       	if (r3 != 0xa) {			  ## printf-stdarg.c:115:17
  117306:    46 20             		r6 = 0x0
                               	}			  ## printf-stdarg.c:115:17
  117308:    30 e8 00 00       	if (r0 == 0x0) {			  ## printf-stdarg.c:115:17
  11730c:    01 16             		r1 = r0
                               	}			  ## printf-stdarg.c:115:9
  11730e:    90 f1 62 01       	r0 = r6 & r1  #			  ## printf-stdarg.c:115:12
  117312:    07 2f             		 r7 = [sp+60]
  117314:    a6 e0 00 20       	r6 = 0x0 - r2			  ## printf-stdarg.c:117:13
  117318:    a1 bf             	r1 = r2 >> 0x1f			  ## printf-stdarg.c:115:28
  11731a:    11 ea 00 00       	if ((r1 & r0) == 0) {			  ## printf-stdarg.c:115:28
  11731e:    26 16             		r6 = r2
                               	}			  ## printf-stdarg.c:115:28
  117320:    81 19             	r1 &= r0			  ## printf-stdarg.c:115:12
  117322:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:115:12
  117324:    c0 2a             	r0 += 0xa			  ## printf-stdarg.c:115:12
  117326:    05 e1 c6 70       	r5 = r7 + 0xc6			  ## printf-stdarg.c:115:12
  11732a:    04 8d             	goto 0x1a <printi+0x60 : 117346 >			  ## printf-stdarg.c:115:12
  11732c:    f4 e1 60 73       	r7 = r6 / r3 (u)			  ## printf-stdarg.c:124:15
  117330:    f0 e1 70 23       	r2 = r7 * r3			  ## printf-stdarg.c:124:15
  117334:    e6 1e             	r6 = r6 - r2			  ## printf-stdarg.c:124:15
  117336:    52 16             	r2 = r5			  ## printf-stdarg.c:125:13
  117338:    b6 ee 09 00       	ifs (r6 <= 0x9) {			  ## printf-stdarg.c:125:13
  11733c:    42 20             		r2 = 0x0
                               	}			  ## printf-stdarg.c:125:13
  11733e:    62 18             	r2 += r6			  ## printf-stdarg.c:125:13
  117340:    ca 30             	r2 += 0x30			  ## printf-stdarg.c:128:18
  117342:    76 d6             	r6 = r7  #			  ## printf-stdarg.c:128:18
  117344:    8a 07             		 b[r0++=-0x1] = r2			  ## printf-stdarg.c:128:14
  117346:    f6 52             	if (r6 != 0) goto -0x1c <printi+0x46 : 11732c >
  117348:    0f 81             	r7 = r0 + 0x1			  ## printf-stdarg.c:132:9
  11734a:    46 20             	r6 = 0x0
  11734c:    01 5f             	if (r1 == 0) goto 0x3e <printi+0xA6 : 11738c >
  11734e:    04 5b             	if (r4 == 0) goto 0x36 <printi+0xA0 : 117386 >
  117350:    5a e8 19 08       	if ((r10 & 0x2) == 0) goto 0x32 <printi+0xA0 : 117386 >
  117354:    4a 2d             	r2 = 0x2d			  ## printf-stdarg.c:134:17
  117356:    90 16             	r0 = r9			  ## printf-stdarg.c:134:17
  117358:    81 16             	r1 = r8			  ## printf-stdarg.c:134:17
  11735a:    bf ea 6c ff       	call -0x128 <printchar : 117236 >			  ## printf-stdarg.c:134:17
  11735e:    46 21             	r6 = 0x1			  ## printf-stdarg.c:134:17
  117360:    30 e8 00 00       	if (r0 == 0x0) {
  117364:    06 16             		r6 = r0
                               	}			  ## printf-stdarg.c:134:17
  117366:    c4 1f             	r4 = r4 - r6			  ## printf-stdarg.c:134:17
  117368:    04 91             	goto 0x22 <printi+0xA6 : 11738c >
  11736a:    48 30             	r0 = 0x30			  ## printf-stdarg.c:110:22
  11736c:    de e9 04 00       	b[sp+4] = r0			  ## printf-stdarg.c:110:22
  117370:    40 20             	r0 = 0x0			  ## printf-stdarg.c:110:22
  117372:    de e9 05 00       	b[sp+5] = r0			  ## printf-stdarg.c:111:22
  117376:    8a 84             	r2 = sp + 4			  ## printf-stdarg.c:111:22
  117378:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:112:16
  11737c:    90 16             	r0 = r9			  ## printf-stdarg.c:112:16
  11737e:    43 16             	r3 = r4			  ## printf-stdarg.c:112:16
  117380:    bf ea 6d ff       	call -0x126 <prints : 11725e >			  ## printf-stdarg.c:112:16
  117384:    04 8c             	goto 0x18 <printi+0xB8 : 11739e >			  ## printf-stdarg.c:112:16
  117386:    49 2d             	r1 = 0x2d			  ## printf-stdarg.c:139:18
  117388:    07 d6             	r7 = r0  #			  ## printf-stdarg.c:139:18
  11738a:    89 40             		 b[r0+0x0] = r1			  ## printf-stdarg.c:139:18
  11738c:    d4 e9 01 a0       	[sp] = r10			  ## printf-stdarg.c:143:17
  117390:    90 16             	r0 = r9			  ## printf-stdarg.c:143:17
  117392:    81 16             	r1 = r8			  ## printf-stdarg.c:143:17
  117394:    72 16             	r2 = r7			  ## printf-stdarg.c:143:17
  117396:    43 16             	r3 = r4			  ## printf-stdarg.c:143:17
  117398:    bf ea 61 ff       	call -0x13e <prints : 11725e >			  ## printf-stdarg.c:143:17
  11739c:    60 18             	r0 += r6			  ## printf-stdarg.c:143:15
  11739e:    02 84             	sp += 0x10
  1173a0:    5a 04             	{pc, r10-r4} = [sp++]			  ## printf-stdarg.c:144:1


print:
  1173a2:    7e 04             	[--sp] = {rets, r14-r4}			  ## printf-stdarg.c:147:0
  1173a4:    e2 99             	sp += -0x1c			  ## printf-stdarg.c:147:0
  1173a6:    1e d6             	r14 = r1  #			  ## printf-stdarg.c:147:0
  1173a8:    82 26             		 [sp+24] = r2			  ## printf-stdarg.c:147:0
  1173aa:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:147:0
  1173ac:    83 25             		 [sp+20] = r3			  ## printf-stdarg.c:147:0
  1173ae:    f8 e8 12 80       	r8 = sp + 18			  ## printf-stdarg.c:147:0
  1173b2:    c1 14             	r9 = 0			  ## printf-stdarg.c:147:0
  1173b4:    4a e0 41 00       	r10 = 0x41			  ## printf-stdarg.c:147:0
  1173b8:    4b e0 61 00       	r11 = 0x61			  ## printf-stdarg.c:147:0
  1173bc:    4c e0 01 00       	r12 = 0x1			  ## printf-stdarg.c:147:0
  1173c0:    cd ff f4 5c 11 00 	r13 = 0x115cf4 <nor_flash_boot_table+0x10 : 115cf4 >			  ## printf-stdarg.c:147:0
  1173c6:    46 20             	r6 = 0x0			  ## printf-stdarg.c:147:0
  1173c8:    84 80             	goto 0x200 <.GJTIE81_0_0_+0x12C : 1175ca >			  ## printf-stdarg.c:147:0
  1173ca:    29 81             	r1 = r2 + 0x1			  ## printf-stdarg.c:154:13
  1173cc:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:154:13
  1173ce:    28 41             	r0 = b[r2+0x1] (u)			  ## printf-stdarg.c:156:17
  1173d0:    00 f8 05 4a       	if (r0 == 0x25) goto 0xa <print+0x3C : 1173de >			  ## printf-stdarg.c:156:17
  1173d4:    00 f8 0b 5a       	if (r0 == 0x2d) goto 0x16 <print+0x4C : 1173ee >
  1173d8:    45 20             	r5 = 0x0
  1173da:    80 50             	if (r0 != 0) goto 0x20 <print+0x5A : 1173fc >
  1173dc:    74 9c             	goto 0x1f8 <.GJTIE81_0_0_+0x138 : 1175d6 >
  1173de:    48 25             	r0 = 0x25
  1173e0:    0a 17             	r2 = r0.b0 (s)			  ## printf-stdarg.c:276:39
  1173e2:    40 16             	r0 = r4			  ## printf-stdarg.c:276:19
  1173e4:    e1 16             	r1 = r14			  ## printf-stdarg.c:276:19
  1173e6:    bf ea 26 ff       	call -0x1b4 <printchar : 117236 >			  ## printf-stdarg.c:276:19
  1173ea:    06 18             	r6 += r0
  1173ec:    24 98             	goto 0xb0 <.GJTIE81_0_0_ : 11749e >
  1173ee:    29 82             	r1 = r2 + 0x2			  ## printf-stdarg.c:163:17
  1173f0:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:163:17
  1173f2:    45 21             	r5 = 0x1
  1173f4:    04 83             	goto 0x6 <print+0x5A : 1173fc >
  1173f6:    c1 21             	r1 += 0x1			  ## printf-stdarg.c:167:17
  1173f8:    81 26             	[sp+24] = r1			  ## printf-stdarg.c:167:17
  1173fa:    35 21             	r5 |= 0x2			  ## printf-stdarg.c:168:21
  1173fc:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:166:20
  1173fe:    02 f8 fa 61       	if (r2 == 0x30) goto -0xc <print+0x54 : 1173f6 >			  ## printf-stdarg.c:166:20
  117402:    30 e1 d0 2f       	r0 = r2 + -0x30			  ## printf-stdarg.c:172:17
  117406:    00 17             	r0 = r0.b0 (u)			  ## printf-stdarg.c:172:17
  117408:    17 3f             	r7 = -0x1			  ## printf-stdarg.c:172:17
  11740a:    00 fc 06 12       	if (r0 > 0x9) goto 0xc <print+0x78 : 11741a >			  ## printf-stdarg.c:172:17
  11740e:    88 98             	r0 = sp + 24
  117410:    bf ea fe fe       	call -0x204 <skip_atoi : 117210 >			  ## printf-stdarg.c:173:25
  117414:    07 d6             	r7 = r0  #			  ## printf-stdarg.c:173:25
  117416:    01 26             		 r1 = [sp+24]			  ## printf-stdarg.c:173:25
  117418:    1a 40             	r2 = b[r1+0x0] (u)			  ## printf-stdarg.c:173:25
  11741a:    82 f8 0d 5c       	if (r2 != 0x2e) goto 0x1a <print+0x96 : 117438 >
  11741e:    18 81             	r0 = r1 + 0x1			  ## printf-stdarg.c:178:17
  117420:    80 26             	[sp+24] = r0			  ## printf-stdarg.c:178:17
  117422:    1a 41             	r2 = b[r1+0x1] (u)			  ## printf-stdarg.c:179:21
  117424:    33 e1 d0 2f       	r3 = r2 + -0x30			  ## printf-stdarg.c:179:21
  117428:    33 17             	r3 = r3.b0 (u)			  ## printf-stdarg.c:179:21
  11742a:    03 fc 07 12       	if (r3 > 0x9) goto 0xe <print+0x9A : 11743c >			  ## printf-stdarg.c:179:21
  11742e:    88 98             	r0 = sp + 24
  117430:    bf ea ee fe       	call -0x224 <skip_atoi : 117210 >			  ## printf-stdarg.c:180:33
  117434:    00 26             	r0 = [sp+24]
  117436:    04 89             	goto 0x12 <print+0xA8 : 11744a >
  117438:    10 16             	r0 = r1			  ## printf-stdarg.c:250:18
  11743a:    04 87             	goto 0xe <print+0xA8 : 11744a >			  ## printf-stdarg.c:250:18
  11743c:    32 e8 2a c0       	if (r2 == 0x2a) {
  117440:    88 94             		r0 = sp + 20
  117442:    c0 eb 04 00       		[r0+0x0] += 0x4			  ## printf-stdarg.c:183:33
  117446:    18 82             		r0 = r1 + 0x2			  ## printf-stdarg.c:182:21
  117448:    80 26             		[sp+24] = r0
                               	}			  ## printf-stdarg.c:182:21
  11744a:    09 40             	r1 = b[r0+0x0] (u)
  11744c:    32 e1 90 1f       	r2 = r1 + -0x70			  ## printf-stdarg.c:193:17
  117450:    82 fc 1f 10       	if (r2 <= 0x8) goto 0x3e <print+0xF0 : 117492 >			  ## printf-stdarg.c:193:17
  117454:    01 f8 41 98       	if (r1 == 0x4c) goto 0x82 <.GJTIE81_0_0_+0x3C : 1174da >
  117458:    01 f8 49 b0       	if (r1 == 0x58) goto 0x92 <.GJTIE81_0_0_+0x50 : 1174ee >
  11745c:    01 f8 57 c6       	if (r1 == 0x63) goto 0xae <.GJTIE81_0_0_+0x70 : 11750e >
  117460:    01 f8 65 c8       	if (r1 == 0x64) goto 0xca <.GJTIE81_0_0_+0x90 : 11752e >
  117464:    81 f8 1b d8       	if (r1 != 0x6c) goto 0x36 <.GJTIE81_0_0_ : 11749e >
  117468:    09 41             	r1 = b[r0+0x1] (u)			  ## printf-stdarg.c:202:39
  11746a:    01 f8 6c f0       	if (r1 == 0x78) goto 0xd8 <.GJTIE81_0_0_+0xA8 : 117546 >			  ## printf-stdarg.c:202:39
  11746e:    01 f8 74 d8       	if (r1 == 0x6c) goto 0xe8 <.GJTIE81_0_0_+0xBC : 11755a >
  117472:    01 f8 81 ea       	if (r1 == 0x75) goto 0x102 <.GJTIE81_0_0_+0xDA : 117578 >
  117476:    81 f8 12 c8       	if (r1 != 0x64) goto 0x24 <.GJTIE81_0_0_ : 11749e >
  11747a:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:203:40
  11747c:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:203:40
  11747e:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:203:40
  117480:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:203:40
  117482:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:203:23
  117486:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:203:23
  117488:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:203:23
  11748a:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:203:23
  11748c:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:203:23
  117490:    34 9e             	goto 0xfc <.GJTIE81_0_0_+0xF0 : 11758e >			  ## printf-stdarg.c:203:23
  117492:    02 01             	tbb [r2]


.GJTIS81_0_0_:
  117494:    09     < 9 : 0x9 >
  117495:    05     < 5 : 0x5 >
  117496:    05     < 5 : 0x5 >
  117497:    10     < 16 : 0x10 >
  117498:    05     < 5 : 0x5 >
  117499:    19     < 25 : 0x19 >
  11749a:    05     < 5 : 0x5 >
  11749b:    05     < 5 : 0x5 >
  11749c:    09     < 9 : 0x9 >
  11749d:    00     < 0 : 0x0 >
  11749e:    00 26             	r0 = [sp+24]			  ## printf-stdarg.c:152:26
  1174a0:    0a 81             	r2 = r0 + 0x1			  ## printf-stdarg.c:152:26
  1174a2:    82 26             	[sp+24] = r2			  ## printf-stdarg.c:152:26
  1174a4:    44 92             	goto 0x124 <.GJTIE81_0_0_+0x12C : 1175ca >			  ## printf-stdarg.c:152:26
  1174a6:    00 25             	r0 = [sp+20]
  1174a8:    09 84             	r1 = r0 + 0x4
  1174aa:    81 25             	[sp+20] = r1
  1174ac:    02 60             	r2 = [r0+0x0] 
  1174ae:    d4 e9 0d b0       	[sp+12] = r11
  1174b2:    14 83             	goto 0x46 <.GJTIE81_0_0_+0x5C : 1174fa >
  1174b4:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:194:44
  1174b6:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:194:44
  1174b8:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:194:44
  1174ba:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:194:44
  1174bc:    85 20             	[sp] = r5			  ## printf-stdarg.c:195:23
  1174be:    32 e8 00 00       	if (r2 == 0x0) {			  ## printf-stdarg.c:195:23
  1174c2:    d2 16             		r2 = r13
                               	}			  ## printf-stdarg.c:195:40
  1174c4:    14 8e             	goto 0x5c <.GJTIE81_0_0_+0x84 : 117522 >
  1174c6:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:236:40
  1174c8:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:236:40
  1174ca:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:236:40
  1174cc:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:236:40
  1174ce:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:236:23
  1174d2:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:236:23
  1174d4:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:236:23
  1174d6:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:236:23
  1174d8:    04 93             	goto 0x26 <.GJTIE81_0_0_+0x62 : 117500 >			  ## printf-stdarg.c:236:23
  1174da:    08 41             	r0 = b[r0+0x1] (u)			  ## printf-stdarg.c:230:39
  1174dc:    80 f8 df b1       	if (r0 != 0x58) goto -0x42 <.GJTIE81_0_0_ : 11749e >
  1174e0:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:231:40
  1174e2:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:231:40
  1174e4:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:231:40
  1174e6:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:231:40
  1174e8:    d4 e9 0d a0       	[sp+12] = r10			  ## printf-stdarg.c:231:23
  1174ec:    14 92             	goto 0x64 <.GJTIE81_0_0_+0xB4 : 117552 >			  ## printf-stdarg.c:231:23
  1174ee:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:227:40
  1174f0:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:227:40
  1174f2:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:227:40
  1174f4:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:227:40
  1174f6:    d4 e9 0d a0       	[sp+12] = r10			  ## printf-stdarg.c:227:23
  1174fa:    85 22             	[sp+8] = r5
  1174fc:    87 21             	[sp+4] = r7
  1174fe:    43 30             	r3 = 0x10
  117500:    d4 e9 01 90       	[sp] = r9
  117504:    40 16             	r0 = r4
  117506:    e1 16             	r1 = r14
  117508:    bf ea ed fe       	call -0x226 <printi : 1172e6 >
  11750c:    b7 8e             	goto -0x124 <print+0x48 : 1173ea >
  11750e:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:252:32
  117510:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:252:32
  117512:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:252:32
  117514:    00 60             	r0 = [r0+0x0] 			  ## printf-stdarg.c:252:32
  117516:    de e9 12 00       	b[sp+18] = r0			  ## printf-stdarg.c:252:24
  11751a:    52 ee 81 90       	b[r8+0x1] = r9			  ## printf-stdarg.c:253:24
  11751e:    8a 92             	r2 = sp + 18
  117520:    85 20             	[sp] = r5			  ## printf-stdarg.c:254:23
  117522:    40 16             	r0 = r4
  117524:    e1 16             	r1 = r14
  117526:    73 16             	r3 = r7
  117528:    bf ea 99 fe       	call -0x2ce <prints : 11725e >
  11752c:    a7 9e             	goto -0x144 <print+0x48 : 1173ea >
  11752e:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:199:40
  117530:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:199:40
  117532:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:199:40
  117534:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:199:40
  117536:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:199:23
  11753a:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:199:23
  11753c:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:199:23
  11753e:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:199:23
  117540:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:199:23
  117544:    e7 9f             	goto -0x42 <.GJTIE81_0_0_+0x66 : 117504 >			  ## printf-stdarg.c:199:23
  117546:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:222:40
  117548:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:222:40
  11754a:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:222:40
  11754c:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:222:40
  11754e:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:222:23
  117552:    85 22             	[sp+8] = r5
  117554:    87 21             	[sp+4] = r7
  117556:    43 30             	r3 = 0x10
  117558:    04 98             	goto 0x30 <.GJTIE81_0_0_+0xEC : 11758a >
  11755a:    09 42             	r1 = b[r0+0x2] (u)			  ## printf-stdarg.c:207:67
  11755c:    81 f8 1f c8       	if (r1 != 0x64) goto 0x3e <.GJTIE81_0_0_+0x100 : 11759e >			  ## printf-stdarg.c:207:17
  117560:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:208:40
  117562:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:208:40
  117564:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:208:40
  117566:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:208:40
  117568:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:208:23
  11756c:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:208:23
  11756e:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:208:23
  117570:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:208:23
  117572:    d4 e9 01 c0       	[sp] = r12			  ## printf-stdarg.c:208:23
  117576:    14 81             	goto 0x42 <.GJTIE81_0_0_+0x11C : 1175ba >			  ## printf-stdarg.c:208:23
  117578:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:240:40
  11757a:    09 84             	r1 = r0 + 0x4			  ## printf-stdarg.c:240:40
  11757c:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:240:40
  11757e:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:240:40
  117580:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:240:23
  117584:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:240:23
  117586:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:240:23
  117588:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:240:23
  11758a:    d4 e9 01 90       	[sp] = r9
  11758e:    40 16             	r0 = r4
  117590:    e1 16             	r1 = r14
  117592:    bf ea a8 fe       	call -0x2b0 <printi : 1172e6 >
  117596:    89 98             	r1 = sp + 24
  117598:    c0 eb 01 10       	[r1+0x0] += 0x1
  11759c:    97 86             	goto -0x1b4 <print+0x48 : 1173ea >
  11759e:    08 42             	r0 = b[r0+0x2] (u)			  ## printf-stdarg.c:244:67
  1175a0:    80 f8 7d eb       	if (r0 != 0x75) goto -0x106 <.GJTIE81_0_0_ : 11749e >
  1175a4:    00 25             	r0 = [sp+20]			  ## printf-stdarg.c:245:40
  1175a6:    09 88             	r1 = r0 + 0x8			  ## printf-stdarg.c:245:40
  1175a8:    81 25             	[sp+20] = r1			  ## printf-stdarg.c:245:40
  1175aa:    02 60             	r2 = [r0+0x0] 			  ## printf-stdarg.c:245:40
  1175ac:    d4 e9 0d b0       	[sp+12] = r11			  ## printf-stdarg.c:245:23
  1175b0:    85 22             	[sp+8] = r5			  ## printf-stdarg.c:245:23
  1175b2:    87 21             	[sp+4] = r7			  ## printf-stdarg.c:245:23
  1175b4:    43 2a             	r3 = 0xa			  ## printf-stdarg.c:245:23
  1175b6:    d4 e9 01 90       	[sp] = r9			  ## printf-stdarg.c:245:23
  1175ba:    40 16             	r0 = r4
  1175bc:    e1 16             	r1 = r14
  1175be:    bf ea 92 fe       	call -0x2dc <printi : 1172e6 >
  1175c2:    89 98             	r1 = sp + 24
  1175c4:    c0 eb 02 10       	[r1+0x0] += 0x2
  1175c8:    87 90             	goto -0x1e0 <print+0x48 : 1173ea >
  1175ca:    28 40             	r0 = b[r2+0x0] (u)			  ## printf-stdarg.c:152:12
  1175cc:    00 ff 25 00 fc fe 	if (r0 == 0x25) goto -0x208 <print+0x28 : 1173ca >			  ## printf-stdarg.c:152:5
  1175d2:    80 f8 05 01       	if (r0 != 0x0) goto -0x1f6 <print+0x3E : 1173e0 >
  1175d6:    b4 e8 00 80       	if (r4 != 0x0) {
  1175da:    40 60             		r0 = [r4+0x0] 			  ## printf-stdarg.c:280:10
  1175dc:    41 20             		r1 = 0x0			  ## printf-stdarg.c:280:15
  1175de:    89 40             		b[r0+0x0] = r1
                               	}			  ## printf-stdarg.c:280:15
  1175e0:    60 16             	r0 = r6			  ## printf-stdarg.c:283:5
  1175e2:    02 87             	sp += 0x1c			  ## printf-stdarg.c:283:5
  1175e4:    5e 04             	{pc, r14-r4} = [sp++]			  ## printf-stdarg.c:283:5


puts:
  1175e6:    75 04             	[--sp] = {rets, r5, r4}			  ## printf-stdarg.c:288:0
  1175e8:    04 16             	r4 = r0			  ## printf-stdarg.c:288:0
  1175ea:    c5 ff dc 1c 03 00 	r5 = 0x31cdc <mask_putchar : 31cdc >			  ## printf-stdarg.c:288:0
  1175f0:    04 82             	goto 0x4 <puts+0x10 : 1175f6 >			  ## printf-stdarg.c:288:0
  1175f2:    08 17             	r0 = r0.b0 (s)			  ## uart.c:58:5
  1175f4:    c1 00             	call r1			  ## uart.c:58:5
  1175f6:    51 60             	r1 = [r5+0x0] 			  ## uart.c:58:5
  1175f8:    40 07             	r0 = b[r4++=0x1] (u)			  ## printf-stdarg.c:318:12
  1175fa:    f0 5b             	if (r0 != 0) goto -0xa <puts+0xC : 1175f2 >
  1175fc:    40 2a             	r0 = 0xa			  ## uart.c:58:5
  1175fe:    c1 00             	call r1			  ## uart.c:58:5
  117600:    40 20             	r0 = 0x0			  ## printf-stdarg.c:326:5
  117602:    55 04             	{pc, r5, r4} = [sp++]			  ## printf-stdarg.c:326:5


printf:
  117604:    61 04             	[--sp] = {r3-r1}			  ## printf-stdarg.c:331:0
  117606:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:331:0
  117608:    e2 9f             	sp += -0x4			  ## printf-stdarg.c:331:0
  11760a:    8b 8c             	r3 = sp + 12			  ## printf-stdarg.c:331:0
  11760c:    04 d6             	r4 = r0  #			  ## printf-stdarg.c:331:0
  11760e:    83 20             		 [sp] = r3			  ## printf-stdarg.c:335:5
  117610:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:365:11
  117612:    42 16             	r2 = r4			  ## printf-stdarg.c:365:11
  117614:    bf ea c5 fe       	call -0x276 <print : 1173a2 >			  ## printf-stdarg.c:365:11
  117618:    02 81             	sp += 0x4
  11761a:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:368:5
  11761c:    02 83             	sp += 0xc			  ## printf-stdarg.c:368:5
  11761e:    80 00             	rts			  ## printf-stdarg.c:368:5


sprintf:
  117620:    62 04             	[--sp] = {r3, r2}			  ## printf-stdarg.c:373:0
  117622:    74 04             	[--sp] = {rets, r4}			  ## printf-stdarg.c:373:0
  117624:    e2 9e             	sp += -0x8			  ## printf-stdarg.c:373:0
  117626:    14 d6             	r4 = r1  #			  ## printf-stdarg.c:373:0
  117628:    80 21             		 [sp+4] = r0			  ## printf-stdarg.c:373:0
  11762a:    8b 90             	r3 = sp + 16			  ## printf-stdarg.c:373:0
  11762c:    42 d6             	r2 = r4  #			  ## printf-stdarg.c:378:12
  11762e:    83 20             		 [sp] = r3			  ## printf-stdarg.c:376:5
  117630:    88 84             	r0 = sp + 4			  ## printf-stdarg.c:376:5
  117632:    41 20             	r1 = 0x0			  ## printf-stdarg.c:378:12
  117634:    bf ea b5 fe       	call -0x296 <print : 1173a2 >			  ## printf-stdarg.c:378:12
  117638:    02 82             	sp += 0x8
  11763a:    34 04             	{rets, r4} = [sp++]			  ## printf-stdarg.c:378:5
  11763c:    02 82             	sp += 0x8			  ## printf-stdarg.c:378:5
  11763e:    80 00             	rts			  ## printf-stdarg.c:378:5


vprintf:
  117640:    10 04             	[--sp] = rets			  ## printf-stdarg.c:382:0
  117642:    02 15             	r3_r2 = r1_r0			  ## printf-stdarg.c:382:0
  117644:    80 14             	r1_r0 = 0			  ## printf-stdarg.c:385:12
  117646:    bf ea ac fe       	call -0x2a8 <print : 1173a2 >			  ## printf-stdarg.c:385:12
  11764a:    00 04             	pc = [sp++]			  ## printf-stdarg.c:387:5


perror:
  11764c:    40 20             	r0 = 0x0			  ## printf-stdarg.c:391:0
  11764e:    80 00             	rts			  ## printf-stdarg.c:392:5


norflash_read:
  117650:    78 04             	[--sp] = {rets, r8-r4}			  ## norflash.c:312:0
  117652:    34 d6             	r4 = r3  #			  ## norflash.c:312:0
  117654:    08 44             		 r0 = b[r0+0x4] (u)			  ## norflash.c:316:19
  117656:    26 16             	r6 = r2
  117658:    15 16             	r5 = r1
  11765a:    c8 ff 00 41 1e 00 	r8 = 0x1e4100 <__stub_LZ4_decompress_safe_continue+0xCC104 : 1e4100 >
  117660:    b0 e8 00 40       	if (r0 != 0x0) {
  117664:    42 ea 00 80       		[r8+0x8] = 0x0			  ## norflash.c:317:28
  117668:    40 ea 83 80       		[r8+0x0] = 0x83
                               	}			  ## norflash.c:318:28
  11766c:    40 20             	r0 = 0x0			  ## norflash.c:322:5
  11766e:    47 20             	r7 = 0x0			  ## norflash.c:322:5
  117670:    bf ea ca f7       	call -0x106c <SPI0_cs : 116608 >			  ## norflash.c:322:5
  117674:    40 23             	r0 = 0x3			  ## norflash.c:324:5
  117676:    bf ea ef f7       	call -0x1022 <SPI0_WriteByte : 116658 >			  ## norflash.c:324:5
  11767a:    b0 e1 20 68       	r0 = uextra(r6, p:0x10, l:0x8)			  ## norflash.c:109:5
  11767e:    bf ea eb f7       	call -0x102a <SPI0_WriteByte : 116658 >			  ## norflash.c:109:5
  117682:    b0 e1 20 64       	r0 = uextra(r6, p:0x8, l:0x8)			  ## norflash.c:110:5
  117686:    bf ea e7 f7       	call -0x1032 <SPI0_WriteByte : 116658 >			  ## norflash.c:110:5
  11768a:    60 17             	r0 = r6.b0 (u)			  ## norflash.c:111:5
  11768c:    bf ea e4 f7       	call -0x1038 <SPI0_WriteByte : 116658 >			  ## norflash.c:111:5
  117690:    30 e1 04 84       	r0 = r8 + -0xbfc			  ## norflash.c:328:17
  117694:    22 f1 fc 06       	r2 = r0 + -0x1904  #			  ## norflash.c:328:17
  117698:    87 60             		 [r0+0x0] = r7			  ## norflash.c:328:17
  11769a:    00 ef 80 2d       	[r2+0x0] |= 0x1000			  ## spi0.c:313:18
  11769e:    40 2a             	r0 = 0xa			  ## spi0.c:314:5
  1176a0:    bf ea 18 f4       	call -0x17d0 <udelay : 115ed4 >			  ## spi0.c:314:5
  1176a4:    c0 ef 40 2e       	[r2+0x0] &= 0xFFFFF3FF			  ## spi0.c:315:18
  1176a8:    c0 d7             	r0 = r4.l (u)  #			  ## spi0.c:318:20
  1176aa:    a5 63             		 [r2+0xc] = r5			  ## spi0.c:317:18
  1176ac:    a0 64             	[r2+0x10] = r0			  ## spi0.c:318:18
  1176ae:    bf ea ca f7       	call -0x106c <spi0_wait_ok : 116646 >			  ## spi0.c:320:5
  1176b2:    40 21             	r0 = 0x1			  ## norflash.c:333:5
  1176b4:    bf ea a8 f7       	call -0x10b0 <SPI0_cs : 116608 >			  ## norflash.c:333:5
  1176b8:    40 21             	r0 = 0x1			  ## norflash.c:339:5
  1176ba:    d0 ec 81 70       	[r8+0x0] = r7			  ## norflash.c:336:24
  1176be:    58 04             	{pc, r8-r4} = [sp++]			  ## norflash.c:339:5


uart_isr:
  1176c0:    e9 04             	[--sp] = {psr, rets, reti}			  ## uart_upgrade.c:184:0
  1176c2:    d8 e8 3f 00       	[--sp] = {r5-r0}			  ## uart_upgrade.c:184:0
  1176c6:    60 e0 f1 49       	r4 = 0x1E2000			  ## uart_upgrade.c:184:0
  1176ca:    40 60             	r0 = [r4+0x0] 			  ## uart_upgrade.c:185:16
  1176cc:    50 e8 29 58       	if ((r0 & 0x800) == 0) goto 0x52 <uart_isr+0x62 : 117722 >			  ## uart_upgrade.c:185:16
  1176d0:    00 ef 80 40       	[r4+0x0] |= 0x80			  ## uart_upgrade.c:186:20
  1176d4:    00 ef a0 4d       	[r4+0x0] |= 0x1400			  ## uart_upgrade.c:187:20
  1176d8:    20 00             	csync			  ## uart_upgrade.c:188:9
  1176da:    40 6a             	r0 = [r4+0x28] 			  ## uart_upgrade.c:189:28
  1176dc:    42 20             	r2 = 0x0
  1176de:    c0 ff e0 14 01 00 	r0 = 0x114e0 <uart_dma_buffer : 114e0 >
  1176e4:    21 16             	r1 = r2
  1176e6:    01 fc 1c 7a       	if (r1 > 0x3d) goto 0x38 <uart_isr+0x62 : 117722 >
  1176ea:    d8 ee 10 30       	r3 = b[r1+r0] (u)			  ## uart_upgrade.c:120:14
  1176ee:    1a 81             	r2 = r1 + 0x1			  ## uart_upgrade.c:120:14
  1176f0:    83 f8 f8 ab       	if (r3 != 0x55) goto -0x10 <uart_isr+0x24 : 1176e4 >			  ## uart_upgrade.c:120:14
  1176f4:    13 1c             	r3 = r1 + r0			  ## uart_upgrade.c:120:37
  1176f6:    3b 41             	r3 = b[r3+0x1] (u)			  ## uart_upgrade.c:120:37
  1176f8:    93 f8 f4 55       	if (r3 != 0xaa) goto -0x18 <uart_isr+0x24 : 1176e4 >			  ## uart_upgrade.c:120:37
  1176fc:    42 20             	r2 = 0x0
  1176fe:    c3 ff c8 14 01 00 	r3 = 0x114c8 <ut_cmd : 114c8 >
  117704:    04 89             	goto 0x12 <uart_isr+0x58 : 117718 >
  117706:    95 1c             	r5 = r1 + r2			  ## uart_upgrade.c:124:45
  117708:    cd 3f             	r5 += 0x3f			  ## uart_upgrade.c:124:45
  11770a:    65 e1 3f 50       	r5 = r5 & 0x3F			  ## uart_upgrade.c:124:45
  11770e:    d8 ee 50 50       	r5 = b[r5+r0] (u)			  ## uart_upgrade.c:124:30
  117712:    d8 ee 21 53       	b[r2+r3] = r5			  ## uart_upgrade.c:124:28
  117716:    c2 21             	r2 += 0x1			  ## uart_upgrade.c:123:50
  117718:    82 f8 f5 2b       	if (r2 != 0x15) goto -0x16 <uart_isr+0x46 : 117706 >
  11771c:    bf ea e5 f5       	call -0x1436 <uart_cmd_verify : 1162ea >			  ## uart_upgrade.c:132:20
  117720:    80 44             	if (r0 != 0) goto 0x8 <uart_isr+0x6A : 11772a >
  117722:    d4 e8 3f 00       	{r5-r0} = [sp++]
  117726:    a9 04             	{psr, rets, reti} = [sp++]
  117728:    81 00             	rti
  11772a:    c0 ef 20 40       	[r4+0x0] &= 0xFFFFFFDF			  ## uart_upgrade.c:193:24
  11772e:    bf ea 15 f6       	call -0x13d6 <uart_recv_loader : 11635c >			  ## uart_upgrade.c:194:13


LZ4_setStreamDecode:
  117732:    75 04             	[--sp] = {rets, r5, r4}			  ## lz4.c:640:0
  117734:    03 16             	r3 = r0			  ## lz4.c:640:0
  117736:    90 dc             	r0 = r1 + r2  #			  ## lz4.c:643:50
  117738:    b2 63             		 [r3+0xc] = r2			  ## lz4.c:642:23
  11773a:    b0 62             	[r3+0x8] = r0			  ## lz4.c:643:22
  11773c:    44 20             	r4 = 0x0			  ## lz4.c:644:25
  11773e:    45 20             	r5 = 0x0			  ## lz4.c:644:25
  117740:    40 21             	r0 = 0x1			  ## lz4.c:646:5
  117742:    50 ec 31 40       	d[r3+0x0] = r5_r4			  ## lz4.c:644:25
  117746:    55 04             	{pc, r5, r4} = [sp++]			  ## lz4.c:646:5


doe:
  117748:    76 04             	[--sp] = {rets, r6-r4}			  ## crc.c:116:0
  11774a:    b3 e8 00 40       	if (r3 != 0x0) {			  ## crc.c:116:0
  11774e:    b3 a2             		r3 = r3 >> 0x2			  ## crc.c:106:19
  117750:    38 19             		r0 ^= r3
                               	}			  ## crc.c:106:25
  117752:    a2 e0 01 20       	r2 = 0x1 - r2
  117756:    43 e0 de ef       	r3 = -0x1022
  11775a:    04 16             	r4 = r0
  11775c:    04 93             	goto 0x26 <doe+0x3C : 117784 >
  11775e:    04 a1             	r4 = r0 << 0x1			  ## crc.c:91:24
  117760:    b4 19             	r4 &= r3			  ## crc.c:92:19
  117762:    80 17             	r0 = r0.l (u)			  ## crc.c:89:33
  117764:    85 af             	r5 = r0 >> 0xf			  ## crc.c:89:33
  117766:    54 19             	r4 |= r5			  ## crc.c:92:19
  117768:    86 ab             	r6 = r0 >> 0xb			  ## crc.c:92:30
  11776a:    5e 19             	r6 ^= r5			  ## crc.c:92:34
  11776c:    66 ac             	r6 = r6 << 0xc			  ## crc.c:92:19
  11776e:    66 e1 80 6d       	r6 = r6 & 0x1000			  ## crc.c:92:19
  117772:    64 19             	r4 |= r6			  ## crc.c:93:18
  117774:    80 a4             	r0 = r0 >> 0x4			  ## crc.c:93:29
  117776:    58 19             	r0 ^= r5			  ## crc.c:93:32
  117778:    00 a5             	r0 = r0 << 0x5			  ## crc.c:93:18
  11777a:    60 e1 20 00       	r0 = r0 & 0x20			  ## crc.c:93:18
  11777e:    40 19             	r0 |= r4			  ## crc.c:94:18
  117780:    04 17             	r4 = r0.b0 (u)			  ## crc.c:98:21
  117782:    c2 21             	r2 += 0x1			  ## crc.c:110:5
  117784:    1d 40             	r5 = b[r1+0x0] (u)
  117786:    5c 19             	r4 ^= r5
  117788:    94 07             	b[r1++=0x1] = r4
  11778a:    f2 49             	if (r2 != 0) goto -0x2e <doe+0x16 : 11775e >
  11778c:    56 04             	{pc, r6-r4} = [sp++]			  ## crc.c:119:1


_rfifft_wrap:
  11778e:    76 04             	[--sp] = {rets, r6-r4}
  117790:    e2 9d             	sp += -0xc
  117792:    44 20             	r4 = 0x0
  117794:    60 e0 81 39       	r3 = 0x102000
  117798:    b4 60             	[r3+0x0] = r4
  11779a:    00 ef 80 3f       	[r3+0x0] |= 0x100
  11779e:    44 21             	r4 = 0x1
  1177a0:    91 e8 00 02       	if (r1 != r2) {
  1177a4:    44 20             		r4 = 0x0
                               	}
  1177a6:    00 eb 21 00       	{r5, r0} = [r0+]
  1177aa:    56 a4             	r6 = r5 << 0x4
  1177ac:    f6 30             	r6 += -0x30
  1177ae:    64 19             	r4 |= r6
  1177b0:    55 a8             	r5 = r5 << 0x8
  1177b2:    35 e1 00 5e       	r5 = r5 + -0x200
  1177b6:    54 19             	r4 |= r5
  1177b8:    00 b0             	r0 = r0 << 0x10
  1177ba:    40 19             	r0 |= r4
  1177bc:    30 21             	r0 |= 0x2
  1177be:    d0 e9 01 00       	d[sp] = r1_r0
  1177c2:    82 22             	[sp+8] = r2
  1177c4:    88 80             	r0 = sp + 0
  1177c6:    b0 61             	[r3+0x4] = r0
  1177c8:    00 ef 01 30       	[r3+0x0] |= 0x1
  1177cc:    30 60             	r0 = [r3+0x0] 
  1177ce:    50 e8 fd 39       	if ((r0 & 0x80) == 0) goto -0x6 <_rfifft_wrap+0x3E : 1177cc >
  1177d2:    00 ef 40 30       	[r3+0x0] |= 0x40
  1177d6:    02 83             	sp += 0xc
  1177d8:    56 04             	{pc, r6-r4} = [sp++]


firfft:
  1177da:    e7 99             	goto -0x4e <_rfifft_wrap : 11778e >


_rififft_wrap:
  1177dc:    75 04             	[--sp] = {rets, r5, r4}
  1177de:    e2 9d             	sp += -0xc
  1177e0:    44 20             	r4 = 0x0
  1177e2:    60 e0 81 39       	r3 = 0x102000
  1177e6:    b4 60             	[r3+0x0] = r4
  1177e8:    00 ef 80 3f       	[r3+0x0] |= 0x100
  1177ec:    44 21             	r4 = 0x1
  1177ee:    91 e8 00 02       	if (r1 != r2) {
  1177f2:    44 20             		r4 = 0x0
                               	}
  1177f4:    00 eb 21 00       	{r5, r0} = [r0+]
  1177f8:    55 a8             	r5 = r5 << 0x8
  1177fa:    35 e1 00 5e       	r5 = r5 + -0x200
  1177fe:    54 19             	r4 |= r5
  117800:    00 b0             	r0 = r0 << 0x10
  117802:    40 19             	r0 |= r4
  117804:    40 e1 26 00       	r0 = r0 | 0x26
  117808:    d0 e9 01 00       	d[sp] = r1_r0
  11780c:    82 22             	[sp+8] = r2
  11780e:    88 80             	r0 = sp + 0
  117810:    b0 61             	[r3+0x4] = r0
  117812:    00 ef 01 30       	[r3+0x0] |= 0x1
  117816:    30 60             	r0 = [r3+0x0] 
  117818:    50 e8 fd 39       	if ((r0 & 0x80) == 0) goto -0x6 <_rififft_wrap+0x3A : 117816 >
  11781c:    00 ef 40 30       	[r3+0x0] |= 0x40
  117820:    02 83             	sp += 0xc
  117822:    55 04             	{pc, r5, r4} = [sp++]


firifft:
  117824:    e7 9b             	goto -0x4a <_rififft_wrap : 1177dc >


strncmp:
  117826:    74 04             	[--sp] = {rets, r4}
  117828:    02 4c             	if (r2 == 0) goto 0x18 <strncmp+0x1C : 117842 >
  11782a:    a2 e0 01 20       	r2 = 0x1 - r2
  11782e:    04 84             	goto 0x8 <strncmp+0x12 : 117838 >
  117830:    02 46             	if (r2 == 0) goto 0xc <strncmp+0x18 : 11783e >
  117832:    83 e8 04 40       	if (r4 != r3) goto 0x8 <strncmp+0x18 : 11783e >
  117836:    c2 21             	r2 += 0x1
  117838:    13 07             	r3 = b[r1++=0x1] (u)
  11783a:    04 07             	r4 = b[r0++=0x1] (u)
  11783c:    f4 59             	if (r4 != 0) goto -0xe <strncmp+0xA : 117830 >
  11783e:    c8 1e             	r0 = r4 - r3
  117840:    54 04             	{pc, r4} = [sp++]
  117842:    40 20             	r0 = 0x0
  117844:    54 04             	{pc, r4} = [sp++]


strstr:
  117846:    74 04             	[--sp] = {rets, r4}
  117848:    0a 40             	r2 = b[r0+0x0] (u)
  11784a:    82 4f             	if (r2 != 0) goto 0x1e <strstr+0x24 : 11786a >
  11784c:    19 40             	r1 = b[r1+0x0] (u)
  11784e:    01 4f             	if (r1 == 0) goto 0x1e <strstr+0x28 : 11786e >
  117850:    40 20             	r0 = 0x0
  117852:    54 04             	{pc, r4} = [sp++]
  117854:    42 20             	r2 = 0x0
  117856:    d8 ee 10 32       	r3 = b[r1+r2] (u)
  11785a:    03 49             	if (r3 == 0) goto 0x12 <strstr+0x28 : 11786e >
  11785c:    d8 ee 00 42       	r4 = b[r0+r2] (u)
  117860:    c2 21             	r2 += 0x1
  117862:    04 e8 f8 31       	if (r3 == r4) goto -0x10 <strstr+0x10 : 117856 >
  117866:    58 ee 01 20       	r2 = b[++r0=0x1] (u)
  11786a:    f2 54             	if (r2 != 0) goto -0x18 <strstr+0xE : 117854 >
  11786c:    f7 91             	goto -0x1e <strstr+0xA : 117850 >
  11786e:    54 04             	{pc, r4} = [sp++]


rom_size:
  117870:    00 00             	nop
  117872:    00 00             	nop
  117874:    00 00             	nop
  117876:    00 00             	nop
  117878:    00 00             	nop
  11787a:    00 00             	nop
  11787c:    00 00             	nop
  11787e:    00 00             	nop
  117880:    00 00             	nop
  117882:    00 00             	nop
  117884:    00 00             	nop
  117886:    00 00             	nop
  117888:    00 00             	nop
  11788a:    00 00             	nop
  11788c:    00 00             	nop
  11788e:    00 00             	nop
  117890:    00 00             	nop
  117892:    00 00             	nop
  117894:    00 00             	nop
  117896:    00 00             	nop
  117898:    00 00             	nop
  11789a:    00 00             	nop
  11789c:    00 00             	nop
  11789e:    00 00             	nop
  1178a0:    00 00             	nop
  1178a2:    00 00             	nop
  1178a4:    00 00             	nop
  1178a6:    00 00             	nop
  1178a8:    00 00             	nop
  1178aa:    00 00             	nop
  1178ac:    00 00             	nop
  1178ae:    00 00             	nop
  1178b0:    00 00             	nop
  1178b2:    00 00             	nop
  1178b4:    00 00             	nop
  1178b6:    00 00             	nop
  1178b8:    00 00             	nop
  1178ba:    00 00             	nop
  1178bc:    00 00             	nop
  1178be:    00 00             	nop
  1178c0:    00 00             	nop
  1178c2:    00 00             	nop
  1178c4:    00 00             	nop
  1178c6:    00 00             	nop
  1178c8:    00 00             	nop
  1178ca:    00 00             	nop
  1178cc:    00 00             	nop
  1178ce:    00 00             	nop
  1178d0:    00 00             	nop
  1178d2:    00 00             	nop
  1178d4:    00 00             	nop
  1178d6:    00 00             	nop
  1178d8:    00 00             	nop
  1178da:    00 00             	nop
  1178dc:    00 00             	nop
  1178de:    00 00             	nop
  1178e0:    00 00             	nop
  1178e2:    00 00             	nop
  1178e4:    00 00             	nop
  1178e6:    00 00             	nop
  1178e8:    00 00             	nop
  1178ea:    00 00             	nop
  1178ec:    00 00             	nop
  1178ee:    00 00             	nop
  1178f0:    00 00             	nop
  1178f2:    00 00             	nop
  1178f4:    00 00             	nop
  1178f6:    00 00             	nop
  1178f8:    00 00             	nop
  1178fa:    00 00             	nop
  1178fc:    00 00             	nop
  1178fe:    00 00             	nop
  117900:    00 00             	nop
  117902:    00 00             	nop
  117904:    00 00             	nop
  117906:    00 00             	nop
  117908:    00 00             	nop
  11790a:    00 00             	nop
  11790c:    00 00             	nop
  11790e:    00 00             	nop
  117910:    00 00             	nop
  117912:    00 00             	nop
  117914:    00 00             	nop
  117916:    00 00             	nop
  117918:    00 00             	nop
  11791a:    00 00             	nop
  11791c:    00 00             	nop
  11791e:    00 00             	nop
  117920:    00 00             	nop
  117922:    00 00             	nop
  117924:    00 00             	nop
  117926:    00 00             	nop
  117928:    00 00             	nop
  11792a:    00 00             	nop
  11792c:    00 00             	nop
  11792e:    00 00             	nop
  117930:    00 00             	nop
  117932:    00 00             	nop
  117934:    00 00             	nop
  117936:    00 00             	nop
  117938:    00 00             	nop
  11793a:    00 00             	nop
  11793c:    00 00             	nop
  11793e:    00 00             	nop
  117940:    00 00             	nop
  117942:    00 00             	nop
  117944:    00 00             	nop
  117946:    00 00             	nop
  117948:    00 00             	nop
  11794a:    00 00             	nop
  11794c:    00 00             	nop
  11794e:    00 00             	nop
  117950:    00 00             	nop
  117952:    00 00             	nop
  117954:    00 00             	nop
  117956:    00 00             	nop
  117958:    00 00             	nop
  11795a:    00 00             	nop
  11795c:    00 00             	nop
  11795e:    00 00             	nop
  117960:    00 00             	nop
  117962:    00 00             	nop
  117964:    00 00             	nop
  117966:    00 00             	nop
  117968:    00 00             	nop
  11796a:    00 00             	nop
  11796c:    00 00             	nop
  11796e:    00 00             	nop
  117970:    00 00             	nop
  117972:    00 00             	nop
  117974:    00 00             	nop
  117976:    00 00             	nop
  117978:    00 00             	nop
  11797a:    00 00             	nop
  11797c:    00 00             	nop
  11797e:    00 00             	nop
  117980:    00 00             	nop
  117982:    00 00             	nop
  117984:    00 00             	nop
  117986:    00 00             	nop
  117988:    00 00             	nop
  11798a:    00 00             	nop
  11798c:    00 00             	nop
  11798e:    00 00             	nop
  117990:    00 00             	nop
  117992:    00 00             	nop
  117994:    00 00             	nop
  117996:    00 00             	nop
  117998:    00 00             	nop
  11799a:    00 00             	nop
  11799c:    00 00             	nop
  11799e:    00 00             	nop
  1179a0:    00 00             	nop
  1179a2:    00 00             	nop
  1179a4:    00 00             	nop
  1179a6:    00 00             	nop
  1179a8:    00 00             	nop
  1179aa:    00 00             	nop
  1179ac:    00 00             	nop
  1179ae:    00 00             	nop
  1179b0:    00 00             	nop
  1179b2:    00 00             	nop
  1179b4:    00 00             	nop
  1179b6:    00 00             	nop
  1179b8:    00 00             	nop
  1179ba:    00 00             	nop
  1179bc:    00 00             	nop
  1179be:    00 00             	nop
  1179c0:    00 00             	nop
  1179c2:    00 00             	nop
  1179c4:    00 00             	nop
  1179c6:    00 00             	nop
  1179c8:    00 00             	nop
  1179ca:    00 00             	nop
  1179cc:    00 00             	nop
  1179ce:    00 00             	nop
  1179d0:    00 00             	nop
  1179d2:    00 00             	nop
  1179d4:    00 00             	nop
  1179d6:    00 00             	nop
  1179d8:    00 00             	nop
  1179da:    00 00             	nop
  1179dc:    00 00             	nop
  1179de:    00 00             	nop
  1179e0:    00 00             	nop
  1179e2:    00 00             	nop
  1179e4:    00 00             	nop
  1179e6:    00 00             	nop
  1179e8:    00 00             	nop
  1179ea:    00 00             	nop
  1179ec:    00 00             	nop
  1179ee:    00 00             	nop
  1179f0:    00 00             	nop
  1179f2:    00 00             	nop
  1179f4:    00 00             	nop
  1179f6:    00 00             	nop
  1179f8:    00 00             	nop
  1179fa:    00 00             	nop
  1179fc:    00 00             	nop
  1179fe:    00 00             	nop
  117a00:    00 00             	nop
  117a02:    00 00             	nop
  117a04:    00 00             	nop
  117a06:    00 00             	nop
  117a08:    00 00             	nop
  117a0a:    00 00             	nop
  117a0c:    00 00             	nop
  117a0e:    00 00             	nop
  117a10:    00 00             	nop
  117a12:    00 00             	nop
  117a14:    00 00             	nop
  117a16:    00 00             	nop
  117a18:    00 00             	nop
  117a1a:    00 00             	nop
  117a1c:    00 00             	nop
  117a1e:    00 00             	nop
  117a20:    00 00             	nop
  117a22:    00 00             	nop
  117a24:    00 00             	nop
  117a26:    00 00             	nop
  117a28:    00 00             	nop
  117a2a:    00 00             	nop
  117a2c:    00 00             	nop
  117a2e:    00 00             	nop
  117a30:    00 00             	nop
  117a32:    00 00             	nop
  117a34:    00 00             	nop
  117a36:    00 00             	nop
  117a38:    00 00             	nop
  117a3a:    00 00             	nop
  117a3c:    00 00             	nop
  117a3e:    00 00             	nop
  117a40:    00 00             	nop
  117a42:    00 00             	nop
  117a44:    00 00             	nop
  117a46:    00 00             	nop
  117a48:    00 00             	nop
  117a4a:    00 00             	nop
  117a4c:    00 00             	nop
  117a4e:    00 00             	nop
  117a50:    00 00             	nop
  117a52:    00 00             	nop
  117a54:    00 00             	nop
  117a56:    00 00             	nop
  117a58:    00 00             	nop
  117a5a:    00 00             	nop
  117a5c:    00 00             	nop
  117a5e:    00 00             	nop
  117a60:    00 00             	nop
  117a62:    00 00             	nop
  117a64:    00 00             	nop
  117a66:    00 00             	nop
  117a68:    00 00             	nop
  117a6a:    00 00             	nop
  117a6c:    00 00             	nop
  117a6e:    00 00             	nop
  117a70:    00 00             	nop
  117a72:    00 00             	nop
  117a74:    00 00             	nop
  117a76:    00 00             	nop
  117a78:    00 00             	nop
  117a7a:    00 00             	nop
  117a7c:    00 00             	nop
  117a7e:    00 00             	nop
  117a80:    00 00             	nop
  117a82:    00 00             	nop
  117a84:    00 00             	nop
  117a86:    00 00             	nop
  117a88:    00 00             	nop
  117a8a:    00 00             	nop
  117a8c:    00 00             	nop
  117a8e:    00 00             	nop
  117a90:    00 00             	nop
  117a92:    00 00             	nop
  117a94:    00 00             	nop
  117a96:    00 00             	nop
  117a98:    00 00             	nop
  117a9a:    00 00             	nop
  117a9c:    00 00             	nop
  117a9e:    00 00             	nop
  117aa0:    00 00             	nop
  117aa2:    00 00             	nop
  117aa4:    00 00             	nop
  117aa6:    00 00             	nop
  117aa8:    00 00             	nop
  117aaa:    00 00             	nop
  117aac:    00 00             	nop
  117aae:    00 00             	nop
  117ab0:    00 00             	nop
  117ab2:    00 00             	nop
  117ab4:    00 00             	nop
  117ab6:    00 00             	nop
  117ab8:    00 00             	nop
  117aba:    00 00             	nop
  117abc:    00 00             	nop
  117abe:    00 00             	nop
  117ac0:    00 00             	nop
  117ac2:    00 00             	nop
  117ac4:    00 00             	nop
  117ac6:    00 00             	nop
  117ac8:    00 00             	nop
  117aca:    00 00             	nop
  117acc:    00 00             	nop
  117ace:    00 00             	nop
  117ad0:    00 00             	nop
  117ad2:    00 00             	nop
  117ad4:    00 00             	nop
  117ad6:    00 00             	nop
  117ad8:    00 00             	nop
  117ada:    00 00             	nop
  117adc:    00 00             	nop
  117ade:    00 00             	nop
  117ae0:    00 00             	nop
  117ae2:    00 00             	nop
  117ae4:    00 00             	nop
  117ae6:    00 00             	nop
  117ae8:    00 00             	nop
  117aea:    00 00             	nop
  117aec:    00 00             	nop
  117aee:    00 00             	nop
  117af0:    00 00             	nop
  117af2:    00 00             	nop
  117af4:    00 00             	nop
  117af6:    00 00             	nop
  117af8:    00 00             	nop
  117afa:    00 00             	nop
  117afc:    00 00             	nop
  117afe:    00 00             	nop
  117b00:    00 00             	nop
  117b02:    00 00             	nop
  117b04:    00 00             	nop
  117b06:    00 00             	nop
  117b08:    00 00             	nop
  117b0a:    00 00             	nop
  117b0c:    00 00             	nop
  117b0e:    00 00             	nop
  117b10:    00 00             	nop
  117b12:    00 00             	nop
  117b14:    00 00             	nop
  117b16:    00 00             	nop
  117b18:    00 00             	nop
  117b1a:    00 00             	nop
  117b1c:    00 00             	nop
  117b1e:    00 00             	nop
  117b20:    00 00             	nop
  117b22:    00 00             	nop
  117b24:    00 00             	nop
  117b26:    00 00             	nop
  117b28:    00 00             	nop
  117b2a:    00 00             	nop
  117b2c:    00 00             	nop
  117b2e:    00 00             	nop
  117b30:    00 00             	nop
  117b32:    00 00             	nop
  117b34:    00 00             	nop
  117b36:    00 00             	nop
  117b38:    00 00             	nop
  117b3a:    00 00             	nop
  117b3c:    00 00             	nop
  117b3e:    00 00             	nop
  117b40:    00 00             	nop
  117b42:    00 00             	nop
  117b44:    00 00             	nop
  117b46:    00 00             	nop
  117b48:    00 00             	nop
  117b4a:    00 00             	nop
  117b4c:    00 00             	nop
  117b4e:    00 00             	nop
  117b50:    00 00             	nop
  117b52:    00 00             	nop
  117b54:    00 00             	nop
  117b56:    00 00             	nop
  117b58:    00 00             	nop
  117b5a:    00 00             	nop
  117b5c:    00 00             	nop
  117b5e:    00 00             	nop
  117b60:    00 00             	nop
  117b62:    00 00             	nop
  117b64:    00 00             	nop
  117b66:    00 00             	nop
  117b68:    00 00             	nop
  117b6a:    00 00             	nop
  117b6c:    00 00             	nop
  117b6e:    00 00             	nop
  117b70:    00 00             	nop
  117b72:    00 00             	nop
  117b74:    00 00             	nop
  117b76:    00 00             	nop
  117b78:    00 00             	nop
  117b7a:    00 00             	nop
  117b7c:    00 00             	nop
  117b7e:    00 00             	nop
  117b80:    00 00             	nop
  117b82:    00 00             	nop
  117b84:    00 00             	nop
  117b86:    00 00             	nop
  117b88:    00 00             	nop
  117b8a:    00 00             	nop
  117b8c:    00 00             	nop
  117b8e:    00 00             	nop
  117b90:    00 00             	nop
  117b92:    00 00             	nop
  117b94:    00 00             	nop
  117b96:    00 00             	nop
  117b98:    00 00             	nop
  117b9a:    00 00             	nop
  117b9c:    00 00             	nop
  117b9e:    00 00             	nop
  117ba0:    00 00             	nop
  117ba2:    00 00             	nop
  117ba4:    00 00             	nop
  117ba6:    00 00             	nop
  117ba8:    00 00             	nop
  117baa:    00 00             	nop
  117bac:    00 00             	nop
  117bae:    00 00             	nop
  117bb0:    00 00             	nop
  117bb2:    00 00             	nop
  117bb4:    00 00             	nop
  117bb6:    00 00             	nop
  117bb8:    00 00             	nop
  117bba:    00 00             	nop
  117bbc:    00 00             	nop
  117bbe:    00 00             	nop
  117bc0:    00 00             	nop
  117bc2:    00 00             	nop
  117bc4:    00 00             	nop
  117bc6:    00 00             	nop
  117bc8:    00 00             	nop
  117bca:    00 00             	nop
  117bcc:    00 00             	nop
  117bce:    00 00             	nop
  117bd0:    00 00             	nop
  117bd2:    00 00             	nop
  117bd4:    00 00             	nop
  117bd6:    00 00             	nop
  117bd8:    00 00             	nop
  117bda:    00 00             	nop
  117bdc:    00 00             	nop
  117bde:    00 00             	nop
  117be0:    00 00             	nop
  117be2:    00 00             	nop
  117be4:    00 00             	nop
  117be6:    00 00             	nop
  117be8:    00 00             	nop
  117bea:    00 00             	nop
  117bec:    00 00             	nop
  117bee:    00 00             	nop
  117bf0:    00 00             	nop
  117bf2:    00 00             	nop
  117bf4:    00 00             	nop
  117bf6:    00 00             	nop
  117bf8:    00 00             	nop
  117bfa:    00 00             	nop
  117bfc:    00 00             	nop
  117bfe:    00 00             	nop
  117c00:    00 00             	nop
  117c02:    00 00             	nop
  117c04:    00 00             	nop
  117c06:    00 00             	nop
  117c08:    00 00             	nop
  117c0a:    00 00             	nop
  117c0c:    00 00             	nop
  117c0e:    00 00             	nop
  117c10:    00 00             	nop
  117c12:    00 00             	nop
  117c14:    00 00             	nop
  117c16:    00 00             	nop
  117c18:    00 00             	nop
  117c1a:    00 00             	nop
  117c1c:    00 00             	nop
  117c1e:    00 00             	nop
  117c20:    00 00             	nop
  117c22:    00 00             	nop
  117c24:    00 00             	nop
  117c26:    00 00             	nop
  117c28:    00 00             	nop
  117c2a:    00 00             	nop
  117c2c:    00 00             	nop
  117c2e:    00 00             	nop
  117c30:    00 00             	nop
  117c32:    00 00             	nop
  117c34:    00 00             	nop
  117c36:    00 00             	nop
  117c38:    00 00             	nop
  117c3a:    00 00             	nop
  117c3c:    00 00             	nop
  117c3e:    00 00             	nop
  117c40:    00 00             	nop
  117c42:    00 00             	nop
  117c44:    00 00             	nop
  117c46:    00 00             	nop
  117c48:    00 00             	nop
  117c4a:    00 00             	nop
  117c4c:    00 00             	nop
  117c4e:    00 00             	nop
  117c50:    00 00             	nop
  117c52:    00 00             	nop
  117c54:    00 00             	nop
  117c56:    00 00             	nop
  117c58:    00 00             	nop
  117c5a:    00 00             	nop
  117c5c:    00 00             	nop
  117c5e:    00 00             	nop
  117c60:    00 00             	nop
  117c62:    00 00             	nop
  117c64:    00 00             	nop
  117c66:    00 00             	nop
  117c68:    00 00             	nop
  117c6a:    00 00             	nop
  117c6c:    00 00             	nop
  117c6e:    00 00             	nop
  117c70:    00 00             	nop
  117c72:    00 00             	nop
  117c74:    00 00             	nop
  117c76:    00 00             	nop
  117c78:    00 00             	nop
  117c7a:    00 00             	nop
  117c7c:    00 00             	nop
  117c7e:    00 00             	nop
  117c80:    00 00             	nop
  117c82:    00 00             	nop
  117c84:    00 00             	nop
  117c86:    00 00             	nop
  117c88:    00 00             	nop
  117c8a:    00 00             	nop
  117c8c:    00 00             	nop
  117c8e:    00 00             	nop
  117c90:    00 00             	nop
  117c92:    00 00             	nop
  117c94:    00 00             	nop
  117c96:    00 00             	nop
  117c98:    00 00             	nop
  117c9a:    00 00             	nop
  117c9c:    00 00             	nop
  117c9e:    00 00             	nop
  117ca0:    00 00             	nop
  117ca2:    00 00             	nop
  117ca4:    00 00             	nop
  117ca6:    00 00             	nop
  117ca8:    00 00             	nop
  117caa:    00 00             	nop
  117cac:    00 00             	nop
  117cae:    00 00             	nop
  117cb0:    00 00             	nop
  117cb2:    00 00             	nop
  117cb4:    00 00             	nop
  117cb6:    00 00             	nop
  117cb8:    00 00             	nop
  117cba:    00 00             	nop
  117cbc:    00 00             	nop
  117cbe:    00 00             	nop
  117cc0:    00 00             	nop
  117cc2:    00 00             	nop
  117cc4:    00 00             	nop
  117cc6:    00 00             	nop
  117cc8:    00 00             	nop
  117cca:    00 00             	nop
  117ccc:    00 00             	nop
  117cce:    00 00             	nop
  117cd0:    00 00             	nop
  117cd2:    00 00             	nop
  117cd4:    00 00             	nop
  117cd6:    00 00             	nop
  117cd8:    00 00             	nop
  117cda:    00 00             	nop
  117cdc:    00 00             	nop
  117cde:    00 00             	nop
  117ce0:    00 00             	nop
  117ce2:    00 00             	nop
  117ce4:    00 00             	nop
  117ce6:    00 00             	nop
  117ce8:    00 00             	nop
  117cea:    00 00             	nop
  117cec:    00 00             	nop
  117cee:    00 00             	nop
  117cf0:    00 00             	nop
  117cf2:    00 00             	nop
  117cf4:    00 00             	nop
  117cf6:    00 00             	nop
  117cf8:    00 00             	nop
  117cfa:    00 00             	nop
  117cfc:    00 00             	nop
  117cfe:    00 00             	nop
  117d00:    00 00             	nop
  117d02:    00 00             	nop
  117d04:    00 00             	nop
  117d06:    00 00             	nop
  117d08:    00 00             	nop
  117d0a:    00 00             	nop
  117d0c:    00 00             	nop
  117d0e:    00 00             	nop
  117d10:    00 00             	nop
  117d12:    00 00             	nop
  117d14:    00 00             	nop
  117d16:    00 00             	nop
  117d18:    00 00             	nop
  117d1a:    00 00             	nop
  117d1c:    00 00             	nop
  117d1e:    00 00             	nop
  117d20:    00 00             	nop
  117d22:    00 00             	nop
  117d24:    00 00             	nop
  117d26:    00 00             	nop
  117d28:    00 00             	nop
  117d2a:    00 00             	nop
  117d2c:    00 00             	nop
  117d2e:    00 00             	nop
  117d30:    00 00             	nop
  117d32:    00 00             	nop
  117d34:    00 00             	nop
  117d36:    00 00             	nop
  117d38:    00 00             	nop
  117d3a:    00 00             	nop
  117d3c:    00 00             	nop
  117d3e:    00 00             	nop
  117d40:    00 00             	nop
  117d42:    00 00             	nop
  117d44:    00 00             	nop
  117d46:    00 00             	nop
  117d48:    00 00             	nop
  117d4a:    00 00             	nop
  117d4c:    00 00             	nop
  117d4e:    00 00             	nop
  117d50:    00 00             	nop
  117d52:    00 00             	nop
  117d54:    00 00             	nop
  117d56:    00 00             	nop
  117d58:    00 00             	nop
  117d5a:    00 00             	nop
  117d5c:    00 00             	nop
  117d5e:    00 00             	nop


__stub_local_irq_enable:
  117d60:    ff ea 65 d6       	goto -0x5336 <local_irq_enable : 112a2e >			  ## entry_list.S:7:0


__stub_local_irq_disable:
  117d64:    ff ea 5c d6       	goto -0x5348 <os_code_begin : 112a20 >			  ## entry_list.S:14:0


__stub_p33_buf:
  117d68:    ff ea d0 ef       	goto -0x2060 <p33_buf : 115d0c >			  ## entry_list.S:21:0


__stub_p33_xor_1byte:
  117d6c:    ff ea 14 fa       	goto -0xbd8 <p33_xor_1byte : 117198 >			  ## entry_list.S:28:0


__stub_p33_and_1byte:
  117d70:    ff ea 6c f0       	goto -0x1f28 <p33_and_1byte : 115e4c >			  ## entry_list.S:35:0


__stub_p33_or_1byte:
  117d74:    ff ea 45 f0       	goto -0x1f76 <p33_or_1byte : 115e02 >			  ## entry_list.S:42:0


__stub_p33_tx_1byte:
  117d78:    ff ea d4 ef       	goto -0x2058 <p33_tx_1byte : 115d24 >			  ## entry_list.S:49:0


__stub_p33_rx_1byte:
  117d7c:    ff ea fc ef       	goto -0x2008 <p33_rx_1byte : 115d78 >			  ## entry_list.S:56:0


__stub_P33_CON_SET:
  117d80:    ff ea 30 fa       	goto -0xba0 <P33_CON_SET : 1171e4 >			  ## entry_list.S:63:0


__stub_os_init:
  117d84:    ff ea 8d e0       	goto -0x3ee6 <os_init : 113ea2 >			  ## entry_list.S:70:0


__stub_os_start:
  117d88:    ff ea ac e0       	goto -0x3ea8 <os_start : 113ee4 >			  ## entry_list.S:77:0


__stub_os_get_curr_tcb_var:
  117d8c:    ff ea 8f e0       	goto -0x3ee2 <os_get_curr_tcb_var : 113eae >			  ## entry_list.S:84:0


__stub_os_task_create:
  117d90:    ff ea e3 e0       	goto -0x3e3a <os_task_create : 113f5a >			  ## entry_list.S:91:0


__stub_os_current_task:
  117d94:    ff ea 17 e1       	goto -0x3dd2 <os_current_task : 113fc6 >			  ## entry_list.S:98:0


__stub_os_time_dly:
  117d98:    ff ea 1b e1       	goto -0x3dca <os_time_dly : 113fd2 >			  ## entry_list.S:105:0


__stub_os_time_get:
  117d9c:    ff ea 28 e1       	goto -0x3db0 <os_time_get : 113ff0 >			  ## entry_list.S:112:0


__stub_os_task_del_req:
  117da0:    ff ea 61 e1       	goto -0x3d3e <os_task_del_req : 114066 >			  ## entry_list.S:119:0


__stub_os_task_del_res:
  117da4:    ff ea 87 e1       	goto -0x3cf2 <os_task_del_res : 1140b6 >			  ## entry_list.S:126:0


__stub_os_task_del:
  117da8:    ff ea 8f e1       	goto -0x3ce2 <os_task_del : 1140ca >			  ## entry_list.S:133:0


__stub___os_taskq_pend:
  117dac:    ff ea f0 e1       	goto -0x3c20 <__os_taskq_pend : 114190 >			  ## entry_list.S:140:0


__stub_os_taskq_pend:
  117db0:    ff ea 6f e2       	goto -0x3b22 <os_taskq_pend : 114292 >			  ## entry_list.S:147:0


__stub_os_task_pend:
  117db4:    ff ea 70 e2       	goto -0x3b20 <os_task_pend : 114298 >			  ## entry_list.S:154:0


__stub___os_taskq_post:
  117db8:    ff ea 71 e2       	goto -0x3b1e <__os_taskq_post : 11429e >			  ## entry_list.S:161:0


__stub_os_taskq_post:
  117dbc:    ff ea a8 e2       	goto -0x3ab0 <os_taskq_post : 114310 >			  ## entry_list.S:168:0


__stub_os_taskq_post_type:
  117dc0:    ff ea c1 e2       	goto -0x3a7e <os_taskq_post_type : 114346 >			  ## entry_list.S:175:0


__stub_os_taskq_flush:
  117dc4:    ff ea c0 e2       	goto -0x3a80 <os_taskq_flush : 114348 >			  ## entry_list.S:182:0


__stub_task_queue_post_event:
  117dc8:    ff ea 1c e3       	goto -0x39c8 <task_queue_post_event : 114404 >			  ## entry_list.S:189:0


__stub_os_taskq_post_msg:
  117dcc:    ff ea 1e e3       	goto -0x39c4 <os_taskq_post_msg : 11440c >			  ## entry_list.S:196:0


__stub_os_taskq_post_event:
  117dd0:    ff ea 38 e3       	goto -0x3990 <os_taskq_post_event : 114444 >			  ## entry_list.S:203:0


__stub_os_taskq_accept:
  117dd4:    ff ea 52 e3       	goto -0x395c <os_taskq_accept : 11447c >			  ## entry_list.S:210:0


__stub_os_taskq_del:
  117dd8:    ff ea 53 e3       	goto -0x395a <os_taskq_del : 114482 >			  ## entry_list.S:217:0


__stub_os_taskq_del_type:
  117ddc:    ff ea bb e3       	goto -0x388a <os_taskq_del_type : 114556 >			  ## entry_list.S:224:0


__stub_os_sem_create:
  117de0:    ff ea ba e3       	goto -0x388c <os_sem_create : 114558 >			  ## entry_list.S:231:0


__stub_os_sem_del:
  117de4:    ff ea d9 e3       	goto -0x384e <os_sem_del : 11459a >			  ## entry_list.S:238:0


__stub_os_sem_pend:
  117de8:    ff ea dc e3       	goto -0x3848 <os_sem_pend : 1145a4 >			  ## entry_list.S:245:0


__stub_os_sem_post:
  117dec:    ff ea 7f e1       	goto -0x3d02 <os_sem_post : 1140ee >			  ## entry_list.S:252:0


__stub_os_sem_set:
  117df0:    ff ea ed e3       	goto -0x3826 <os_sem_set : 1145ce >			  ## entry_list.S:259:0


__stub_os_sem_valid:
  117df4:    ff ea 03 e4       	goto -0x37fa <os_sem_valid : 1145fe >			  ## entry_list.S:266:0


__stub_os_sem_query:
  117df8:    ff ea 08 e4       	goto -0x37f0 <os_sem_query : 11460c >			  ## entry_list.S:273:0


__stub_os_mutex_create:
  117dfc:    ff ea 12 e4       	goto -0x37dc <os_mutex_create : 114624 >			  ## entry_list.S:280:0


__stub_os_mutex_del:
  117e00:    ff ea 26 e4       	goto -0x37b4 <os_mutex_del : 114650 >			  ## entry_list.S:287:0


__stub_os_mutex_pend:
  117e04:    ff ea 32 e4       	goto -0x379c <os_mutex_pend : 11466c >			  ## entry_list.S:294:0


__stub_os_mutex_post:
  117e08:    ff ea 6e e4       	goto -0x3724 <os_mutex_post : 1146e8 >			  ## entry_list.S:301:0


__stub_os_mutex_valid:
  117e0c:    ff ea 9e e4       	goto -0x36c4 <os_mutex_valid : 11474c >			  ## entry_list.S:308:0


__stub_xTaskCreate:
  117e10:    ff ea 79 dd       	goto -0x450e <xTaskCreate : 113906 >			  ## entry_list.S:315:0


__stub_xTaskGetCurrentTaskHandle:
  117e14:    ff ea 3a e0       	goto -0x3f8c <xTaskGetCurrentTaskHandle : 113e8c >			  ## entry_list.S:322:0


__stub_xTaskGetTickCount:
  117e18:    ff ea 52 df       	goto -0x415c <xTaskGetTickCount : 113cc0 >			  ## entry_list.S:329:0


__stub_xTaskGetHandle:
  117e1c:    ff ea 98 df       	goto -0x40d0 <xTaskGetHandle : 113d50 >			  ## entry_list.S:336:0


__stub_vTaskDelete:
  117e20:    ff ea 6b de       	goto -0x432a <vTaskDelete : 113afa >			  ## entry_list.S:343:0


__stub_xTaskGetApplicationTaskTag:
  117e24:    ff ea 04 e0       	goto -0x3ff8 <xTaskGetApplicationTaskTag : 113e30 >			  ## entry_list.S:350:0


__stub_vTaskSetApplicationTaskTag:
  117e28:    ff ea ef df       	goto -0x4022 <vTaskSetApplicationTaskTag : 113e0a >			  ## entry_list.S:357:0


__stub_xQueueGenericCreateStatic:
  117e2c:    ff ea 72 d7       	goto -0x511c <xQueueGenericCreateStatic : 112d14 >			  ## entry_list.S:364:0


__stub_xQueueGenericReset:
  117e30:    ff ea 3a d7       	goto -0x518c <xQueueGenericReset : 112ca8 >			  ## entry_list.S:371:0


__stub_xQueueGenericSend:
  117e34:    ff ea 84 da       	goto -0x4af8 <xQueueGenericSend : 113340 >			  ## entry_list.S:378:0


__stub_xQueueGenericSendFromISR:
  117e38:    ff ea 71 dc       	goto -0x471e <xQueueGenericSendFromISR : 11371e >			  ## entry_list.S:385:0


__stub_xQueueGenericReceive:
  117e3c:    ff ea 51 db       	goto -0x495e <xQueueGenericReceive : 1134e2 >			  ## entry_list.S:392:0


__stub_xQueueReceiveFromISR:
  117e40:    ff ea c1 dc       	goto -0x467e <xQueueReceiveFromISR : 1137c6 >			  ## entry_list.S:399:0


__stub_vQueueDelete:
  117e44:    ff ea 42 dd       	goto -0x457c <vQueueDelete : 1138cc >			  ## entry_list.S:406:0


__stub_uxQueueMessagesWaiting:
  117e48:    ff ea fe dc       	goto -0x4604 <uxQueueMessagesWaiting : 113848 >			  ## entry_list.S:413:0


__stub_uxQueueMessagesWaitingFromISR:
  117e4c:    ff ea 2c dd       	goto -0x45a8 <uxQueueMessagesWaitingFromISR : 1138a8 >			  ## entry_list.S:420:0


__stub_uxQueueSpacesAvailable:
  117e50:    ff ea 11 dd       	goto -0x45de <uxQueueSpacesAvailable : 113876 >			  ## entry_list.S:427:0


__stub_pcTaskGetName:
  117e54:    ff ea 39 df       	goto -0x418e <pcTaskGetName : 113cca >			  ## entry_list.S:434:0


__stub_prvGetExpectedIdleTime:
  117e58:    ff ea b3 de       	goto -0x429a <prvGetExpectedIdleTime : 113bc2 >			  ## entry_list.S:441:0


__stub_eTaskConfirmSleepModeStatus:
  117e5c:    ff ea fb df       	goto -0x400a <eTaskConfirmSleepModeStatus : 113e56 >			  ## entry_list.S:448:0


__stub_vTaskStepTick:
  117e60:    ff ea b6 df       	goto -0x4094 <vTaskStepTick : 113dd0 >			  ## entry_list.S:455:0


__stub_pxPortInitialiseStack:
  117e64:    ff ea 78 e4       	goto -0x3710 <pxPortInitialiseStack : 114758 >			  ## entry_list.S:462:0


__stub_xPortStartScheduler:
  117e68:    ff ea 2a e0       	goto -0x3fac <xPortStartScheduler : 113ec0 >			  ## entry_list.S:469:0


__stub_vPortEndScheduler:
  117e6c:    ff ea 7b e4       	goto -0x370a <vPortEndScheduler : 114766 >			  ## entry_list.S:476:0


__stub_vPortYield:
  117e70:    ff ea f4 d6       	goto -0x5218 <vPortYield : 112c5c >			  ## entry_list.S:483:0


__stub_vPortExitCritical:
  117e74:    ff ea 8d e4       	goto -0x36e6 <vPortExitCritical : 114792 >			  ## entry_list.S:490:0


__stub_OS_ClrPending:
  117e78:    ff ea a6 e4       	goto -0x36b4 <OS_ClrPending : 1147c8 >			  ## entry_list.S:497:0


__stub_vTickISR:
  117e7c:    ff ea b2 e4       	goto -0x369c <vTickISR : 1147e4 >			  ## entry_list.S:504:0


__stub_pmalloc_init:
  117e80:    ff ea 26 e6       	goto -0x33b4 <pmalloc_init : 114ad0 >			  ## entry_list.S:511:0


__stub_pmalloc:
  117e84:    ff ea 67 e6       	goto -0x3332 <pmalloc : 114b56 >			  ## entry_list.S:518:0


__stub_pfree:
  117e88:    ff ea bf e6       	goto -0x3282 <pfree : 114c0a >			  ## entry_list.S:525:0


__stub_pmalloc_get_unused_pages:
  117e8c:    ff ea 5a e6       	goto -0x334c <pmalloc_get_unused_pages : 114b44 >			  ## entry_list.S:532:0


__stub_get_physic_address:
  117e90:    ff ea b0 e6       	goto -0x32a0 <get_physic_address : 114bf4 >			  ## entry_list.S:539:0


__stub_pmm_get_var:
  117e94:    ff ea 52 e6       	goto -0x335c <pmm_get_var : 114b3c >			  ## entry_list.S:546:0


__stub_vmm_init_:
  117e98:    ff ea ed e6       	goto -0x3226 <vmm_init_ : 114c76 >			  ## entry_list.S:553:0


__stub_vmalloc_:
  117e9c:    ff ea 13 e7       	goto -0x31da <vmalloc_ : 114cc6 >			  ## entry_list.S:560:0


__stub_vfree_:
  117ea0:    ff ea ca e7       	goto -0x306c <vfree_ : 114e38 >			  ## entry_list.S:567:0


__stub_vmem_get_phy_adr:
  117ea4:    ff ea 32 e8       	goto -0x2f9c <vmem_get_phy_adr : 114f0c >			  ## entry_list.S:574:0


__stub_vmem_start:
  117ea8:    ff ea 4b e8       	goto -0x2f6a <vmem_start : 114f42 >			  ## entry_list.S:581:0


__stub_vmem_end:
  117eac:    ff ea 50 e8       	goto -0x2f60 <vmem_end : 114f50 >			  ## entry_list.S:588:0


__stub_vmm_get_var:
  117eb0:    ff ea 05 e7       	goto -0x31f6 <vmm_get_var : 114cbe >			  ## entry_list.S:595:0


__stub_get_cvsd_codec_ops:
  117eb4:    ff ea d9 cd       	goto -0x644e <get_cvsd_codec_ops : 111a6a >			  ## entry_list.S:602:0


__stub_VecPlus_fix_r_r_r:
  117eb8:    ff ea fa ce       	goto -0x620c <VecPlus_fix_r_r_r : 111cb0 >			  ## entry_list.S:609:0


__stub_VecMinus_fix_r_r_r:
  117ebc:    ff ea 13 cf       	goto -0x61da <VecMinus_fix_r_r_r : 111ce6 >			  ## entry_list.S:616:0


__stub_VecDiv_fix_r_r_r:
  117ec0:    ff ea 2c cf       	goto -0x61a8 <VecDiv_fix_r_r_r : 111d1c >			  ## entry_list.S:623:0


__stub_VecEleMul_fix_r_r_r:
  117ec4:    ff ea 56 cf       	goto -0x6154 <VecEleMul_fix_r_r_r : 111d74 >			  ## entry_list.S:630:0


__stub_VecEleMul_fix_c_r_c:
  117ec8:    ff ea 71 cf       	goto -0x611e <VecEleMul_fix_c_r_c : 111dae >			  ## entry_list.S:637:0


__stub_VecMagAndDiv_fix:
  117ecc:    ff ea 92 cf       	goto -0x60dc <VecMagAndDiv_fix : 111df4 >			  ## entry_list.S:644:0


__stub_VecCopy_fix_r_r:
  117ed0:    ff ea ec cf       	goto -0x6028 <VecCopy_fix_r_r : 111eac >			  ## entry_list.S:651:0


__stub_VecConjEleMulAndDiv_fix:
  117ed4:    ff ea 10 d0       	goto -0x5fe0 <VecConjEleMulAndDiv_fix : 111ef8 >			  ## entry_list.S:658:0


__stub_VecRecurAvg_fix:
  117ed8:    ff ea 57 d0       	goto -0x5f52 <VecRecurAvg_fix : 111f8a >			  ## entry_list.S:665:0


__stub_VecConjRecurAvg_fix:
  117edc:    ff ea 70 d0       	goto -0x5f20 <VecConjRecurAvg_fix : 111fc0 >			  ## entry_list.S:672:0


__stub_VecMagRecurAvg_fix:
  117ee0:    ff ea aa d0       	goto -0x5eac <VecMagRecurAvg_fix : 112038 >			  ## entry_list.S:679:0


__stub_VecPlusMulScalar_fix:
  117ee4:    ff ea d6 d0       	goto -0x5e54 <VecPlusMulScalar_fix : 112094 >			  ## entry_list.S:686:0


__stub_VecGetMag_fix:
  117ee8:    ff ea 00 d1       	goto -0x5e00 <VecGetMag_fix : 1120ec >			  ## entry_list.S:693:0


__stub_VecMax_fix_v_s:
  117eec:    ff ea 1b d1       	goto -0x5dca <VecMax_fix_v_s : 112126 >			  ## entry_list.S:700:0


__stub_VecMin_fix_v_s:
  117ef0:    ff ea 29 d1       	goto -0x5dae <VecMin_fix_v_s : 112146 >			  ## entry_list.S:707:0


__stub_VecOppos_fix:
  117ef4:    ff ea 37 d1       	goto -0x5d92 <VecOppos_fix : 112166 >			  ## entry_list.S:714:0


__stub_VecMean_fix:
  117ef8:    ff ea 4f d1       	goto -0x5d62 <VecMean_fix : 11219a >			  ## entry_list.S:721:0


__stub_VecMeanSq_fix_c:
  117efc:    ff ea 79 d1       	goto -0x5d0e <VecMeanSq_fix_c : 1121f2 >			  ## entry_list.S:728:0


__stub_VecRequanByMax_fix_r:
  117f00:    ff ea 9c d1       	goto -0x5cc8 <VecRequanByMax_fix_r : 11223c >			  ## entry_list.S:735:0


__stub_VecRequanByMax_fix_c:
  117f04:    ff ea cc d1       	goto -0x5c68 <VecRequanByMax_fix_c : 1122a0 >			  ## entry_list.S:742:0


__stub_VecEleShift_fix_c:
  117f08:    ff ea 22 d2       	goto -0x5bbc <VecEleShift_fix_c : 112350 >			  ## entry_list.S:749:0


__stub_VecOvShift_fix:
  117f0c:    ff ea a2 cf       	goto -0x60bc <VecOvShift_fix : 111e54 >			  ## entry_list.S:756:0


__stub_VecCopy_fix_r_c:
  117f10:    ff ea de cf       	goto -0x6044 <VecCopy_fix_r_c : 111ed0 >			  ## entry_list.S:763:0


__stub_VecMeanSq_fix_r:
  117f14:    ff ea 56 d1       	goto -0x5d54 <VecMeanSq_fix_r : 1121c4 >			  ## entry_list.S:770:0


__stub_VecEleShift_fix_r:
  117f18:    ff ea 04 d2       	goto -0x5bf8 <VecEleShift_fix_r : 112324 >			  ## entry_list.S:777:0


__stub_logAprx_fix:
  117f1c:    ff ea 9b d2       	goto -0x5aca <logAprx_fix : 112456 >			  ## entry_list.S:784:0


__stub_expAprx_fix:
  117f20:    ff ea ae d2       	goto -0x5aa4 <expAprx_fix : 112480 >			  ## entry_list.S:791:0


__stub_sqrtAprx_fix:
  117f24:    ff ea d4 d2       	goto -0x5a58 <sqrtAprx_fix : 1124d0 >			  ## entry_list.S:798:0


__stub_VecEleMul_s16_s16_s32:
  117f28:    ff ea ae cd       	goto -0x64a4 <VecEleMul_s16_s16_s32 : 111a88 >			  ## entry_list.S:805:0


__stub_VecEleMul_s16_s32_s16:
  117f2c:    ff ea ce cd       	goto -0x6464 <VecEleMul_s16_s32_s16 : 111acc >			  ## entry_list.S:812:0


__stub_VecEleMul_s32_s16_s32:
  117f30:    ff ea eb cd       	goto -0x642a <VecEleMul_s32_s16_s32 : 111b0a >			  ## entry_list.S:819:0


__stub_VecOvShift_s16_s16:
  117f34:    ff ea 06 ce       	goto -0x63f4 <VecOvShift_s16_s16 : 111b44 >			  ## entry_list.S:826:0


__stub_VecOvShift_s16_s32:
  117f38:    ff ea 32 ce       	goto -0x639c <VecOvShift_s16_s32 : 111ba0 >			  ## entry_list.S:833:0


__stub_VecCopy_s16_s32:
  117f3c:    ff ea 5d ce       	goto -0x6346 <VecCopy_s16_s32 : 111bfa >			  ## entry_list.S:840:0


__stub_VecCopy_s32_s16:
  117f40:    ff ea 6c ce       	goto -0x6328 <VecCopy_s32_s16 : 111c1c >			  ## entry_list.S:847:0


__stub_VecMinus_s16_s32_s32:
  117f44:    ff ea 7d ce       	goto -0x6306 <VecMinus_s16_s32_s32 : 111c42 >			  ## entry_list.S:854:0


__stub_VecMeanSq_s16_s32:
  117f48:    ff ea 97 ce       	goto -0x62d2 <VecMeanSq_s16_s32 : 111c7a >			  ## entry_list.S:861:0


__stub_CircVecArrEwMulAndSum_fix:
  117f4c:    ff ea 1e d2       	goto -0x5bc4 <CircVecArrEwMulAndSum_fix : 11238c >			  ## entry_list.S:868:0


__stub_B_fir_cal_s:
  117f50:    ff ea 06 d3       	goto -0x59f4 <B_fir_cal_s : 112560 >			  ## entry_list.S:875:0


__stub_B_array_vol:
  117f54:    ff ea 2d d3       	goto -0x59a6 <B_array_vol : 1125b2 >			  ## entry_list.S:882:0


__stub_B_Syn_filt:
  117f58:    ff ea 33 d3       	goto -0x599a <B_Syn_filt : 1125c2 >			  ## entry_list.S:889:0


__stub_B_Residu:
  117f5c:    ff ea 4a d3       	goto -0x596c <B_Residu : 1125f4 >			  ## entry_list.S:896:0


__stub_B_comput_correlataionS:
  117f60:    ff ea f2 d2       	goto -0x5a1c <B_comput_correlataionS : 112548 >			  ## entry_list.S:903:0


__stub_B_iircal:
  117f64:    ff ea d5 d2       	goto -0x5a56 <B_iircal : 112512 >			  ## entry_list.S:910:0


__stub_repair_corefun_corr:
  117f68:    ff ea 5d d3       	goto -0x5946 <repair_corefun_corr : 112626 >			  ## entry_list.S:917:0


__stub_repair_corefun_mixdata:
  117f6c:    ff ea 86 d3       	goto -0x58f4 <repair_corefun_mixdata : 11267c >			  ## entry_list.S:924:0


__stub_get_repair_api:
  117f70:    ff ea 98 d3       	goto -0x58d0 <get_repair_api : 1126a4 >			  ## entry_list.S:931:0


__stub_firfft:
  117f74:    ff ea 31 fc       	goto -0x79e <firfft : 1177da >			  ## entry_list.S:938:0


__stub_firifft:
  117f78:    ff ea 54 fc       	goto -0x758 <firifft : 117824 >			  ## entry_list.S:945:0


__stub__rfifft_wrap:
  117f7c:    ff ea 07 fc       	goto -0x7f2 <_rfifft_wrap : 11778e >			  ## entry_list.S:952:0


__stub__rififft_wrap:
  117f80:    ff ea 2c fc       	goto -0x7a8 <_rififft_wrap : 1177dc >			  ## entry_list.S:959:0


__stub_memmem:
  117f84:    ff ea 1b ca       	goto -0x6bca <memmem : 1113be >			  ## entry_list.S:966:0


__stub_memcpy:
  117f88:    ff ea 86 c9       	goto -0x6cf4 <memmove : 111298 >			  ## entry_list.S:973:0


__stub_memmove:
  117f8c:    ff ea 84 c9       	goto -0x6cf8 <memmove : 111298 >			  ## entry_list.S:980:0


__stub_memcmp:
  117f90:    ff ea f9 c9       	goto -0x6c0e <memcmp : 111386 >			  ## entry_list.S:987:0


__stub_memset:
  117f94:    ff ea e1 c9       	goto -0x6c3e <memset : 11135a >			  ## entry_list.S:994:0


__stub_strcmp:
  117f98:    ff ea 25 ca       	goto -0x6bb6 <strcmp : 1113e6 >			  ## entry_list.S:1001:0


__stub_strcpy:
  117f9c:    ff ea 73 ca       	goto -0x6b1a <strcpy : 111486 >			  ## entry_list.S:1008:0


__stub_strlen:
  117fa0:    ff ea a8 ca       	goto -0x6ab0 <strlen : 1114f4 >			  ## entry_list.S:1015:0


__stub_strncmp:
  117fa4:    ff ea 3f fc       	goto -0x782 <strncmp : 117826 >			  ## entry_list.S:1022:0


__stub_strstr:
  117fa8:    ff ea 4d fc       	goto -0x766 <strstr : 117846 >			  ## entry_list.S:1029:0


__stub_spi_get_port:
  117fac:    ff ea 25 f3       	goto -0x19b6 <spi_get_port : 1165fa >			  ## entry_list.S:1036:0


__stub_spi_set_port:
  117fb0:    ff ea 17 f3       	goto -0x19d2 <spi_set_port : 1165e2 >			  ## entry_list.S:1043:0


__stub_sfc_suspend:
  117fb4:    ff ea 4b f8       	goto -0xf6a <sfc_suspend : 11704e >			  ## entry_list.S:1050:0


__stub_sfc_resume:
  117fb8:    ff ea 5f f8       	goto -0xf42 <sfc_resume : 11707a >			  ## entry_list.S:1057:0


__stub_sfc_drop_cache:
  117fbc:    ff ea 6a f8       	goto -0xf2c <sfc_drop_cache : 117094 >			  ## entry_list.S:1064:0


__stub_chip_crc16:
  117fc0:    ff ea 84 f1       	goto -0x1cf8 <chip_crc16 : 1162cc >			  ## entry_list.S:1071:0


__stub_CrcDecode:
  117fc4:    ff ea a7 f1       	goto -0x1cb2 <CrcDecode : 116316 >			  ## entry_list.S:1078:0


__stub_mask_init:
  117fc8:    ff ea 4a d5       	goto -0x556c <mask_init : 112a60 >			  ## entry_list.S:1085:0


__stub_wdt_clr:
  117fcc:    ff ea 4d f1       	goto -0x1d66 <wdt_clr : 11626a >			  ## entry_list.S:1092:0


__stub_nvram_set_boot_state:
  117fd0:    ff ea cf ca       	goto -0x6a62 <nvram_set_boot_state : 111572 >			  ## entry_list.S:1099:0


__stub_chip_reset:
  117fd4:    ff ea a0 ca       	goto -0x6ac0 <chip_reset : 111518 >			  ## entry_list.S:1106:0


__stub_the_debug_isr:
  117fd8:    ff ea 1d c0       	goto -0x7fc6 <the_debug_isr : 110016 >			  ## entry_list.S:1113:0


__stub_flash_poweron:
  117fdc:    ff ea 8c ef       	goto -0x20e8 <flash_poweron : 115ef8 >			  ## entry_list.S:1120:0


__stub_exception_irq_handler:
  117fe0:    ff ea 10 c0       	goto -0x7fe0 <exception_irq_handler : 110004 >			  ## entry_list.S:1127:0


__stub_print:
  117fe4:    ff ea dd f9       	goto -0xc46 <print : 1173a2 >			  ## entry_list.S:1134:0


__stub_sprintf:
  117fe8:    ff ea 1a fb       	goto -0x9cc <sprintf : 117620 >			  ## entry_list.S:1141:0


__stub_printf:
  117fec:    ff ea 0a fb       	goto -0x9ec <printf : 117604 >			  ## entry_list.S:1148:0


__stub_puts:
  117ff0:    ff ea f9 fa       	goto -0xa0e <puts : 1175e6 >			  ## entry_list.S:1155:0


__stub_doe:
  117ff4:    ff ea a8 fb       	goto -0x8b0 <doe : 117748 >			  ## entry_list.S:1162:0


__stub_LZ4_setStreamDecode:
  117ff8:    ff ea 9b fb       	goto -0x8ca <LZ4_setStreamDecode : 117732 >			  ## entry_list.S:1169:0


__stub_LZ4_decompress_safe_continue:
  117ffc:    ff ea 51 f3       	goto -0x195e <LZ4_decompress_safe_continue : 1166a2 >			  ## entry_list.S:1176:0

Disassembly of section .nul_space:
.nul_space:
   f4240:    60 0f             	r0 = h[r6++=r14] (u)
   f4242:    11 00              <unkown instruction>
   f4244:    a4 11             	r4 = b[r2++=r11] (u)
   f4246:    11 00              <unkown instruction>
   f4248:    60 0c             	r0 = h[r6++=r8] (u)
   f424a:    11 00              <unkown instruction>
   f424c:    60 0d             	r0 = h[r6++=r10] (u)
   f424e:    11 00              <unkown instruction>
   f4250:    b8 5c             	b[r3+-0x4] = r0
   f4252:    11 00              <unkown instruction>
   f4254:    60 00             	cli
   f4256:    11 00              <unkown instruction>
   f4258:    60 04             	[--sp] = {r3-r0}
   f425a:    11 00              <unkown instruction>
   f425c:    60 06             	r0 = h[r6++=0x2] (u)
   f425e:    11 00              <unkown instruction>
   f4260:    60 0a             	r0 = [r6++=r12] 
   f4262:    11 00              <unkown instruction>

